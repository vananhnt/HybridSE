<?xml version="1.0" ?>

<!-- build.xml - the JPF core build script using Ant (http://jakarta.apache.org/ant) 
	public targets: build (default) compile classes and build JPF jar files compile 
	compile JPF and its specific (modeled) environment libraries test run all 
	JPF tests clean remove the files that have been generated by the build process 
	buildinfo create buildinfo properties file -->

<project name="jpf-android" default="build" basedir=".">

	<!-- ========================== COMMON SECTION ========================== -->

	<!-- local props have to come first, because Ant properties are immutable 
		NOTE: this file is local - it is never in the repository! -->
	<property file="local.properties" />

	<!-- loads environment variables set in eclipse/bash -->
	<property environment="env" />

	<echo message="Ant running on Java version ${ant.java.version}" />
	<echo message="Ant running Junit ${env.JUNIT_HOME}/junit.jar" />

	<!-- this is where we get the 'jpf.core' location from -->
	<property file="${user.home}/.jpf/site.properties" />

	<!-- if there is none, default to a peer dir -->
	<property name="jpf-core" value="${env.JPF}/jpf-core" />
	<property name="jpf-nhandler" value="${env.JPF}/jpf-nhandler" />

	<!-- get the dependent project properties -->
	<property file="${jpf-android}/jpf.properties" />
	<property file="${jpf-nhandler}/jpf.properties" />
	<property file="${jpf-core}/jpf.properties" />


	<!-- compiler settings -->
	<property name="debug" value="on" />
	<property name="deprecation" value="off" />

	<uptodate property="build_uptodate" targetfile="build/main/gov/nasa/jpf/build.properties"
		srcfile="build.properties" />

	<!-- generic classpath settings -->
	<path id="lib.path">

		<!-- our own classes and libs come first -->
		<pathelement location="build/main" />
		<pathelement location="build/peers" />
		<pathelement location="build/annotations" />

		<!-- add in what we need from the lib directory -->
		<fileset dir=".">
			<include name="lib/android.jar" />
			<include name="lib/jsqlparser.jar" />
			<include name="lib/commons-io-2.5.jar" />
			<include name="lib/*.jar" />
		</fileset>

		<!-- add projects we depend on -->
		<pathelement path="${jpf-core.native_classpath}" />
		<pathelement path="${jpf-nhandler.native_classpath}" />

	</path>


	<!-- init: common initialization -->
	<target name="-init">
		<tstamp />

		<mkdir dir="build" />
		<!-- the build root -->

		<!-- the things that have to be in the classpath of whatever runs Ant -->
		<available property="have_javac" classname="com.sun.tools.javac.Main" />
		<fail unless="have_javac">no javac was found __or__ check
			http://babelfish.arc.nasa.gov/trac/jpf/wiki/install/build for
			possible
			solutions
		</fail>


		<available file="src/main" type="dir" property="have_main" />
		<available file="src/annotations" type="dir" property="have_annotations" />
		<available file="src/peers" type="dir" property="have_peers" />
		<available file="src/classes" type="dir" property="have_classes" />
		<available file="src/tests" type="dir" property="have_tests" />
		<available file="src/examples" type="dir" property="have_examples" />



		<condition property="have_jvm_code">
			<or>
				<isset property="have_main" />
				<isset property="have_peers" />
			</or>
		</condition>

		<condition property="have_jpf_code">
			<or>
				<isset property="have_classes" />
				<isset property="have_annotations" />
			</or>
		</condition>


		<!-- optionally set the required artifacts here <fail unless="have_main">no 
			src/main</fail> <fail unless="have_annotations">no src/annotations</fail> 
			<fail unless="have_peers">no src/peers</fail> <fail unless="have_classes">no 
			src/classes</fail> <fail unless="have_tests">no src/tests</fail> <fail unless="have_examples">no 
			src/examples</fail> -->

	</target>


	<!-- ======================= COMPILE SECTION ============================= -->
	<!-- public compile -->
	<target name="compile"
		depends="-init,-compile-annotations,-compile-main,-compile-classes, -compile-peers,-compile-tests,-compile-examples"
		description="compile all JPF core sources">
	</target>

	<target name="-compile-annotations" if="have_annotations">
		<mkdir dir="build/annotations" />
		<javac srcdir="src/annotations" destdir="build/annotations"
			includeantruntime="false" debug="${debug}" deprecation="${deprecation}"
			classpath="" />
	</target>

	<target name="-compile-main" if="have_main">
		<mkdir dir="build/main" />
		<javac srcdir="src/main" destdir="build/main" includeantruntime="false"
			debug="${debug}" deprecation="${deprecation}" classpathref="lib.path">
			<!-- <compilerarg value="-XDenableSunApiLintControl"/> <compilerarg value="-Xlint:all"/> -->
		</javac>

	</target>

	<target name="-compile-classes" if="have_classes"
		depends="-compile-annotations,-compile-main ">
		<mkdir dir="build/classes" />
		<javac srcdir="src/classes" destdir="build/classes"
			includeantruntime="false" debug="${debug}" deprecation="${deprecation}">
			<compilerarg
				line="-Xlint:-unchecked -Xlint:-deprecation -Xlint:-rawtypes -Xlint:-cast -Xlint:-serial" />
			<compilerarg value="-XDenableSunApiLintControl" />
			<compilerarg value="-Xlint:all,-sunapi" />
			<classpath>
				<path refid="lib.path" />
				<pathelement location="build/annotations" />
			</classpath>
		</javac>

	</target>



	<target name="-compile-peers" if="have_peers"
		depends="-compile-main,-compile-classes">
		<mkdir dir="build/peers" />
		<javac srcdir="src/peers" destdir="build/peers"
			includeantruntime="false" debug="${debug}" deprecation="${deprecation}">
			<compilerarg value="-XDenableSunApiLintControl" />
			<compilerarg value="-Xlint:all,-sunapi,-serial" />
			<classpath>
				<pathelement location="build/classes" />
				<pathelement location="build/main" />
				<pathelement location="build/annotations" />

				<!-- add in what we need from the lib directory -->
				<fileset dir=".">
					<include name="lib/android.jar" />
					<include name="lib/jsqlparser.jar" />
				</fileset>

				<!-- add projects we depend on -->
				<pathelement path="${jpf-core.native_classpath}" />
				<pathelement path="${jpf-nhandler.native_classpath}" />
			</classpath>

		</javac>
	</target>



	<target name="-compile-tests" if="have_tests"
		depends="-compile-annotations,-compile-main,-compile-classes">
		<mkdir dir="build/tests" />
		<javac srcdir="src/tests" destdir="build/tests"
			includeantruntime="false" debug="${debug}" deprecation="${deprecation}">
			<compilerarg value="-XDenableSunApiLintControl" />
			<compilerarg value="-Xlint:all,-sunapi,-serial,-rawtypes,-unchecked" />
			<classpath>
				<pathelement location="build/classes" />
				<path refid="lib.path" />
				<path location="${env.JUNIT_HOME}/junit.jar" />
			</classpath>
		</javac>
	</target>

	<target name="-compile-examples" if="have_examples"
		depends="-compile-annotations,-compile-main">
		<mkdir dir="build/examples" />
		<javac srcdir="src/examples" destdir="build/examples"
			includeantruntime="false" debug="${debug}" deprecation="${deprecation}">
			<compilerarg value="-XDenableSunApiLintControl" />
			<compilerarg value="-Xlint:all,-sunapi,-serial,-rawtypes,-unchecked" />
			<classpath>
				<pathelement location="build/examples" />
				<path refid="lib.path" />
				<path location="${env.JUNIT_HOME}/junit.jar" />
				<path location="lib/commons-io-2.5.jar" />
			</classpath>
		</javac>
	</target>


	<!-- ======================= MISC SECTION ================================ -->

	<!-- build jars -->
	<target name="build" depends="compile,-jar-jvm,-jar-jpf,-jar-annotations"
		description="generate the ${ant.project.name} jar files">
	</target>

	<target name="-jar-jvm" if="have_jvm_code">
		<jar jarfile="build/${ant.project.name}.jar">
			<fileset dir="build/main" erroronmissingdir="false" />
			<fileset dir="build/peers" erroronmissingdir="true" />
			<!-- this is redundant, but if JPF is executed from java.class.path it 
				wouldn't find annotations -->
			<fileset dir="build/annotations" />

			<!-- this is for annotations used by JPF regression tests, which can also 
				be executed outside of junit -->
			<fileset dir="build/classes">
				<include name="org/junit/*.class" />
			</fileset>

			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Implementation-Vendor" value="University of Stellenbosch" />
			</manifest>
		</jar>
	</target>

	<target name="-jar-jpf" if="have_jpf_code">
		<jar jarfile="build/${ant.project.name}-classes.jar"
			whenmanifestonly="skip">
			<fileset dir="build/classes" />
			<fileset dir="build/annotations" />

			<fileset dir="build/main">
				<!-- we need this one in case a SUT uses the Verify API -->
				<include name="gov/nasa/jpf/vm/AndroidStateComparator.class" />
				<include name="gov/nasa/jpf/util/event/AndroidEventProducer.class" />
				<include name="gov/nasa/jpf/util/event/events/Event.class" />
				<include name="gov/nasa/jpf/util/event/events/SystemEvent.class" />
				<include name="gov/nasa/jpf/util/event/events/UIEvent.class" />
				<include name="gov/nasa/jpf/util/event/InvalidEventException.class" />
				<include name="gov/nasa/jpf/util/event/EventProcessor.class" />
				<include name="gov/nasa/jpf/util/event/events/AndroidEvent.class" />
				<include name="gov/nasa/jpf/util/event/events/EventImpl.class" />
				<include name="gov/nasa/jpf/util/event/events/KeyPressEvent.class" />
				<include name="gov/nasa/jpf/util/event/events/AlarmEvent.class" />
				<include name="gov/nasa/jpf/util/event/events/LocationEvent.class" />
				<include
					name="gov/nasa/jpf/util/event/events/SharedPreferenceEvent.class" />
				<include name="gov/nasa/jpf/vm/AndroidVerify.class" />
				<include name="gov/nasa/jpf/vm/Abstraction.class" />
			</fileset>

		</jar>
	</target>

	<target name="-jar-annotations" if="have_annotations">
		<!-- optional jar that contains annotations to be used in non-JPF dependent 
			apps -->
		<jar jarfile="build/${ant.project.name}-annotations.jar"
			whenmanifestonly="skip">
			<fileset dir="build/annotations" erroronmissingdir="false" />
		</jar>
	</target>


	<!-- build distribution zips -->

	<target name="dist" description="build binary distribution"
		depends="build">
		<delete file="build/${ant.project.name}.zip" />
		<!-- 2do this seems stupid - there needs to be a better way to re-base 
			(zip basedir fails miserably) -->
		<zip destfile="build/${ant.project.name}.zip" update="false"
			excludes="*">
			<zipfileset file="jpf.properties" prefix="${ant.project.name}" />
			<zipfileset dir="lib" prefix="${ant.project.name}/lib" />
			<!-- <zipfileset dir="bin" prefix="${ant.project.name}/bin" /> -->
			<zipfileset dir="build" includes="*.jar"
				prefix="${ant.project.name}/build" />
			<zipfileset dir="tools" includes="Run*.jar"
				prefix="${ant.project.name}/tools" />
		</zip>
	</target>

	<target name="src-dist" description="build source distribution">
		<delete file="build/${ant.project.name}-src.zip" />

		<zip destfile="build/${ant.project.name}-src.zip" update="false"
			excludes="*">
			<zipfileset file="jpf.properties" prefix="${ant.project.name}" />
			<zipfileset file="build.xml" prefix="${ant.project.name}" />
			<zipfileset dir="src" prefix="${ant.project.name}/src"
				erroronmissingdir="false" />
			<zipfileset dir="lib" prefix="${ant.project.name}/lib"
				erroronmissingdir="false" />
			<zipfileset dir="bin" prefix="${ant.project.name}/bin"
				erroronmissingdir="false" />
			<zipfileset dir="tools" includes="Run*.jar"
				prefix="${ant.project.name}/tools" erroronmissingdir="false" />

			<!-- IDE related configuration files -->
			<zipfileset file=".project" prefix="${ant.project.name}" />
			<zipfileset file=".classpath" prefix="${ant.project.name}" />
			<zipfileset dir="eclipse" prefix="${ant.project.name}/eclipse"
				erroronmissingdir="false" />

			<zipfileset dir="nbproject" prefix="${ant.project.name}/nbproject"
				erroronmissingdir="false" />
		</zip>
	</target>


	<!-- public clean: cleanup from previous tasks/builds -->
	<target name="clean">
		<delete dir="build" />
		<delete>
			<fileset dir="." includes="**/*~" defaultexcludes="no" />
			<fileset dir="." includes="**/*.bak" defaultexcludes="no" />
			<fileset dir="." includes="**/error.xml" />
		</delete>
	</target>



	<!-- ======================= TEST SECTION ================================ -->

	<target name="test" depends="build" description="run core regression tests"
		if="have_tests">

		<!-- note this can be directly set in local.properties, which overrides 
			this setting -->
		<property name="junit.home" value="${env.JUNIT_HOME}" />

		<condition property="junit.usefile">
			<!-- don't set if this is running from within an IDE that collects output -->
			<not>
				<isset property="netbeans.home" />
			</not>
		</condition>

		<junit printsummary="on" showoutput="on" haltonfailure="no"
			logfailedtests="true" failureproperty="test.failed" dir="${basedir}"
			fork="yes" forkmode="perTest" maxmemory="1024m" outputtoformatters="true">
			<formatter type="plain" usefile="${junit.usefile}" />

			<assertions>
				<enable />
			</assertions>

			<classpath>
				<path refid="lib.path" />
				<pathelement location="build/tests" />
				<pathelement location="build/classes" />
				<pathelement location="build/annotations" />
				<pathelement location="build/main" />

				<fileset dir="${junit.home}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>

			<batchtest todir="build/tests">
				<fileset dir="build/tests">
					<exclude name="**/JPF_*.class" />
					<include name="**/*Test.class" />

				</fileset>
			</batchtest>

		</junit>

		<fail if="test.failed" />

	</target>

</project>