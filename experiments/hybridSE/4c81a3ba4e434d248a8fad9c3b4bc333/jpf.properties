# location of the project jpf-android
jpf-android = ${config_path}

@using jpf-core

#--- listeners
listener+=;gov.nasa.jpf.jvm.InjectMainListener;
listener+=;gov.nasa.jpf.jvm.EmmaListener;
listener+=;gov.nasa.jpf.jvm.PathCGPrinterListener;

#--- search class
#search.class = .search.heuristic.BFSHeuristic
search.depth_limit = 1000
search.multiple_errors = false

#--- choices
verify.choice = all
verify.symb_input = false

#--- input generation
# heuristic, heuristic2, default, dynamic, script
event.strategy=default

#count events over entire tree or per branch 
event.heuristic.backtrack = false
# treat same events different is environment state differs
event.heuristic.count = 1
# use dynamic values in heuristic search
event.heuristic.dynamic = false

# limits the length of event sequences
event.max_depth = 20
event.fire_br = true
event.tree.includeEnvironmentState = false


#--- jpf-android
#wait,normal,test	
android.loop=wait
#android.checklist_enabled = false


#--- logging
log.level=info
log.handler.class=gov.nasa.jpf.util.LogHandler


#-- reporting
report.console.file=result.txt
report.console.property_violation=error,snapshot
jpf.print_exception_stack = true


#----- jpf
jpf-android.useDefaultPrefs = false

#vm.serializer.class = gov.nasa.jpf.vm.serialize.OptimizedCFSerializer
filter.static_ammendments+=,gov.nasa.jpf.android.IgnoreEmmaReflectiveNames,
filter.static_ammendments+=,gov.nasa.jpf.android.IgnoreConfiguredReflectiveNames,
filter.instance_ammendments+=,gov.nasa.jpf.android.IgnoreConfiguredReflectiveNames,

vm.scheduler.sync.class = gov.nasa.jpf.vm.AndroidSyncPolicy
vm.scheduler.sharedness.class = gov.nasa.jpf.vm.AndroidPathSharednessPolicy
jpf-android.detectRace = false


vm.shared.never_break_methods+=,android.preference.PreferenceInflator.inflate, android.view.LayoutInflator.inflate, android.os.ServiceManager.startServices,javax.xml.parsers.AndroidSAXParser.parse,javax.xml.parsers.AndroidSAXParser.visit,org.xml.sax.helpers.DefaultHandler.characters,com.vladium.emma.rt.RT.r
vm.shared.never_break_fields+=,*.$VRc, com.vladium.emma.rt.RT.c,

# do we also break transitions on reference field puts that could make the
# referenced objects shared
vm.shared.break_on_exposure = false
# do we try to deduce if a field is supposed to be protected by a lock? In this
# case, we stop to treat this field as a boundary step, but only if we see the lock
vm.shared.sync_detection = false
# do we assume final fields to be race-safe (not really true, esp. for
# instance fields with references leaking from a ctor, but a good starting point)
vm.shared.skip_finals=true
# ClassLoaders synchronize the loading of a class.
# Thus, static final fields can never be included in a race condition since only 1 thread is allowed to access the class while it is loading.
# Defaulted to false to maintain backward compatibility in JPF
vm.shared.skip_static_finals=true
# When an object's constructor has returned, then the final fields can not be changed.
# Thus, instance final fields can never be included in a race condition (unless the this reference is leaked from a constructor)
# Defaulted to false to maintain backward compatibility in JPF
vm.shared.skip_constructed_finals=true

# do we ignore explicitly set Thread.UncaughtHandlers
vm.ignore_uncaught_handler=false

# do we treat returned Thread.UncaughtHandler.uncaughtException() calls as normal thread termination
vm.pass_uncaught_handler=false

# do we reclaim unused memory (run garbage collection)
vm.gc = true

# threshold after which number of allocations to perform a garbage collection
# (even within the same transition, to avoid lots of short living objects)
# -1 means never
vm.max_alloc_gc = 10000 

# do we run finalizers on collected objects (only makes sense with garbage collection)
vm.finalize = false
# if this is set to true, overriden finalize() methods execute upon objects garbage collections
vm.process_finalizers = false


# this is a preemption boundary specifying the max number of instructions after which we
# break the current transition if there are other runnable threads
vm.max_transition_length=10000000

# are thread ids of terminated threads with recycled thread objects reused when creating new
# threads. This is required for programs that sequentially create many short living threads
vm.reuse_tid = false

vm.halt_on_throw=,gov.nasa.jpf.util.event.InvalidEventException, java.lang.NullPointerException, java.lang.RuntimeException, java.lang.NoSuchMethodError, java.lang.IllegalStateException

cg.threads.break_start=false
cg.threads.break_yield=true
cg.threads.break_sleep=false
cg.threads.break_arrays=false

cg.break_sleep=false
cg.break_yield=true
cg.break_lock_release=false
cg.break_notify=false
cg.break_priority=false
cg.enable_atomic=false
cg.break_single_choice = false 

race.exclude+=,android.*,com.android.*,org.xml.sax.*,models.*,gov.nasa.jpf.util.event.*,gov.nasa.jpf.util.event.events.*,gov.nasa.jpf.vm.*,org.xml.sax.helpers*,org.xmlpull.v1.*

search.properties=\
gov.nasa.jpf.vm.NoUncaughtExceptionsProperty,
#gov.nasa.jpf.vm.NotDeadlockedProperty
#gov.nasa.jpf.vm.NotPartiallyDeadlockedProperty

###################################################################################
# Classpath elements for the host VM (java)
#   ${jpf-android}/build/jpf-android.jar - contains the compiled native peers of jpf-android
#   ${jpf-android}/lib/android.jar  - the official android classes
#   ${jpf-core}/build/jpf.jar - making sure android classes have precedence over java classes
#
jpf-android.native_classpath =\
   ${jpf-android}/build/jpf-android.jar;\
   ${jpf-android}/lib/android-stub.jar;\
   ${jpf-android}/lib/xmlpull_1_0_5.jar;\
   ${jpf-android}/lib/jsqlparser.jar;\
   ${jpf-android}/lib/emma.jar;\
   ${jpf-android}/lib/bson-3.0.4.jar;\
   ${jpf-android}/lib/mongo-java-driver-3.1.0.jar;\
   ${jpf-android}/lib/xpp3_min-1.1.4c.jar;\
   ${jpf-android}/lib/xstream-1.4.8.jar;\
   ${jpf-android}/lib/commons-io-2.5.jar;
   
   
# JPF classpath - used by JPF to load system-under-test classes
#   ${jpf-android}/build/jpf-android-classes.jar - contains the modeled compiled jpf-classes
#   ${jpf-android}/build/examples - this is included as the classpath is used when running examples as well. This contains the example's compiled code
#   ${jpf-android}/lib/android.jar -  the official android classes
#
jpf-android.classpath =\
   ${jpf-android}/build/jpf-android-classes.jar;\
   ${jpf-android}/lib/android-stub.jar;\
   ${jpf-android}/lib/android.jar;\
   ${jpf-android}/build/examples;\
   ${jpf-android}/lib/commons-io-2.5.jar;
   

# JPF tests classpath (used by host VM and JPF)
#   ${jpf-android}/build/tests - the compiled test classes  
jpf-android.test_classpath =\
   ${jpf-android}/build/tests;\
   ${jpf-android}/build/jpf-android.jar;\
   ${jpf-android}/build/jpf-android-classes.jar;\
   ${jpf-android}/lib/xmlpull_1_0_5.jar;\
   
# JPF source path (used by JPF to locate sources for system-under-test classes)
jpf-android.sourcepath =\
   ${jpf-android}/src/examples;${jpf-android}/src/classes;${jpf-android}/src/main;

# The path to the package containing the native peers
jpf-android.peer_packages=gov.nasa.jpf.android


