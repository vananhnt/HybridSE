 + Analyzing samples/32caf/32caff26a4dfa373cd0ed869544a30b7$ ...
-> Capstone disassembler elapsed: 853ms
-> Exporting to .capstone-asm file ...
 + Parsing samples/32caf/32caff26a4dfa373cd0ed869544a30b7$ ...

-> Executing 11d80 : push {r4,r5,r6,r7,r8,sb,sl,fp,lr} 
-> Executing 11d84 : sub sp,sp,#0x540 
-> Executing 11d88 : sub sp,sp,#0xc 
-> Executing 11d8c : add r4,sp,#0x530 
-> Executing 11d90 : mov r5,#0 
-> Executing 11d94 : mov r6,r0 
-> Executing 11d98 : mov r0,r4 
-> Executing 11d9c : mov r7,r1 
-> Executing 11da0 : str r5,[sp,#0x540] 
-> Executing 11da4 : bl #0x18db8 
	-> Direct Jump to 101816 if null 
	 === Call to library function: sigemptyset
-> Executing 11da8 : mov r1,#2 
-> Executing 11dac : mov r0,r4 
-> Executing 11db0 : bl #0x18d68 
	-> Direct Jump to 101736 if null 
	 === Call to library function: sigaddset
-> Executing 11db4 : mov r2,r5 
-> Executing 11db8 : mov r1,r4 
-> Executing 11dbc : mov r0,r5 
-> Executing 11dc0 : bl #0x1818c 
	-> Direct Jump to 98700 if null 
	 === Call to library function: sigprocmask
-> Executing 11dc4 : mov r1,#1 
-> Executing 11dc8 : mov r0,#0x11 
-> Executing 11dcc : bl #0x18dcc 
	-> Direct Jump to 101836 if null 
	 === Call to library function: signal
-> Executing 11dd0 : ldr r1,[pc,#0x614] 
-> Executing 11dd4 : mov r0,#5 
-> Executing 11dd8 : bl #0x18dcc 
	-> Direct Jump to 101836 if null 
	 === Call to library function: signal
-> Executing 11ddc : bl #0x177ec 
	-> Direct Jump to 96236 if null 
	 ==+ Call to: util_local_addr
	-> Start Jumping from 11ddc --> 177ec
-> Executing 177ec : push {r4,r5,r6,lr} 
-> Executing 177f0 : mov r6,#0x10 
-> Executing 177f4 : sub sp,sp,#0x18 
-> Executing 177f8 : str r6,[sp,#0x14] 
-> Executing 177fc : bl #0x186c4 
	-> Direct Jump to 100036 if null 
	 === Call to library function: __errno_location
-> Executing 17800 : mov r4,#0 
-> Executing 17804 : str r4,[r0] 
-> Executing 17808 : mov r0,#2 
-> Executing 1780c : mov r1,r0 
-> Executing 17810 : mov r2,r4 
-> Executing 17814 : bl #0x18d24 
	-> Direct Jump to 101668 if null 
	 === Call to library function: socket
-> Executing 17818 : cmn r0,#1 
-> Executing 1781c : mov r5,r0 
-> Executing 17820 : b 96288-2 
	-> Direct Jump to 96288-2 if EQ 
	-> Checking path constrains by Z3 ...  (= #x0000003c #x00000000)UNSAT
	-> Checking path constrains by Z3 ...  (not (= #x0000003c #x00000000))SAT
	-> Start Jumping from 17820 --> 17824
-> Executing 17824 : b #0x17874 
	-> Direct Jump to 96372 if EQ 
	-> Checking path constrains by Z3 ...  (and (not (= #x0000003c #x00000000)) (= #x0000003c #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  (and (not (= #x0000003c #x00000000)) (not (= #x0000003c #x00000000)))SAT
	-> Start Jumping from 17824 --> 17828
-> Executing 17828 : mov r3,#0x800 
-> Executing 1782c : add r3,r3,#8 
-> Executing 17830 : orr r3,r3,r3,lsl #16 
-> Executing 17834 : add r4,sp,#4 
-> Executing 17838 : str r3,[sp,#8] 
-> Executing 1783c : mov r3,#2 
-> Executing 17840 : mov r2,r6 
-> Executing 17844 : mov r1,r4 
-> Executing 17848 : strh r3,[sp,#4] 
-> Executing 1784c : mov r3,#0x3500 
-> Executing 17850 : strh r3,[sp,#6] 
-> Executing 17854 : bl #0x18890 
	-> Direct Jump to 100496 if null 
	 === Call to library function: connect
-> Executing 17858 : mov r1,r4 
-> Executing 1785c : add r2,sp,#0x14 
-> Executing 17860 : mov r0,r5 
-> Executing 17864 : bl #0x18904 
	-> Direct Jump to 100612 if null 
	 === Call to library function: getsockname
-> Executing 17868 : mov r0,r5 
-> Executing 1786c : bl #0x1b4f0 
	-> Direct Jump to 111856 if null 
	 === Call to library function: close
-> Executing 17870 : ldr r0,[sp,#8] 
-> Executing 17874 : add sp,sp,#0x18 
-> Executing 17878 : pop {r4,r5,r6,lr} 
-> Executing 1787c : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 73184
	-> Start Jumping from 1787c --> 11de0
-> Executing 11de0 : ldr r2,[pc,#0x608] 
-> Executing 11de4 : ldr r3,[pc,#0x608] 
-> Executing 11de8 : ldr r1,[pc,#0x608] 
-> Executing 11dec : str r3,[r2,#4] 
-> Executing 11df0 : mov ip,#2 
-> Executing 11df4 : mov r3,#0x5000 
-> Executing 11df8 : str r0,[r1] 
-> Executing 11dfc : strh r3,[r2,#2] 
-> Executing 11e00 : strh ip,[r2] 
-> Executing 11e04 : bl #0x15ecc 
	-> Direct Jump to 89804 if null 
	 ==+ Call to: table_init
	-> Start Jumping from 11e04 --> 15ecc
-> Executing 15ecc : push {r4,r5,r6,r7,r8,sb,sl,fp,lr} 
-> Executing 15ed0 : mov r0,#0x1e 
-> Executing 15ed4 : sub sp,sp,#4 
-> Executing 15ed8 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 15edc : ldr r4,[pc,#0xff8] 
-> Executing 15ee0 : ldr r1,[pc,#0xff8] 
-> Executing 15ee4 : mov r2,#0x1e 
-> Executing 15ee8 : mov r5,r0 
-> Executing 15eec : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 15eec --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000003c #x00000000)) (not (= #x0000003c #x00000000))) (= #x0000001e #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  c #x00000000)) (not (= #x0000003c #x00000000))) (not (= #x0000001e #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000001e #x00000000))) (not (= #xffffffe3 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000001e #x00000000))) (not (not (= #xffffffe3 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffe3 #x00000000))) (not (= #xffffffe4 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffe3 #x00000000))) (not (not (= #xffffffe4 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffe4 #x00000000))) (not (= #xffffffe5 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffe4 #x00000000))) (not (not (= #xffffffe5 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffe5 #x00000000))) (not (= #xffffffe6 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffe5 #x00000000))) (not (not (= #xffffffe6 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffe6 #x00000000))) (not (= #xffffffe7 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffe6 #x00000000))) (not (not (= #xffffffe7 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffe7 #x00000000))) (not (= #xffffffe8 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffe7 #x00000000))) (not (not (= #xffffffe8 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffe8 #x00000000))) (not (= #xffffffe9 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffe8 #x00000000))) (not (not (= #xffffffe9 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffe9 #x00000000))) (not (= #xffffffea #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffe9 #x00000000))) (not (not (= #xffffffea #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffea #x00000000))) (not (= #xffffffeb #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffea #x00000000))) (not (not (= #xffffffeb #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffeb #x00000000))) (not (= #xffffffec #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffeb #x00000000))) (not (not (= #xffffffec #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffec #x00000000))) (not (= #xffffffed #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffec #x00000000))) (not (not (= #xffffffed #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 89840
	-> Start Jumping from 175c0 --> 15ef0
-> Executing 15ef0 : mov r2,#0x1e 
-> Executing 15ef4 : mov r0,#2 
-> Executing 15ef8 : str r5,[r4,#0x18] 
-> Executing 15efc : strh r2,[r4,#0x1c] 
-> Executing 15f00 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 15f04 : ldr r1,[pc,#0xfd8] 
-> Executing 15f08 : mov r2,#2 
-> Executing 15f0c : mov r5,#2 
-> Executing 15f10 : mov r6,r0 
-> Executing 15f14 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 15f14 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  ffffec #x00000000))) (not (= #xffffffed #x00000000))) (= #x00000002 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffed #x00000000))) (not (= #x00000002 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000002 #x00000000))) (not (= #xffffffff #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000002 #x00000000))) (not (not (= #xffffffff #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 89880
	-> Start Jumping from 175c0 --> 15f18
-> Executing 15f18 : mov r0,#0x1d 
-> Executing 15f1c : str r6,[r4,#0x20] 
-> Executing 15f20 : strh r5,[r4,#0x24] 
-> Executing 15f24 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 15f28 : ldr r1,[pc,#0xfb8] 
-> Executing 15f2c : mov r2,#0x1d 
-> Executing 15f30 : mov r6,#0x1d 
-> Executing 15f34 : mov r7,r0 
-> Executing 15f38 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 15f38 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000002 #x00000000))) (not (= #xffffffff #x00000000))) (= #x0000001d #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffff #x00000000))) (not (= #x0000001d #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000001d #x00000000))) (not (= #xffffffe4 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000001d #x00000000))) (not (not (= #xffffffe4 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 89916
	-> Start Jumping from 175c0 --> 15f3c
-> Executing 15f3c : mov r3,#0x15c 
-> Executing 15f40 : mov r0,r5 
-> Executing 15f44 : strh r6,[r4,r3] 
-> Executing 15f48 : str r7,[r4,#0x158] 
-> Executing 15f4c : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 15f50 : mov r2,r5 
-> Executing 15f54 : ldr r1,[pc,#0xf90] 
-> Executing 15f58 : mov r7,r0 
-> Executing 15f5c : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 15f5c --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00001d #x00000000))) (not (= #xffffffe4 #x00000000))) (= #x00000002 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffe4 #x00000000))) (not (= #x00000002 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000002 #x00000000))) (not (= #xffffffff #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000002 #x00000000))) (not (not (= #xffffffff #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 89952
	-> Start Jumping from 175c0 --> 15f60
-> Executing 15f60 : mov r3,#0x164 
-> Executing 15f64 : mov r0,r6 
-> Executing 15f68 : strh r5,[r4,r3] 
-> Executing 15f6c : str r7,[r4,#0x160] 
-> Executing 15f70 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 15f74 : mov r2,r6 
-> Executing 15f78 : ldr r1,[pc,#0xf70] 
-> Executing 15f7c : mov r5,r0 
-> Executing 15f80 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 15f80 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000002 #x00000000))) (not (= #xffffffff #x00000000))) (= #x0000001d #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffff #x00000000))) (not (= #x0000001d #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000001d #x00000000))) (not (= #xffffffe4 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000001d #x00000000))) (not (not (= #xffffffe4 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 89988
	-> Start Jumping from 175c0 --> 15f84
-> Executing 15f84 : mov r0,#7 
-> Executing 15f88 : str r5,[r4,#0x10] 
-> Executing 15f8c : strh r6,[r4,#0x14] 
-> Executing 15f90 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 15f94 : ldr r1,[pc,#0xf58] 
-> Executing 15f98 : mov r2,#7 
-> Executing 15f9c : mov r5,r0 
-> Executing 15fa0 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 15fa0 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00001d #x00000000))) (not (= #xffffffe4 #x00000000))) (= #x00000007 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffe4 #x00000000))) (not (= #x00000007 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000007 #x00000000))) (not (= #xfffffffa #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000007 #x00000000))) (not (not (= #xfffffffa #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90020
	-> Start Jumping from 175c0 --> 15fa4
-> Executing 15fa4 : mov r3,#7 
-> Executing 15fa8 : mov r0,#5 
-> Executing 15fac : strh r3,[r4,#0x34] 
-> Executing 15fb0 : str r5,[r4,#0x30] 
-> Executing 15fb4 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 15fb8 : ldr r1,[pc,#0xf38] 
-> Executing 15fbc : mov r2,#5 
-> Executing 15fc0 : mov r8,#5 
-> Executing 15fc4 : mov r5,r0 
-> Executing 15fc8 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 15fc8 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000007 #x00000000))) (not (= #xfffffffa #x00000000))) (= #x00000005 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffffa #x00000000))) (not (= #x00000005 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000005 #x00000000))) (not (= #xfffffffc #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000005 #x00000000))) (not (not (= #xfffffffc #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90060
	-> Start Jumping from 175c0 --> 15fcc
-> Executing 15fcc : mov r0,#0xb 
-> Executing 15fd0 : str r5,[r4,#0x38] 
-> Executing 15fd4 : strh r8,[r4,#0x3c] 
-> Executing 15fd8 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 15fdc : ldr r1,[pc,#0xf18] 
-> Executing 15fe0 : mov r2,#0xb 
-> Executing 15fe4 : mov r5,r0 
-> Executing 15fe8 : mov r7,#0xb 
-> Executing 15fec : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 15fec --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000005 #x00000000))) (not (= #xfffffffc #x00000000))) (= #x0000000b #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffffc #x00000000))) (not (= #x0000000b #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000000b #x00000000))) (not (= #xfffffff6 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000000b #x00000000))) (not (not (= #xfffffff6 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90096
	-> Start Jumping from 175c0 --> 15ff0
-> Executing 15ff0 : mov r0,#4 
-> Executing 15ff4 : str r5,[r4,#0x40] 
-> Executing 15ff8 : strh r7,[r4,#0x44] 
-> Executing 15ffc : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16000 : ldr r1,[pc,#0xef8] 
-> Executing 16004 : mov r2,#4 
-> Executing 16008 : mov r5,r0 
-> Executing 1600c : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 1600c --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00000b #x00000000))) (not (= #xfffffff6 #x00000000))) (= #x00000004 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff6 #x00000000))) (not (= #x00000004 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000004 #x00000000))) (not (= #xfffffffd #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000004 #x00000000))) (not (not (= #xfffffffd #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90128
	-> Start Jumping from 175c0 --> 16010
-> Executing 16010 : mov r2,#4 
-> Executing 16014 : mov r0,#7 
-> Executing 16018 : str r5,[r4,#0x48] 
-> Executing 1601c : strh r2,[r4,#0x4c] 
-> Executing 16020 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16024 : ldr r1,[pc,#0xed8] 
-> Executing 16028 : mov r2,#7 
-> Executing 1602c : mov r5,r0 
-> Executing 16030 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16030 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000004 #x00000000))) (not (= #xfffffffd #x00000000))) (= #x00000007 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffffd #x00000000))) (not (= #x00000007 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000007 #x00000000))) (not (= #xfffffffa #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000007 #x00000000))) (not (not (= #xfffffffa #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90164
	-> Start Jumping from 175c0 --> 16034
-> Executing 16034 : mov r3,#7 
-> Executing 16038 : mov r0,#8 
-> Executing 1603c : strh r3,[r4,#0x54] 
-> Executing 16040 : str r5,[r4,#0x50] 
-> Executing 16044 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16048 : ldr r1,[pc,#0xeb8] 
-> Executing 1604c : mov r2,#8 
-> Executing 16050 : mov r5,r0 
-> Executing 16054 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16054 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000007 #x00000000))) (not (= #xfffffffa #x00000000))) (= #x00000008 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffffa #x00000000))) (not (= #x00000008 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000008 #x00000000))) (not (= #xfffffff9 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000008 #x00000000))) (not (not (= #xfffffff9 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90200
	-> Start Jumping from 175c0 --> 16058
-> Executing 16058 : mov r2,#8 
-> Executing 1605c : mov r0,#0x6a 
-> Executing 16060 : str r5,[r4,#0x58] 
-> Executing 16064 : strh r2,[r4,#0x5c] 
-> Executing 16068 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 1606c : ldr r1,[pc,#0xe98] 
-> Executing 16070 : mov r2,#0x6a 
-> Executing 16074 : mov r5,r0 
-> Executing 16078 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16078 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000008 #x00000000))) (not (= #xfffffff9 #x00000000))) (= #x0000006a #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff9 #x00000000))) (not (= #x0000006a #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000006a #x00000000))) (not (= #xffffff97 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000006a #x00000000))) (not (not (= #xffffff97 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90236
	-> Start Jumping from 175c0 --> 1607c
-> Executing 1607c : mov r3,#0x354 
-> Executing 16080 : mov r2,#0x6a 
-> Executing 16084 : mov r0,#0x6b 
-> Executing 16088 : strh r2,[r4,r3] 
-> Executing 1608c : str r5,[r4,#0x350] 
-> Executing 16090 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16094 : ldr r1,[pc,#0xe74] 
-> Executing 16098 : mov r2,#0x6b 
-> Executing 1609c : mov r5,r0 
-> Executing 160a0 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 160a0 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00006a #x00000000))) (not (= #xffffff97 #x00000000))) (= #x0000006b #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff97 #x00000000))) (not (= #x0000006b #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000006b #x00000000))) (not (= #xffffff96 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000006b #x00000000))) (not (not (= #xffffff96 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90276
	-> Start Jumping from 175c0 --> 160a4
-> Executing 160a4 : mov r3,#0x35c 
-> Executing 160a8 : mov r2,#0x6b 
-> Executing 160ac : mov r0,#0x6c 
-> Executing 160b0 : strh r2,[r4,r3] 
-> Executing 160b4 : str r5,[r4,#0x358] 
-> Executing 160b8 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 160bc : ldr r1,[pc,#0xe50] 
-> Executing 160c0 : mov r2,#0x6c 
-> Executing 160c4 : mov r5,r0 
-> Executing 160c8 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 160c8 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00006b #x00000000))) (not (= #xffffff96 #x00000000))) (= #x0000006c #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff96 #x00000000))) (not (= #x0000006c #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000006c #x00000000))) (not (= #xffffff95 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000006c #x00000000))) (not (not (= #xffffff95 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90316
	-> Start Jumping from 175c0 --> 160cc
-> Executing 160cc : mov r3,#0x364 
-> Executing 160d0 : mov r2,#0x6c 
-> Executing 160d4 : mov r0,#0x6d 
-> Executing 160d8 : strh r2,[r4,r3] 
-> Executing 160dc : str r5,[r4,#0x360] 
-> Executing 160e0 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 160e4 : ldr r1,[pc,#0xe2c] 
-> Executing 160e8 : mov r2,#0x6d 
-> Executing 160ec : mov r5,r0 
-> Executing 160f0 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 160f0 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00006c #x00000000))) (not (= #xffffff95 #x00000000))) (= #x0000006d #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff95 #x00000000))) (not (= #x0000006d #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000006d #x00000000))) (not (= #xffffff94 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000006d #x00000000))) (not (not (= #xffffff94 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90356
	-> Start Jumping from 175c0 --> 160f4
-> Executing 160f4 : mov r3,#0x36c 
-> Executing 160f8 : mov r2,#0x6d 
-> Executing 160fc : mov r0,#0x6e 
-> Executing 16100 : strh r2,[r4,r3] 
-> Executing 16104 : str r5,[r4,#0x368] 
-> Executing 16108 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 1610c : ldr r1,[pc,#0xe08] 
-> Executing 16110 : mov r2,#0x6e 
-> Executing 16114 : mov r5,r0 
-> Executing 16118 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16118 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00006d #x00000000))) (not (= #xffffff94 #x00000000))) (= #x0000006e #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff94 #x00000000))) (not (= #x0000006e #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000006e #x00000000))) (not (= #xffffff93 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000006e #x00000000))) (not (not (= #xffffff93 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90396
	-> Start Jumping from 175c0 --> 1611c
-> Executing 1611c : mov r3,#0x374 
-> Executing 16120 : mov r2,#0x6e 
-> Executing 16124 : mov r0,#0x6f 
-> Executing 16128 : strh r2,[r4,r3] 
-> Executing 1612c : str r5,[r4,#0x370] 
-> Executing 16130 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16134 : ldr r1,[pc,#0xde4] 
-> Executing 16138 : mov r2,#0x6f 
-> Executing 1613c : mov r5,r0 
-> Executing 16140 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16140 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00006e #x00000000))) (not (= #xffffff93 #x00000000))) (= #x0000006f #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff93 #x00000000))) (not (= #x0000006f #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000006f #x00000000))) (not (= #xffffff92 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000006f #x00000000))) (not (not (= #xffffff92 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90436
	-> Start Jumping from 175c0 --> 16144
-> Executing 16144 : mov r3,#0x37c 
-> Executing 16148 : mov r2,#0x6f 
-> Executing 1614c : mov r0,#0x70 
-> Executing 16150 : strh r2,[r4,r3] 
-> Executing 16154 : str r5,[r4,#0x378] 
-> Executing 16158 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 1615c : ldr r1,[pc,#0xdc0] 
-> Executing 16160 : mov r2,#0x70 
-> Executing 16164 : mov r5,r0 
-> Executing 16168 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16168 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00006f #x00000000))) (not (= #xffffff92 #x00000000))) (= #x00000070 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff92 #x00000000))) (not (= #x00000070 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000070 #x00000000))) (not (= #xffffff91 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000070 #x00000000))) (not (not (= #xffffff91 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90476
	-> Start Jumping from 175c0 --> 1616c
-> Executing 1616c : mov r3,#0x384 
-> Executing 16170 : mov r2,#0x70 
-> Executing 16174 : mov r0,#0x71 
-> Executing 16178 : strh r2,[r4,r3] 
-> Executing 1617c : str r5,[r4,#0x380] 
-> Executing 16180 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16184 : ldr r1,[pc,#0xd9c] 
-> Executing 16188 : mov r2,#0x71 
-> Executing 1618c : mov r5,r0 
-> Executing 16190 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16190 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000070 #x00000000))) (not (= #xffffff91 #x00000000))) (= #x00000071 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff91 #x00000000))) (not (= #x00000071 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000071 #x00000000))) (not (= #xffffff90 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000071 #x00000000))) (not (not (= #xffffff90 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90516
	-> Start Jumping from 175c0 --> 16194
-> Executing 16194 : mov r3,#0x38c 
-> Executing 16198 : mov r2,#0x71 
-> Executing 1619c : mov r0,#0x72 
-> Executing 161a0 : strh r2,[r4,r3] 
-> Executing 161a4 : str r5,[r4,#0x388] 
-> Executing 161a8 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 161ac : ldr r1,[pc,#0xd78] 
-> Executing 161b0 : mov r2,#0x72 
-> Executing 161b4 : mov r5,r0 
-> Executing 161b8 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 161b8 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000071 #x00000000))) (not (= #xffffff90 #x00000000))) (= #x00000072 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff90 #x00000000))) (not (= #x00000072 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000072 #x00000000))) (not (= #xffffff8f #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000072 #x00000000))) (not (not (= #xffffff8f #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90556
	-> Start Jumping from 175c0 --> 161bc
-> Executing 161bc : mov r3,#0x394 
-> Executing 161c0 : mov r2,#0x72 
-> Executing 161c4 : mov r0,#0x73 
-> Executing 161c8 : strh r2,[r4,r3] 
-> Executing 161cc : str r5,[r4,#0x390] 
-> Executing 161d0 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 161d4 : ldr r1,[pc,#0xd54] 
-> Executing 161d8 : mov r2,#0x73 
-> Executing 161dc : mov r5,r0 
-> Executing 161e0 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 161e0 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000072 #x00000000))) (not (= #xffffff8f #x00000000))) (= #x00000073 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff8f #x00000000))) (not (= #x00000073 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000073 #x00000000))) (not (= #xffffff8e #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000073 #x00000000))) (not (not (= #xffffff8e #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90596
	-> Start Jumping from 175c0 --> 161e4
-> Executing 161e4 : mov r3,#0x39c 
-> Executing 161e8 : mov r2,#0x73 
-> Executing 161ec : mov r0,#0x74 
-> Executing 161f0 : strh r2,[r4,r3] 
-> Executing 161f4 : str r5,[r4,#0x398] 
-> Executing 161f8 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 161fc : ldr r1,[pc,#0xd30] 
-> Executing 16200 : mov r2,#0x74 
-> Executing 16204 : mov r5,r0 
-> Executing 16208 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16208 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000073 #x00000000))) (not (= #xffffff8e #x00000000))) (= #x00000074 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff8e #x00000000))) (not (= #x00000074 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000074 #x00000000))) (not (= #xffffff8d #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000074 #x00000000))) (not (not (= #xffffff8d #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90636
	-> Start Jumping from 175c0 --> 1620c
-> Executing 1620c : mov r3,#0x3a4 
-> Executing 16210 : mov r2,#0x74 
-> Executing 16214 : mov r0,#0x75 
-> Executing 16218 : strh r2,[r4,r3] 
-> Executing 1621c : str r5,[r4,#0x3a0] 
-> Executing 16220 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16224 : ldr r1,[pc,#0xd0c] 
-> Executing 16228 : mov r2,#0x75 
-> Executing 1622c : mov r5,r0 
-> Executing 16230 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16230 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000074 #x00000000))) (not (= #xffffff8d #x00000000))) (= #x00000075 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff8d #x00000000))) (not (= #x00000075 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000075 #x00000000))) (not (= #xffffff8c #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000075 #x00000000))) (not (not (= #xffffff8c #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90676
	-> Start Jumping from 175c0 --> 16234
-> Executing 16234 : mov r3,#0x3ac 
-> Executing 16238 : mov r2,#0x75 
-> Executing 1623c : mov r0,#0x76 
-> Executing 16240 : strh r2,[r4,r3] 
-> Executing 16244 : str r5,[r4,#0x3a8] 
-> Executing 16248 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 1624c : ldr r1,[pc,#0xce8] 
-> Executing 16250 : mov r2,#0x76 
-> Executing 16254 : mov r5,r0 
-> Executing 16258 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16258 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000075 #x00000000))) (not (= #xffffff8c #x00000000))) (= #x00000076 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff8c #x00000000))) (not (= #x00000076 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000076 #x00000000))) (not (= #xffffff8b #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000076 #x00000000))) (not (not (= #xffffff8b #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90716
	-> Start Jumping from 175c0 --> 1625c
-> Executing 1625c : mov r3,#0x3b4 
-> Executing 16260 : mov r2,#0x76 
-> Executing 16264 : mov r0,#0x77 
-> Executing 16268 : strh r2,[r4,r3] 
-> Executing 1626c : str r5,[r4,#0x3b0] 
-> Executing 16270 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16274 : ldr r1,[pc,#0xcc4] 
-> Executing 16278 : mov r2,#0x77 
-> Executing 1627c : mov r5,r0 
-> Executing 16280 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16280 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000076 #x00000000))) (not (= #xffffff8b #x00000000))) (= #x00000077 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff8b #x00000000))) (not (= #x00000077 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000077 #x00000000))) (not (= #xffffff8a #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000077 #x00000000))) (not (not (= #xffffff8a #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90756
	-> Start Jumping from 175c0 --> 16284
-> Executing 16284 : mov r3,#0x3bc 
-> Executing 16288 : mov r2,#0x77 
-> Executing 1628c : mov r0,#0x78 
-> Executing 16290 : strh r2,[r4,r3] 
-> Executing 16294 : str r5,[r4,#0x3b8] 
-> Executing 16298 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 1629c : ldr r1,[pc,#0xca0] 
-> Executing 162a0 : mov r2,#0x78 
-> Executing 162a4 : mov r5,r0 
-> Executing 162a8 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 162a8 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000077 #x00000000))) (not (= #xffffff8a #x00000000))) (= #x00000078 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff8a #x00000000))) (not (= #x00000078 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000078 #x00000000))) (not (= #xffffff89 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000078 #x00000000))) (not (not (= #xffffff89 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90796
	-> Start Jumping from 175c0 --> 162ac
-> Executing 162ac : mov r3,#0x3c4 
-> Executing 162b0 : mov r2,#0x78 
-> Executing 162b4 : mov r0,#0x79 
-> Executing 162b8 : strh r2,[r4,r3] 
-> Executing 162bc : str r5,[r4,#0x3c0] 
-> Executing 162c0 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 162c4 : ldr r1,[pc,#0xc7c] 
-> Executing 162c8 : mov r2,#0x79 
-> Executing 162cc : mov r5,r0 
-> Executing 162d0 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 162d0 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000078 #x00000000))) (not (= #xffffff89 #x00000000))) (= #x00000079 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff89 #x00000000))) (not (= #x00000079 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000079 #x00000000))) (not (= #xffffff88 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000079 #x00000000))) (not (not (= #xffffff88 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90836
	-> Start Jumping from 175c0 --> 162d4
-> Executing 162d4 : mov r3,#0x3cc 
-> Executing 162d8 : mov r2,#0x79 
-> Executing 162dc : mov r0,#0x7a 
-> Executing 162e0 : strh r2,[r4,r3] 
-> Executing 162e4 : str r5,[r4,#0x3c8] 
-> Executing 162e8 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 162ec : ldr r1,[pc,#0xc58] 
-> Executing 162f0 : mov r2,#0x7a 
-> Executing 162f4 : mov r5,r0 
-> Executing 162f8 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 162f8 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000079 #x00000000))) (not (= #xffffff88 #x00000000))) (= #x0000007a #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff88 #x00000000))) (not (= #x0000007a #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000007a #x00000000))) (not (= #xffffff87 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000007a #x00000000))) (not (not (= #xffffff87 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90876
	-> Start Jumping from 175c0 --> 162fc
-> Executing 162fc : mov r3,#0x3d4 
-> Executing 16300 : mov r2,#0x7a 
-> Executing 16304 : mov r0,#0x7b 
-> Executing 16308 : strh r2,[r4,r3] 
-> Executing 1630c : str r5,[r4,#0x3d0] 
-> Executing 16310 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16314 : ldr r1,[pc,#0xc34] 
-> Executing 16318 : mov r2,#0x7b 
-> Executing 1631c : mov r5,r0 
-> Executing 16320 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16320 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00007a #x00000000))) (not (= #xffffff87 #x00000000))) (= #x0000007b #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff87 #x00000000))) (not (= #x0000007b #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000007b #x00000000))) (not (= #xffffff86 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000007b #x00000000))) (not (not (= #xffffff86 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90916
	-> Start Jumping from 175c0 --> 16324
-> Executing 16324 : mov r3,#0x3dc 
-> Executing 16328 : mov r2,#0x7b 
-> Executing 1632c : mov r0,#0x7c 
-> Executing 16330 : strh r2,[r4,r3] 
-> Executing 16334 : str r5,[r4,#0x3d8] 
-> Executing 16338 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 1633c : ldr r1,[pc,#0xc10] 
-> Executing 16340 : mov r2,#0x7c 
-> Executing 16344 : mov r5,r0 
-> Executing 16348 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16348 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00007b #x00000000))) (not (= #xffffff86 #x00000000))) (= #x0000007c #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff86 #x00000000))) (not (= #x0000007c #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000007c #x00000000))) (not (= #xffffff85 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000007c #x00000000))) (not (not (= #xffffff85 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90956
	-> Start Jumping from 175c0 --> 1634c
-> Executing 1634c : mov r3,#0x3e4 
-> Executing 16350 : mov r2,#0x7c 
-> Executing 16354 : mov r0,#0x7d 
-> Executing 16358 : strh r2,[r4,r3] 
-> Executing 1635c : str r5,[r4,#0x3e0] 
-> Executing 16360 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16364 : ldr r1,[pc,#0xbec] 
-> Executing 16368 : mov r2,#0x7d 
-> Executing 1636c : mov r5,r0 
-> Executing 16370 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16370 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00007c #x00000000))) (not (= #xffffff85 #x00000000))) (= #x0000007d #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff85 #x00000000))) (not (= #x0000007d #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000007d #x00000000))) (not (= #xffffff84 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000007d #x00000000))) (not (not (= #xffffff84 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 90996
	-> Start Jumping from 175c0 --> 16374
-> Executing 16374 : mov r3,#0x3ec 
-> Executing 16378 : mov r2,#0x7d 
-> Executing 1637c : mov r0,#0x7e 
-> Executing 16380 : strh r2,[r4,r3] 
-> Executing 16384 : str r5,[r4,#0x3e8] 
-> Executing 16388 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 1638c : ldr r1,[pc,#0xbc8] 
-> Executing 16390 : mov r2,#0x7e 
-> Executing 16394 : mov r5,r0 
-> Executing 16398 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16398 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00007d #x00000000))) (not (= #xffffff84 #x00000000))) (= #x0000007e #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff84 #x00000000))) (not (= #x0000007e #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000007e #x00000000))) (not (= #xffffff83 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000007e #x00000000))) (not (not (= #xffffff83 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91036
	-> Start Jumping from 175c0 --> 1639c
-> Executing 1639c : mov r3,#0x3f4 
-> Executing 163a0 : mov r2,#0x7e 
-> Executing 163a4 : mov r0,#0x7f 
-> Executing 163a8 : strh r2,[r4,r3] 
-> Executing 163ac : str r5,[r4,#0x3f0] 
-> Executing 163b0 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 163b4 : ldr r1,[pc,#0xba4] 
-> Executing 163b8 : mov r2,#0x7f 
-> Executing 163bc : mov r5,r0 
-> Executing 163c0 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 163c0 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00007e #x00000000))) (not (= #xffffff83 #x00000000))) (= #x0000007f #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff83 #x00000000))) (not (= #x0000007f #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000007f #x00000000))) (not (= #xffffff82 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000007f #x00000000))) (not (not (= #xffffff82 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91076
	-> Start Jumping from 175c0 --> 163c4
-> Executing 163c4 : mov r3,#0x3fc 
-> Executing 163c8 : mov r2,#0x7f 
-> Executing 163cc : mov r0,#0x80 
-> Executing 163d0 : strh r2,[r4,r3] 
-> Executing 163d4 : str r5,[r4,#0x3f8] 
-> Executing 163d8 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 163dc : mov r5,#0x400 
-> Executing 163e0 : ldr r1,[pc,#0xb7c] 
-> Executing 163e4 : mov r2,#0x80 
-> Executing 163e8 : mov r6,r0 
-> Executing 163ec : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 163ec --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00007f #x00000000))) (not (= #xffffff82 #x00000000))) (= #x00000080 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff82 #x00000000))) (not (= #x00000080 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000080 #x00000000))) (not (= #xffffff81 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000080 #x00000000))) (not (not (= #xffffff81 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91120
	-> Start Jumping from 175c0 --> 163f0
-> Executing 163f0 : add r3,r5,#4 
-> Executing 163f4 : mov r2,#0x80 
-> Executing 163f8 : mov r0,#0x81 
-> Executing 163fc : strh r2,[r4,r3] 
-> Executing 16400 : str r6,[r4,#0x400] 
-> Executing 16404 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16408 : ldr r1,[pc,#0xb58] 
-> Executing 1640c : mov r2,#0x81 
-> Executing 16410 : mov r6,r0 
-> Executing 16414 : add r5,r5,#0xc 
-> Executing 16418 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16418 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000080 #x00000000))) (not (= #xffffff81 #x00000000))) (= #x00000081 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff81 #x00000000))) (not (= #x00000081 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000081 #x00000000))) (not (= #xffffff80 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000081 #x00000000))) (not (not (= #xffffff80 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91164
	-> Start Jumping from 175c0 --> 1641c
-> Executing 1641c : mov r3,#0x81 
-> Executing 16420 : mov r0,#0x82 
-> Executing 16424 : strh r3,[r4,r5] 
-> Executing 16428 : str r6,[r4,#0x408] 
-> Executing 1642c : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16430 : mov r6,#0x410 
-> Executing 16434 : ldr r1,[pc,#0xb30] 
-> Executing 16438 : mov r2,#0x82 
-> Executing 1643c : mov r5,r0 
-> Executing 16440 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16440 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000081 #x00000000))) (not (= #xffffff80 #x00000000))) (= #x00000082 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff80 #x00000000))) (not (= #x00000082 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000082 #x00000000))) (not (= #xffffff7f #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000082 #x00000000))) (not (not (= #xffffff7f #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91204
	-> Start Jumping from 175c0 --> 16444
-> Executing 16444 : add r3,r6,#4 
-> Executing 16448 : mov r2,#0x82 
-> Executing 1644c : mov r0,#0x83 
-> Executing 16450 : strh r2,[r4,r3] 
-> Executing 16454 : str r5,[r4,#0x410] 
-> Executing 16458 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 1645c : ldr r1,[pc,#0xb0c] 
-> Executing 16460 : mov r2,#0x83 
-> Executing 16464 : mov r5,r0 
-> Executing 16468 : add r6,r6,#0xc 
-> Executing 1646c : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 1646c --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000082 #x00000000))) (not (= #xffffff7f #x00000000))) (= #x00000083 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff7f #x00000000))) (not (= #x00000083 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000083 #x00000000))) (not (= #xffffff7e #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000083 #x00000000))) (not (not (= #xffffff7e #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91248
	-> Start Jumping from 175c0 --> 16470
-> Executing 16470 : mov r3,#0x83 
-> Executing 16474 : mov r0,#0x84 
-> Executing 16478 : strh r3,[r4,r6] 
-> Executing 1647c : str r5,[r4,#0x418] 
-> Executing 16480 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16484 : mov r5,#0x420 
-> Executing 16488 : ldr r1,[pc,#0xae4] 
-> Executing 1648c : mov r2,#0x84 
-> Executing 16490 : mov r6,r0 
-> Executing 16494 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16494 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000083 #x00000000))) (not (= #xffffff7e #x00000000))) (= #x00000084 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff7e #x00000000))) (not (= #x00000084 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000084 #x00000000))) (not (= #xffffff7d #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000084 #x00000000))) (not (not (= #xffffff7d #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91288
	-> Start Jumping from 175c0 --> 16498
-> Executing 16498 : add r3,r5,#4 
-> Executing 1649c : mov r2,#0x84 
-> Executing 164a0 : mov r0,#0x85 
-> Executing 164a4 : strh r2,[r4,r3] 
-> Executing 164a8 : str r6,[r4,#0x420] 
-> Executing 164ac : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 164b0 : ldr r1,[pc,#0xac0] 
-> Executing 164b4 : mov r2,#0x85 
-> Executing 164b8 : mov r6,r0 
-> Executing 164bc : add r5,r5,#0xc 
-> Executing 164c0 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 164c0 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000084 #x00000000))) (not (= #xffffff7d #x00000000))) (= #x00000085 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff7d #x00000000))) (not (= #x00000085 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000085 #x00000000))) (not (= #xffffff7c #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000085 #x00000000))) (not (not (= #xffffff7c #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91332
	-> Start Jumping from 175c0 --> 164c4
-> Executing 164c4 : mov r3,#0x85 
-> Executing 164c8 : mov r0,#0x86 
-> Executing 164cc : strh r3,[r4,r5] 
-> Executing 164d0 : str r6,[r4,#0x428] 
-> Executing 164d4 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 164d8 : mov r6,#0x430 
-> Executing 164dc : ldr r1,[pc,#0xa98] 
-> Executing 164e0 : mov r2,#0x86 
-> Executing 164e4 : mov r5,r0 
-> Executing 164e8 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 164e8 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000085 #x00000000))) (not (= #xffffff7c #x00000000))) (= #x00000086 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff7c #x00000000))) (not (= #x00000086 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000086 #x00000000))) (not (= #xffffff7b #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000086 #x00000000))) (not (not (= #xffffff7b #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91372
	-> Start Jumping from 175c0 --> 164ec
-> Executing 164ec : add r3,r6,#4 
-> Executing 164f0 : mov r2,#0x86 
-> Executing 164f4 : mov r0,#0x87 
-> Executing 164f8 : strh r2,[r4,r3] 
-> Executing 164fc : str r5,[r4,#0x430] 
-> Executing 16500 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16504 : ldr r1,[pc,#0xa74] 
-> Executing 16508 : mov r2,#0x87 
-> Executing 1650c : mov r5,r0 
-> Executing 16510 : add r6,r6,#0xc 
-> Executing 16514 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16514 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000086 #x00000000))) (not (= #xffffff7b #x00000000))) (= #x00000087 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff7b #x00000000))) (not (= #x00000087 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000087 #x00000000))) (not (= #xffffff7a #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000087 #x00000000))) (not (not (= #xffffff7a #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91416
	-> Start Jumping from 175c0 --> 16518
-> Executing 16518 : mov r3,#0x87 
-> Executing 1651c : mov r0,#0x88 
-> Executing 16520 : strh r3,[r4,r6] 
-> Executing 16524 : str r5,[r4,#0x438] 
-> Executing 16528 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 1652c : mov r5,#0x440 
-> Executing 16530 : ldr r1,[pc,#0xa4c] 
-> Executing 16534 : mov r2,#0x88 
-> Executing 16538 : mov r6,r0 
-> Executing 1653c : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 1653c --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000087 #x00000000))) (not (= #xffffff7a #x00000000))) (= #x00000088 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff7a #x00000000))) (not (= #x00000088 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000088 #x00000000))) (not (= #xffffff79 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000088 #x00000000))) (not (not (= #xffffff79 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91456
	-> Start Jumping from 175c0 --> 16540
-> Executing 16540 : add r3,r5,#4 
-> Executing 16544 : mov r2,#0x88 
-> Executing 16548 : mov r0,#0x89 
-> Executing 1654c : strh r2,[r4,r3] 
-> Executing 16550 : str r6,[r4,#0x440] 
-> Executing 16554 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16558 : ldr r1,[pc,#0xa28] 
-> Executing 1655c : mov r2,#0x89 
-> Executing 16560 : mov r6,r0 
-> Executing 16564 : add r5,r5,#0xc 
-> Executing 16568 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16568 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000088 #x00000000))) (not (= #xffffff79 #x00000000))) (= #x00000089 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff79 #x00000000))) (not (= #x00000089 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000089 #x00000000))) (not (= #xffffff78 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000089 #x00000000))) (not (not (= #xffffff78 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91500
	-> Start Jumping from 175c0 --> 1656c
-> Executing 1656c : mov r3,#0x89 
-> Executing 16570 : mov r0,#0x8a 
-> Executing 16574 : strh r3,[r4,r5] 
-> Executing 16578 : str r6,[r4,#0x448] 
-> Executing 1657c : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16580 : mov r6,#0x450 
-> Executing 16584 : ldr r1,[pc,#0xa00] 
-> Executing 16588 : mov r2,#0x8a 
-> Executing 1658c : mov r5,r0 
-> Executing 16590 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16590 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000089 #x00000000))) (not (= #xffffff78 #x00000000))) (= #x0000008a #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff78 #x00000000))) (not (= #x0000008a #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000008a #x00000000))) (not (= #xffffff77 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000008a #x00000000))) (not (not (= #xffffff77 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91540
	-> Start Jumping from 175c0 --> 16594
-> Executing 16594 : add r3,r6,#4 
-> Executing 16598 : mov r2,#0x8a 
-> Executing 1659c : mov r0,#0x8b 
-> Executing 165a0 : strh r2,[r4,r3] 
-> Executing 165a4 : str r5,[r4,#0x450] 
-> Executing 165a8 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 165ac : ldr r1,[pc,#0x9dc] 
-> Executing 165b0 : mov r2,#0x8b 
-> Executing 165b4 : mov r5,r0 
-> Executing 165b8 : add r6,r6,#0xc 
-> Executing 165bc : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 165bc --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00008a #x00000000))) (not (= #xffffff77 #x00000000))) (= #x0000008b #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff77 #x00000000))) (not (= #x0000008b #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000008b #x00000000))) (not (= #xffffff76 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000008b #x00000000))) (not (not (= #xffffff76 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91584
	-> Start Jumping from 175c0 --> 165c0
-> Executing 165c0 : mov r3,#0x8b 
-> Executing 165c4 : mov r0,#0x8c 
-> Executing 165c8 : strh r3,[r4,r6] 
-> Executing 165cc : str r5,[r4,#0x458] 
-> Executing 165d0 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 165d4 : mov r5,#0x460 
-> Executing 165d8 : ldr r1,[pc,#0x9b4] 
-> Executing 165dc : mov r2,#0x8c 
-> Executing 165e0 : mov r6,r0 
-> Executing 165e4 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 165e4 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00008b #x00000000))) (not (= #xffffff76 #x00000000))) (= #x0000008c #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff76 #x00000000))) (not (= #x0000008c #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000008c #x00000000))) (not (= #xffffff75 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000008c #x00000000))) (not (not (= #xffffff75 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91624
	-> Start Jumping from 175c0 --> 165e8
-> Executing 165e8 : add r3,r5,#4 
-> Executing 165ec : mov r2,#0x8c 
-> Executing 165f0 : mov r0,#0x8d 
-> Executing 165f4 : strh r2,[r4,r3] 
-> Executing 165f8 : str r6,[r4,#0x460] 
-> Executing 165fc : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16600 : ldr r1,[pc,#0x990] 
-> Executing 16604 : mov r2,#0x8d 
-> Executing 16608 : mov r6,r0 
-> Executing 1660c : add r5,r5,#0xc 
-> Executing 16610 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16610 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00008c #x00000000))) (not (= #xffffff75 #x00000000))) (= #x0000008d #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff75 #x00000000))) (not (= #x0000008d #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000008d #x00000000))) (not (= #xffffff74 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000008d #x00000000))) (not (not (= #xffffff74 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91668
	-> Start Jumping from 175c0 --> 16614
-> Executing 16614 : mov r3,#0x8d 
-> Executing 16618 : mov r0,#0x8e 
-> Executing 1661c : strh r3,[r4,r5] 
-> Executing 16620 : str r6,[r4,#0x468] 
-> Executing 16624 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16628 : mov r6,#0x470 
-> Executing 1662c : ldr r1,[pc,#0x968] 
-> Executing 16630 : mov r2,#0x8e 
-> Executing 16634 : mov r5,r0 
-> Executing 16638 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16638 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00008d #x00000000))) (not (= #xffffff74 #x00000000))) (= #x0000008e #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff74 #x00000000))) (not (= #x0000008e #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000008e #x00000000))) (not (= #xffffff73 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000008e #x00000000))) (not (not (= #xffffff73 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91708
	-> Start Jumping from 175c0 --> 1663c
-> Executing 1663c : add r3,r6,#4 
-> Executing 16640 : mov r2,#0x8e 
-> Executing 16644 : mov r0,#0x8f 
-> Executing 16648 : strh r2,[r4,r3] 
-> Executing 1664c : str r5,[r4,#0x470] 
-> Executing 16650 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16654 : ldr r1,[pc,#0x944] 
-> Executing 16658 : mov r2,#0x8f 
-> Executing 1665c : mov r5,r0 
-> Executing 16660 : add r6,r6,#0xc 
-> Executing 16664 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16664 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00008e #x00000000))) (not (= #xffffff73 #x00000000))) (= #x0000008f #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff73 #x00000000))) (not (= #x0000008f #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000008f #x00000000))) (not (= #xffffff72 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000008f #x00000000))) (not (not (= #xffffff72 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91752
	-> Start Jumping from 175c0 --> 16668
-> Executing 16668 : mov r3,#0x8f 
-> Executing 1666c : mov r0,#0x90 
-> Executing 16670 : strh r3,[r4,r6] 
-> Executing 16674 : str r5,[r4,#0x478] 
-> Executing 16678 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 1667c : mov r5,#0x480 
-> Executing 16680 : ldr r1,[pc,#0x91c] 
-> Executing 16684 : mov r2,#0x90 
-> Executing 16688 : mov r6,r0 
-> Executing 1668c : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 1668c --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00008f #x00000000))) (not (= #xffffff72 #x00000000))) (= #x00000090 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff72 #x00000000))) (not (= #x00000090 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000090 #x00000000))) (not (= #xffffff71 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000090 #x00000000))) (not (not (= #xffffff71 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91792
	-> Start Jumping from 175c0 --> 16690
-> Executing 16690 : add r3,r5,#4 
-> Executing 16694 : mov r2,#0x90 
-> Executing 16698 : mov r0,#0x91 
-> Executing 1669c : strh r2,[r4,r3] 
-> Executing 166a0 : str r6,[r4,#0x480] 
-> Executing 166a4 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 166a8 : ldr r1,[pc,#0x8f8] 
-> Executing 166ac : mov r2,#0x91 
-> Executing 166b0 : mov r6,r0 
-> Executing 166b4 : add r5,r5,#0xc 
-> Executing 166b8 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 166b8 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000090 #x00000000))) (not (= #xffffff71 #x00000000))) (= #x00000091 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff71 #x00000000))) (not (= #x00000091 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000091 #x00000000))) (not (= #xffffff70 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000091 #x00000000))) (not (not (= #xffffff70 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91836
	-> Start Jumping from 175c0 --> 166bc
-> Executing 166bc : mov r3,#0x91 
-> Executing 166c0 : mov r0,#0x92 
-> Executing 166c4 : strh r3,[r4,r5] 
-> Executing 166c8 : str r6,[r4,#0x488] 
-> Executing 166cc : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 166d0 : mov r6,#0x490 
-> Executing 166d4 : ldr r1,[pc,#0x8d0] 
-> Executing 166d8 : mov r2,#0x92 
-> Executing 166dc : mov r5,r0 
-> Executing 166e0 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 166e0 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000091 #x00000000))) (not (= #xffffff70 #x00000000))) (= #x00000092 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff70 #x00000000))) (not (= #x00000092 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000092 #x00000000))) (not (= #xffffff6f #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000092 #x00000000))) (not (not (= #xffffff6f #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91876
	-> Start Jumping from 175c0 --> 166e4
-> Executing 166e4 : add r3,r6,#4 
-> Executing 166e8 : mov r2,#0x92 
-> Executing 166ec : mov r0,#0x93 
-> Executing 166f0 : strh r2,[r4,r3] 
-> Executing 166f4 : str r5,[r4,#0x490] 
-> Executing 166f8 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 166fc : ldr r1,[pc,#0x8ac] 
-> Executing 16700 : mov r2,#0x93 
-> Executing 16704 : mov r5,r0 
-> Executing 16708 : add r6,r6,#0xc 
-> Executing 1670c : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 1670c --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000092 #x00000000))) (not (= #xffffff6f #x00000000))) (= #x00000093 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff6f #x00000000))) (not (= #x00000093 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000093 #x00000000))) (not (= #xffffff6e #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000093 #x00000000))) (not (not (= #xffffff6e #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91920
	-> Start Jumping from 175c0 --> 16710
-> Executing 16710 : mov r3,#0x93 
-> Executing 16714 : mov r0,#0x94 
-> Executing 16718 : strh r3,[r4,r6] 
-> Executing 1671c : str r5,[r4,#0x498] 
-> Executing 16720 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16724 : mov r5,#0x4a0 
-> Executing 16728 : ldr r1,[pc,#0x884] 
-> Executing 1672c : mov r2,#0x94 
-> Executing 16730 : mov r6,r0 
-> Executing 16734 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16734 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000093 #x00000000))) (not (= #xffffff6e #x00000000))) (= #x00000094 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff6e #x00000000))) (not (= #x00000094 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000094 #x00000000))) (not (= #xffffff6d #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000094 #x00000000))) (not (not (= #xffffff6d #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 91960
	-> Start Jumping from 175c0 --> 16738
-> Executing 16738 : add r3,r5,#4 
-> Executing 1673c : mov r2,#0x94 
-> Executing 16740 : mov r0,#0x95 
-> Executing 16744 : strh r2,[r4,r3] 
-> Executing 16748 : str r6,[r4,#0x4a0] 
-> Executing 1674c : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16750 : ldr r1,[pc,#0x860] 
-> Executing 16754 : mov r2,#0x95 
-> Executing 16758 : mov r6,r0 
-> Executing 1675c : add r5,r5,#0xc 
-> Executing 16760 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16760 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000094 #x00000000))) (not (= #xffffff6d #x00000000))) (= #x00000095 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff6d #x00000000))) (not (= #x00000095 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000095 #x00000000))) (not (= #xffffff6c #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000095 #x00000000))) (not (not (= #xffffff6c #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92004
	-> Start Jumping from 175c0 --> 16764
-> Executing 16764 : mov r3,#0x95 
-> Executing 16768 : mov r0,#0x96 
-> Executing 1676c : strh r3,[r4,r5] 
-> Executing 16770 : str r6,[r4,#0x4a8] 
-> Executing 16774 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16778 : mov r6,#0x4b0 
-> Executing 1677c : ldr r1,[pc,#0x838] 
-> Executing 16780 : mov r2,#0x96 
-> Executing 16784 : mov r5,r0 
-> Executing 16788 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16788 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000095 #x00000000))) (not (= #xffffff6c #x00000000))) (= #x00000096 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff6c #x00000000))) (not (= #x00000096 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000096 #x00000000))) (not (= #xffffff6b #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000096 #x00000000))) (not (not (= #xffffff6b #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92044
	-> Start Jumping from 175c0 --> 1678c
-> Executing 1678c : add r3,r6,#4 
-> Executing 16790 : mov r2,#0x96 
-> Executing 16794 : mov r0,#0x97 
-> Executing 16798 : strh r2,[r4,r3] 
-> Executing 1679c : str r5,[r4,#0x4b0] 
-> Executing 167a0 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 167a4 : ldr r1,[pc,#0x814] 
-> Executing 167a8 : mov r2,#0x97 
-> Executing 167ac : mov r5,r0 
-> Executing 167b0 : add r6,r6,#0xc 
-> Executing 167b4 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 167b4 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000096 #x00000000))) (not (= #xffffff6b #x00000000))) (= #x00000097 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff6b #x00000000))) (not (= #x00000097 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000097 #x00000000))) (not (= #xffffff6a #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000097 #x00000000))) (not (not (= #xffffff6a #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92088
	-> Start Jumping from 175c0 --> 167b8
-> Executing 167b8 : mov r3,#0x97 
-> Executing 167bc : mov r0,#0x98 
-> Executing 167c0 : strh r3,[r4,r6] 
-> Executing 167c4 : str r5,[r4,#0x4b8] 
-> Executing 167c8 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 167cc : ldr r1,[pc,#0x7f0] 
-> Executing 167d0 : mov r2,#0x98 
-> Executing 167d4 : mov r5,r0 
-> Executing 167d8 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 167d8 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000097 #x00000000))) (not (= #xffffff6a #x00000000))) (= #x00000098 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff6a #x00000000))) (not (= #x00000098 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000098 #x00000000))) (not (= #xffffff69 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000098 #x00000000))) (not (not (= #xffffff69 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92124
	-> Start Jumping from 175c0 --> 167dc
-> Executing 167dc : add r3,r4,#0x4c0 
-> Executing 167e0 : mov r2,#0x98 
-> Executing 167e4 : strh r2,[r3,#4] 
-> Executing 167e8 : mov r0,#0xa 
-> Executing 167ec : str r5,[r4,#0x4c0] 
-> Executing 167f0 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 167f4 : ldr r1,[pc,#0x7cc] 
-> Executing 167f8 : mov r2,#0xa 
-> Executing 167fc : mov fp,#0xa 
-> Executing 16800 : mov r5,r0 
-> Executing 16804 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16804 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000098 #x00000000))) (not (= #xffffff69 #x00000000))) (= #x0000000a #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff69 #x00000000))) (not (= #x0000000a #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000000a #x00000000))) (not (= #xfffffff7 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000000a #x00000000))) (not (not (= #xfffffff7 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92168
	-> Start Jumping from 175c0 --> 16808
-> Executing 16808 : mov r0,r7 
-> Executing 1680c : str r5,[r4,#0x60] 
-> Executing 16810 : strh fp,[r4,#0x64] 
-> Executing 16814 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16818 : mov r2,r7 
-> Executing 1681c : ldr r1,[pc,#0x7a8] 
-> Executing 16820 : mov r5,r0 
-> Executing 16824 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16824 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00000a #x00000000))) (not (= #xfffffff7 #x00000000))) (= #x0000000b #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff7 #x00000000))) (not (= #x0000000b #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000000b #x00000000))) (not (= #xfffffff6 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000000b #x00000000))) (not (not (= #xfffffff6 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92200
	-> Start Jumping from 175c0 --> 16828
-> Executing 16828 : mov r3,#0xb 
-> Executing 1682c : mov r0,#0xf 
-> Executing 16830 : strh r3,[r4,#0x6c] 
-> Executing 16834 : str r5,[r4,#0x68] 
-> Executing 16838 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 1683c : ldr r1,[pc,#0x78c] 
-> Executing 16840 : mov r2,#0xf 
-> Executing 16844 : add r7,r7,#4 
-> Executing 16848 : mov r5,r0 
-> Executing 1684c : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 1684c --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  (= #x0000000f #x00000000)UNSAT
	-> Checking path constrains by Z3 ...  (not (= #x0000000f #x00000000))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...  (and (not (= #x0000000f #x00000000)) (not (= #xfffffff2 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  (and (not (= #x0000000f #x00000000)) (not (not (= #xfffffff2 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92240
	-> Start Jumping from 175c0 --> 16850
-> Executing 16850 : mov r0,#0x10 
-> Executing 16854 : str r5,[r4,#0x70] 
-> Executing 16858 : strh r7,[r4,#0x74] 
-> Executing 1685c : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16860 : ldr r1,[pc,#0x76c] 
-> Executing 16864 : mov r2,#0x10 
-> Executing 16868 : mov sb,#0x10 
-> Executing 1686c : mov r5,r0 
-> Executing 16870 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16870 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000000f #x00000000)) (not (= #xfffffff2 #x00000000))) (= #x00000010 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  f #x00000000)) (not (= #xfffffff2 #x00000000))) (not (= #x00000010 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000010 #x00000000))) (not (= #xfffffff1 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000010 #x00000000))) (not (not (= #xfffffff1 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92276
	-> Start Jumping from 175c0 --> 16874
-> Executing 16874 : mov r0,#0xe 
-> Executing 16878 : str r5,[r4,#0x78] 
-> Executing 1687c : strh sb,[r4,#0x7c] 
-> Executing 16880 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16884 : ldr r1,[pc,#0x74c] 
-> Executing 16888 : mov r2,#0xe 
-> Executing 1688c : mov r6,#0xe 
-> Executing 16890 : mov r5,r0 
-> Executing 16894 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16894 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000010 #x00000000))) (not (= #xfffffff1 #x00000000))) (= #x0000000e #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff1 #x00000000))) (not (= #x0000000e #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000000e #x00000000))) (not (= #xfffffff3 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000000e #x00000000))) (not (not (= #xfffffff3 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92312
	-> Start Jumping from 175c0 --> 16898
-> Executing 16898 : mov r0,#0xb 
-> Executing 1689c : str r5,[r4,#0x80] 
-> Executing 168a0 : strh r6,[r4,#0x84] 
-> Executing 168a4 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 168a8 : ldr r1,[pc,#0x72c] 
-> Executing 168ac : mov r2,#0xb 
-> Executing 168b0 : mov r5,r0 
-> Executing 168b4 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 168b4 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00000e #x00000000))) (not (= #xfffffff3 #x00000000))) (= #x0000000b #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff3 #x00000000))) (not (= #x0000000b #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000000b #x00000000))) (not (= #xfffffff6 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000000b #x00000000))) (not (not (= #xfffffff6 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92344
	-> Start Jumping from 175c0 --> 168b8
-> Executing 168b8 : mov r2,#0xb 
-> Executing 168bc : mov r0,r8 
-> Executing 168c0 : str r5,[r4,#0x88] 
-> Executing 168c4 : strh r2,[r4,#0x8c] 
-> Executing 168c8 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 168cc : mov r2,r8 
-> Executing 168d0 : ldr r1,[pc,#0x708] 
-> Executing 168d4 : mov r5,r0 
-> Executing 168d8 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 168d8 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00000b #x00000000))) (not (= #xfffffff6 #x00000000))) (= #x00000005 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff6 #x00000000))) (not (= #x00000005 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000005 #x00000000))) (not (= #xfffffffc #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000005 #x00000000))) (not (not (= #xfffffffc #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92380
	-> Start Jumping from 175c0 --> 168dc
-> Executing 168dc : mov r0,r8 
-> Executing 168e0 : str r5,[r4,#0x90] 
-> Executing 168e4 : strh r8,[r4,#0x94] 
-> Executing 168e8 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 168ec : mov r2,r8 
-> Executing 168f0 : ldr r1,[pc,#0x6ec] 
-> Executing 168f4 : mov r5,r0 
-> Executing 168f8 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 168f8 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000005 #x00000000))) (not (= #xfffffffc #x00000000))) (= #x00000005 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffffc #x00000000))) (not (= #x00000005 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000005 #x00000000))) (not (= #xfffffffc #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000005 #x00000000))) (not (not (= #xfffffffc #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92412
	-> Start Jumping from 175c0 --> 168fc
-> Executing 168fc : mov r0,sb 
-> Executing 16900 : str r5,[r4,#0x98] 
-> Executing 16904 : strh r8,[r4,#0x9c] 
-> Executing 16908 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 1690c : ldr r1,[pc,#0x6d4] 
-> Executing 16910 : mov r2,sb 
-> Executing 16914 : mov r5,r0 
-> Executing 16918 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16918 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000005 #x00000000))) (not (= #xfffffffc #x00000000))) (= #x00000010 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffffc #x00000000))) (not (= #x00000010 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000010 #x00000000))) (not (= #xfffffff1 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000010 #x00000000))) (not (not (= #xfffffff1 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92444
	-> Start Jumping from 175c0 --> 1691c
-> Executing 1691c : mov r0,r6 
-> Executing 16920 : str r5,[r4,#0xb0] 
-> Executing 16924 : strh sb,[r4,#0xb4] 
-> Executing 16928 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 1692c : mov r2,r6 
-> Executing 16930 : ldr r1,[pc,#0x6b4] 
-> Executing 16934 : mov r5,r0 
-> Executing 16938 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16938 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000010 #x00000000))) (not (= #xfffffff1 #x00000000))) (= #x0000000e #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff1 #x00000000))) (not (= #x0000000e #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000000e #x00000000))) (not (= #xfffffff3 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000000e #x00000000))) (not (not (= #xfffffff3 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92476
	-> Start Jumping from 175c0 --> 1693c
-> Executing 1693c : mov r0,#9 
-> Executing 16940 : str r5,[r4,#0xb8] 
-> Executing 16944 : strh r6,[r4,#0xbc] 
-> Executing 16948 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 1694c : ldr r1,[pc,#0x69c] 
-> Executing 16950 : mov r2,#9 
-> Executing 16954 : mov sl,#9 
-> Executing 16958 : mov r5,r0 
-> Executing 1695c : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 1695c --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00000e #x00000000))) (not (= #xfffffff3 #x00000000))) (= #x00000009 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff3 #x00000000))) (not (= #x00000009 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000009 #x00000000))) (not (= #xfffffff8 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000009 #x00000000))) (not (not (= #xfffffff8 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92512
	-> Start Jumping from 175c0 --> 16960
-> Executing 16960 : mov r0,#0x13 
-> Executing 16964 : str r5,[r4,#0xc0] 
-> Executing 16968 : strh sl,[r4,#0xc4] 
-> Executing 1696c : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16970 : ldr r1,[pc,#0x67c] 
-> Executing 16974 : mov r2,#0x13 
-> Executing 16978 : mov r5,r0 
-> Executing 1697c : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 1697c --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000009 #x00000000))) (not (= #xfffffff8 #x00000000))) (= #x00000013 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff8 #x00000000))) (not (= #x00000013 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000013 #x00000000))) (not (= #xffffffee #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000013 #x00000000))) (not (not (= #xffffffee #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92544
	-> Start Jumping from 175c0 --> 16980
-> Executing 16980 : mov r3,#0x13 
-> Executing 16984 : mov r0,#0x17 
-> Executing 16988 : strh r3,[r4,#0xcc] 
-> Executing 1698c : str r5,[r4,#0xc8] 
-> Executing 16990 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16994 : ldr r1,[pc,#0x65c] 
-> Executing 16998 : mov r2,#0x17 
-> Executing 1699c : mov r5,r0 
-> Executing 169a0 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 169a0 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000013 #x00000000))) (not (= #xffffffee #x00000000))) (= #x00000017 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffee #x00000000))) (not (= #x00000017 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000017 #x00000000))) (not (= #xffffffea #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000017 #x00000000))) (not (not (= #xffffffea #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92580
	-> Start Jumping from 175c0 --> 169a4
-> Executing 169a4 : mov r2,#0x17 
-> Executing 169a8 : mov r0,r6 
-> Executing 169ac : str r5,[r4,#0xd0] 
-> Executing 169b0 : strh r2,[r4,#0xd4] 
-> Executing 169b4 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 169b8 : mov r2,r6 
-> Executing 169bc : ldr r1,[pc,#0x714] 
-> Executing 169c0 : mov r5,r0 
-> Executing 169c4 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 169c4 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000017 #x00000000))) (not (= #xffffffea #x00000000))) (= #x0000000e #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffea #x00000000))) (not (= #x0000000e #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000000e #x00000000))) (not (= #xfffffff3 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000000e #x00000000))) (not (not (= #xfffffff3 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92616
	-> Start Jumping from 175c0 --> 169c8
-> Executing 169c8 : mov r0,#0x13 
-> Executing 169cc : str r5,[r4,#0xd8] 
-> Executing 169d0 : strh r6,[r4,#0xdc] 
-> Executing 169d4 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 169d8 : ldr r1,[pc,#0x6fc] 
-> Executing 169dc : mov r2,#0x13 
-> Executing 169e0 : mov r5,r0 
-> Executing 169e4 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 169e4 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00000e #x00000000))) (not (= #xfffffff3 #x00000000))) (= #x00000013 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff3 #x00000000))) (not (= #x00000013 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000013 #x00000000))) (not (= #xffffffee #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000013 #x00000000))) (not (not (= #xffffffee #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92648
	-> Start Jumping from 175c0 --> 169e8
-> Executing 169e8 : mov r3,#0x13 
-> Executing 169ec : mov r0,#0x17 
-> Executing 169f0 : strh r3,[r4,#0xe4] 
-> Executing 169f4 : str r5,[r4,#0xe0] 
-> Executing 169f8 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 169fc : ldr r1,[pc,#0x5f8] 
-> Executing 16a00 : mov r2,#0x17 
-> Executing 16a04 : mov r5,r0 
-> Executing 16a08 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16a08 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000013 #x00000000))) (not (= #xffffffee #x00000000))) (= #x00000017 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffee #x00000000))) (not (= #x00000017 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000017 #x00000000))) (not (= #xffffffea #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000017 #x00000000))) (not (not (= #xffffffea #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92684
	-> Start Jumping from 175c0 --> 16a0c
-> Executing 16a0c : mov r2,#0x17 
-> Executing 16a10 : mov r0,r7 
-> Executing 16a14 : str r5,[r4,#0xe8] 
-> Executing 16a18 : strh r2,[r4,#0xec] 
-> Executing 16a1c : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16a20 : mov r2,r7 
-> Executing 16a24 : ldr r1,[pc,#0x5d4] 
-> Executing 16a28 : mov r5,r0 
-> Executing 16a2c : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16a2c --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000017 #x00000000))) (not (= #xffffffea #x00000000))) (= #x0000000f #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffea #x00000000))) (not (= #x0000000f #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000000f #x00000000))) (not (= #xfffffff2 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000000f #x00000000))) (not (not (= #xfffffff2 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92720
	-> Start Jumping from 175c0 --> 16a30
-> Executing 16a30 : mov r0,#8 
-> Executing 16a34 : str r5,[r4,#0xf0] 
-> Executing 16a38 : strh r7,[r4,#0xf4] 
-> Executing 16a3c : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16a40 : ldr r1,[pc,#0x5bc] 
-> Executing 16a44 : mov r2,#8 
-> Executing 16a48 : mov r5,r0 
-> Executing 16a4c : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16a4c --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00000f #x00000000))) (not (= #xfffffff2 #x00000000))) (= #x00000008 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff2 #x00000000))) (not (= #x00000008 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000008 #x00000000))) (not (= #xfffffff9 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000008 #x00000000))) (not (not (= #xfffffff9 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92752
	-> Start Jumping from 175c0 --> 16a50
-> Executing 16a50 : mov r3,#8 
-> Executing 16a54 : mov r0,#0xb 
-> Executing 16a58 : strh r3,[r4,#0xfc] 
-> Executing 16a5c : str r5,[r4,#0xf8] 
-> Executing 16a60 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16a64 : ldr r1,[pc,#0x59c] 
-> Executing 16a68 : mov r2,#0xb 
-> Executing 16a6c : mov r5,r0 
-> Executing 16a70 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16a70 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000008 #x00000000))) (not (= #xfffffff9 #x00000000))) (= #x0000000b #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff9 #x00000000))) (not (= #x0000000b #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000000b #x00000000))) (not (= #xfffffff6 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000000b #x00000000))) (not (not (= #xfffffff6 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92788
	-> Start Jumping from 175c0 --> 16a74
-> Executing 16a74 : mov r3,#0x104 
-> Executing 16a78 : mov r2,#0xb 
-> Executing 16a7c : mov r0,sl 
-> Executing 16a80 : strh r2,[r4,r3] 
-> Executing 16a84 : str r5,[r4,#0x100] 
-> Executing 16a88 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16a8c : ldr r1,[pc,#0x578] 
-> Executing 16a90 : mov r2,sl 
-> Executing 16a94 : mov r5,r0 
-> Executing 16a98 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16a98 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00000b #x00000000))) (not (= #xfffffff6 #x00000000))) (= #x00000009 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff6 #x00000000))) (not (= #x00000009 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000009 #x00000000))) (not (= #xfffffff8 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000009 #x00000000))) (not (not (= #xfffffff8 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92828
	-> Start Jumping from 175c0 --> 16a9c
-> Executing 16a9c : mov r3,#0x10c 
-> Executing 16aa0 : mov r0,#6 
-> Executing 16aa4 : strh sl,[r4,r3] 
-> Executing 16aa8 : str r5,[r4,#0x108] 
-> Executing 16aac : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16ab0 : ldr r1,[pc,#0x558] 
-> Executing 16ab4 : mov r2,#6 
-> Executing 16ab8 : sub r6,r6,#8 
-> Executing 16abc : mov r5,r0 
-> Executing 16ac0 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16ac0 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000009 #x00000000))) (not (= #xfffffff8 #x00000000))) (= #x00000006 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff8 #x00000000))) (not (= #x00000006 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000006 #x00000000))) (not (= #xfffffffb #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000006 #x00000000))) (not (not (= #xfffffffb #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92868
	-> Start Jumping from 175c0 --> 16ac4
-> Executing 16ac4 : mov r3,#0x114 
-> Executing 16ac8 : mov r0,r8 
-> Executing 16acc : strh r6,[r4,r3] 
-> Executing 16ad0 : str r5,[r4,#0x110] 
-> Executing 16ad4 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16ad8 : mov r2,r8 
-> Executing 16adc : ldr r1,[pc,#0x530] 
-> Executing 16ae0 : mov r5,r0 
-> Executing 16ae4 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16ae4 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000006 #x00000000))) (not (= #xfffffffb #x00000000))) (= #x00000005 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffffb #x00000000))) (not (= #x00000005 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000005 #x00000000))) (not (= #xfffffffc #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000005 #x00000000))) (not (not (= #xfffffffc #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92904
	-> Start Jumping from 175c0 --> 16ae8
-> Executing 16ae8 : mov r3,#0x11c 
-> Executing 16aec : mov r0,fp 
-> Executing 16af0 : strh r8,[r4,r3] 
-> Executing 16af4 : str r5,[r4,#0x118] 
-> Executing 16af8 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16afc : ldr r1,[pc,#0x514] 
-> Executing 16b00 : mov r2,fp 
-> Executing 16b04 : mov r5,r0 
-> Executing 16b08 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16b08 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000005 #x00000000))) (not (= #xfffffffc #x00000000))) (= #x0000000a #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffffc #x00000000))) (not (= #x0000000a #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000000a #x00000000))) (not (= #xfffffff7 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000000a #x00000000))) (not (not (= #xfffffff7 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92940
	-> Start Jumping from 175c0 --> 16b0c
-> Executing 16b0c : mov r3,#0x12c 
-> Executing 16b10 : mov r0,r7 
-> Executing 16b14 : strh fp,[r4,r3] 
-> Executing 16b18 : str r5,[r4,#0x128] 
-> Executing 16b1c : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16b20 : mov r2,r7 
-> Executing 16b24 : ldr r1,[pc,#0x4f0] 
-> Executing 16b28 : mov r5,r0 
-> Executing 16b2c : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16b2c --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00000a #x00000000))) (not (= #xfffffff7 #x00000000))) (= #x0000000f #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff7 #x00000000))) (not (= #x0000000f #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000000f #x00000000))) (not (= #xfffffff2 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000000f #x00000000))) (not (not (= #xfffffff2 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 92976
	-> Start Jumping from 175c0 --> 16b30
-> Executing 16b30 : mov r3,#0x134 
-> Executing 16b34 : mov r0,fp 
-> Executing 16b38 : strh r7,[r4,r3] 
-> Executing 16b3c : str r5,[r4,#0x130] 
-> Executing 16b40 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16b44 : ldr r1,[pc,#0x4d4] 
-> Executing 16b48 : mov r2,fp 
-> Executing 16b4c : mov r5,r0 
-> Executing 16b50 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16b50 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00000f #x00000000))) (not (= #xfffffff2 #x00000000))) (= #x0000000a #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff2 #x00000000))) (not (= #x0000000a #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000000a #x00000000))) (not (= #xfffffff7 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000000a #x00000000))) (not (not (= #xfffffff7 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93012
	-> Start Jumping from 175c0 --> 16b54
-> Executing 16b54 : mov r3,#0x13c 
-> Executing 16b58 : mov r0,r8 
-> Executing 16b5c : strh fp,[r4,r3] 
-> Executing 16b60 : str r5,[r4,#0x138] 
-> Executing 16b64 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16b68 : mov r2,r8 
-> Executing 16b6c : ldr r1,[pc,#0x4b0] 
-> Executing 16b70 : mov r5,r0 
-> Executing 16b74 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16b74 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00000a #x00000000))) (not (= #xfffffff7 #x00000000))) (= #x00000005 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff7 #x00000000))) (not (= #x00000005 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000005 #x00000000))) (not (= #xfffffffc #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000005 #x00000000))) (not (not (= #xfffffffc #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93048
	-> Start Jumping from 175c0 --> 16b78
-> Executing 16b78 : mov r3,#0x144 
-> Executing 16b7c : mov r0,r8 
-> Executing 16b80 : strh r8,[r4,r3] 
-> Executing 16b84 : str r5,[r4,#0x140] 
-> Executing 16b88 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16b8c : mov r2,r8 
-> Executing 16b90 : ldr r1,[pc,#0x490] 
-> Executing 16b94 : mov r5,r0 
-> Executing 16b98 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16b98 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000005 #x00000000))) (not (= #xfffffffc #x00000000))) (= #x00000005 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffffc #x00000000))) (not (= #x00000005 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000005 #x00000000))) (not (= #xfffffffc #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000005 #x00000000))) (not (not (= #xfffffffc #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93084
	-> Start Jumping from 175c0 --> 16b9c
-> Executing 16b9c : mov r3,#0x14c 
-> Executing 16ba0 : mov r0,r8 
-> Executing 16ba4 : strh r8,[r4,r3] 
-> Executing 16ba8 : str r5,[r4,#0x148] 
-> Executing 16bac : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16bb0 : mov r2,r8 
-> Executing 16bb4 : ldr r1,[pc,#0x470] 
-> Executing 16bb8 : mov r5,r0 
-> Executing 16bbc : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16bbc --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000005 #x00000000))) (not (= #xfffffffc #x00000000))) (= #x00000005 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffffc #x00000000))) (not (= #x00000005 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000005 #x00000000))) (not (= #xfffffffc #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000005 #x00000000))) (not (not (= #xfffffffc #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93120
	-> Start Jumping from 175c0 --> 16bc0
-> Executing 16bc0 : mov r3,#0x154 
-> Executing 16bc4 : mov r0,r6 
-> Executing 16bc8 : strh r8,[r4,r3] 
-> Executing 16bcc : str r5,[r4,#0x150] 
-> Executing 16bd0 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16bd4 : mov r2,r6 
-> Executing 16bd8 : ldr r1,[pc,#0x450] 
-> Executing 16bdc : mov r5,r0 
-> Executing 16be0 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16be0 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000005 #x00000000))) (not (= #xfffffffc #x00000000))) (= #x00000006 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffffc #x00000000))) (not (= #x00000006 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000006 #x00000000))) (not (= #xfffffffb #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000006 #x00000000))) (not (not (= #xfffffffb #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93156
	-> Start Jumping from 175c0 --> 16be4
-> Executing 16be4 : mov r3,#0x16c 
-> Executing 16be8 : mov r0,#7 
-> Executing 16bec : strh r6,[r4,r3] 
-> Executing 16bf0 : str r5,[r4,#0x168] 
-> Executing 16bf4 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16bf8 : ldr r1,[pc,#0x434] 
-> Executing 16bfc : mov r2,#7 
-> Executing 16c00 : mov r5,r0 
-> Executing 16c04 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16c04 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000006 #x00000000))) (not (= #xfffffffb #x00000000))) (= #x00000007 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffffb #x00000000))) (not (= #x00000007 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000007 #x00000000))) (not (= #xfffffffa #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000007 #x00000000))) (not (not (= #xfffffffa #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93192
	-> Start Jumping from 175c0 --> 16c08
-> Executing 16c08 : mov r3,#0x174 
-> Executing 16c0c : mov r2,#7 
-> Executing 16c10 : mov r0,#7 
-> Executing 16c14 : strh r2,[r4,r3] 
-> Executing 16c18 : str r5,[r4,#0x170] 
-> Executing 16c1c : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16c20 : ldr r1,[pc,#0x410] 
-> Executing 16c24 : mov r2,#7 
-> Executing 16c28 : mov r5,r0 
-> Executing 16c2c : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16c2c --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000007 #x00000000))) (not (= #xfffffffa #x00000000))) (= #x00000007 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffffa #x00000000))) (not (= #x00000007 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000007 #x00000000))) (not (= #xfffffffa #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000007 #x00000000))) (not (not (= #xfffffffa #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93232
	-> Start Jumping from 175c0 --> 16c30
-> Executing 16c30 : mov r3,#0x17c 
-> Executing 16c34 : mov r2,#7 
-> Executing 16c38 : mov r0,#3 
-> Executing 16c3c : strh r2,[r4,r3] 
-> Executing 16c40 : str r5,[r4,#0x178] 
-> Executing 16c44 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16c48 : ldr r1,[pc,#0x3ec] 
-> Executing 16c4c : mov r2,#3 
-> Executing 16c50 : mov r5,r0 
-> Executing 16c54 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16c54 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000007 #x00000000))) (not (= #xfffffffa #x00000000))) (= #x00000003 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffffa #x00000000))) (not (= #x00000003 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000003 #x00000000))) (not (= #xfffffffe #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000003 #x00000000))) (not (not (= #xfffffffe #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93272
	-> Start Jumping from 175c0 --> 16c58
-> Executing 16c58 : mov r3,#0x184 
-> Executing 16c5c : mov r2,#3 
-> Executing 16c60 : mov r0,#0x12 
-> Executing 16c64 : strh r2,[r4,r3] 
-> Executing 16c68 : str r5,[r4,#0x180] 
-> Executing 16c6c : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16c70 : ldr r1,[pc,#0x3c8] 
-> Executing 16c74 : mov r2,#0x12 
-> Executing 16c78 : mov r5,r0 
-> Executing 16c7c : add r7,r7,#3 
-> Executing 16c80 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16c80 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000003 #x00000000))) (not (= #xfffffffe #x00000000))) (= #x00000012 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffffe #x00000000))) (not (= #x00000012 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000012 #x00000000))) (not (= #xffffffef #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000012 #x00000000))) (not (not (= #xffffffef #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93316
	-> Start Jumping from 175c0 --> 16c84
-> Executing 16c84 : mov r3,#0x18c 
-> Executing 16c88 : mov r0,#0x17 
-> Executing 16c8c : strh r7,[r4,r3] 
-> Executing 16c90 : str r5,[r4,#0x188] 
-> Executing 16c94 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16c98 : ldr r1,[pc,#0x3a4] 
-> Executing 16c9c : mov r2,#0x17 
-> Executing 16ca0 : mov r5,r0 
-> Executing 16ca4 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16ca4 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000012 #x00000000))) (not (= #xffffffef #x00000000))) (= #x00000017 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffef #x00000000))) (not (= #x00000017 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000017 #x00000000))) (not (= #xffffffea #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000017 #x00000000))) (not (not (= #xffffffea #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93352
	-> Start Jumping from 175c0 --> 16ca8
-> Executing 16ca8 : mov r3,#0x194 
-> Executing 16cac : mov r2,#0x17 
-> Executing 16cb0 : mov r0,sl 
-> Executing 16cb4 : strh r2,[r4,r3] 
-> Executing 16cb8 : str r5,[r4,#0x190] 
-> Executing 16cbc : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16cc0 : ldr r1,[pc,#0x380] 
-> Executing 16cc4 : mov r2,sl 
-> Executing 16cc8 : mov r5,r0 
-> Executing 16ccc : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16ccc --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000017 #x00000000))) (not (= #xffffffea #x00000000))) (= #x00000009 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffea #x00000000))) (not (= #x00000009 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000009 #x00000000))) (not (= #xfffffff8 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000009 #x00000000))) (not (not (= #xfffffff8 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93392
	-> Start Jumping from 175c0 --> 16cd0
-> Executing 16cd0 : mov r3,#0x19c 
-> Executing 16cd4 : mov r0,sb 
-> Executing 16cd8 : strh sl,[r4,r3] 
-> Executing 16cdc : str r5,[r4,#0x198] 
-> Executing 16ce0 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16ce4 : ldr r1,[pc,#0x360] 
-> Executing 16ce8 : mov r2,sb 
-> Executing 16cec : mov r5,r0 
-> Executing 16cf0 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16cf0 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000009 #x00000000))) (not (= #xfffffff8 #x00000000))) (= #x00000010 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff8 #x00000000))) (not (= #x00000010 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000010 #x00000000))) (not (= #xfffffff1 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000010 #x00000000))) (not (not (= #xfffffff1 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93428
	-> Start Jumping from 175c0 --> 16cf4
-> Executing 16cf4 : mov r3,#0x1a4 
-> Executing 16cf8 : mov r0,#0x16 
-> Executing 16cfc : strh sb,[r4,r3] 
-> Executing 16d00 : str r5,[r4,#0x1a0] 
-> Executing 16d04 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16d08 : ldr r1,[pc,#0x340] 
-> Executing 16d0c : mov r2,#0x16 
-> Executing 16d10 : mov r5,r0 
-> Executing 16d14 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16d14 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000010 #x00000000))) (not (= #xfffffff1 #x00000000))) (= #x00000016 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff1 #x00000000))) (not (= #x00000016 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000016 #x00000000))) (not (= #xffffffeb #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000016 #x00000000))) (not (not (= #xffffffeb #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93464
	-> Start Jumping from 175c0 --> 16d18
-> Executing 16d18 : mov r3,#0x1ac 
-> Executing 16d1c : mov r2,#0x16 
-> Executing 16d20 : mov r0,#0x15 
-> Executing 16d24 : strh r2,[r4,r3] 
-> Executing 16d28 : str r5,[r4,#0x1a8] 
-> Executing 16d2c : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16d30 : ldr r1,[pc,#0x31c] 
-> Executing 16d34 : mov r2,#0x15 
-> Executing 16d38 : mov r5,r0 
-> Executing 16d3c : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16d3c --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000016 #x00000000))) (not (= #xffffffeb #x00000000))) (= #x00000015 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffeb #x00000000))) (not (= #x00000015 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000015 #x00000000))) (not (= #xffffffec #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000015 #x00000000))) (not (not (= #xffffffec #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93504
	-> Start Jumping from 175c0 --> 16d40
-> Executing 16d40 : mov r3,#0x1b4 
-> Executing 16d44 : mov r2,#0x15 
-> Executing 16d48 : mov r0,#0x11 
-> Executing 16d4c : strh r2,[r4,r3] 
-> Executing 16d50 : str r5,[r4,#0x1b0] 
-> Executing 16d54 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16d58 : ldr r1,[pc,#0x2f8] 
-> Executing 16d5c : mov r2,#0x11 
-> Executing 16d60 : mov r5,r0 
-> Executing 16d64 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16d64 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000015 #x00000000))) (not (= #xffffffec #x00000000))) (= #x00000011 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffec #x00000000))) (not (= #x00000011 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000011 #x00000000))) (not (= #xfffffff0 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000011 #x00000000))) (not (not (= #xfffffff0 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93544
	-> Start Jumping from 175c0 --> 16d68
-> Executing 16d68 : mov r3,#0x1bc 
-> Executing 16d6c : mov r2,#0x11 
-> Executing 16d70 : mov r0,#0xc 
-> Executing 16d74 : strh r2,[r4,r3] 
-> Executing 16d78 : str r5,[r4,#0x1b8] 
-> Executing 16d7c : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16d80 : ldr r1,[pc,#0x2d4] 
-> Executing 16d84 : mov r2,#0xc 
-> Executing 16d88 : add r6,r6,#6 
-> Executing 16d8c : mov r5,r0 
-> Executing 16d90 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16d90 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000011 #x00000000))) (not (= #xfffffff0 #x00000000))) (= #x0000000c #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff0 #x00000000))) (not (= #x0000000c #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000000c #x00000000))) (not (= #xfffffff5 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000000c #x00000000))) (not (not (= #xfffffff5 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93588
	-> Start Jumping from 175c0 --> 16d94
-> Executing 16d94 : mov r3,#0x1c4 
-> Executing 16d98 : mov r0,#0x17 
-> Executing 16d9c : strh r6,[r4,r3] 
-> Executing 16da0 : str r5,[r4,#0x1c0] 
-> Executing 16da4 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16da8 : ldr r1,[pc,#0x2b0] 
-> Executing 16dac : mov r2,#0x17 
-> Executing 16db0 : mov r5,r0 
-> Executing 16db4 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16db4 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00000c #x00000000))) (not (= #xfffffff5 #x00000000))) (= #x00000017 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff5 #x00000000))) (not (= #x00000017 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000017 #x00000000))) (not (= #xffffffea #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000017 #x00000000))) (not (not (= #xffffffea #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93624
	-> Start Jumping from 175c0 --> 16db8
-> Executing 16db8 : mov r3,#0x1cc 
-> Executing 16dbc : mov r2,#0x17 
-> Executing 16dc0 : mov r0,#0x53 
-> Executing 16dc4 : strh r2,[r4,r3] 
-> Executing 16dc8 : str r5,[r4,#0x1c8] 
-> Executing 16dcc : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16dd0 : ldr r1,[pc,#0x28c] 
-> Executing 16dd4 : mov r2,#0x53 
-> Executing 16dd8 : mov r5,r0 
-> Executing 16ddc : add r8,r8,#0x4e 
-> Executing 16de0 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16de0 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000017 #x00000000))) (not (= #xffffffea #x00000000))) (= #x00000053 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffea #x00000000))) (not (= #x00000053 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000053 #x00000000))) (not (= #xffffffae #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000053 #x00000000))) (not (not (= #xffffffae #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93668
	-> Start Jumping from 175c0 --> 16de4
-> Executing 16de4 : mov r3,#0x1d4 
-> Executing 16de8 : mov r0,#0x20 
-> Executing 16dec : strh r8,[r4,r3] 
-> Executing 16df0 : str r5,[r4,#0x1d0] 
-> Executing 16df4 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16df8 : ldr r1,[pc,#0x268] 
-> Executing 16dfc : mov r2,#0x20 
-> Executing 16e00 : mov r5,r0 
-> Executing 16e04 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16e04 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000053 #x00000000))) (not (= #xffffffae #x00000000))) (= #x00000020 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffae #x00000000))) (not (= #x00000020 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000020 #x00000000))) (not (= #xffffffe1 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000020 #x00000000))) (not (not (= #xffffffe1 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93704
	-> Start Jumping from 175c0 --> 16e08
-> Executing 16e08 : mov r3,#0x1dc 
-> Executing 16e0c : mov r2,#0x20 
-> Executing 16e10 : mov r0,#0x30 
-> Executing 16e14 : strh r2,[r4,r3] 
-> Executing 16e18 : str r5,[r4,#0x1d8] 
-> Executing 16e1c : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16e20 : ldr r1,[pc,#0x244] 
-> Executing 16e24 : mov r2,#0x30 
-> Executing 16e28 : mov r5,r0 
-> Executing 16e2c : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16e2c --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000020 #x00000000))) (not (= #xffffffe1 #x00000000))) (= #x00000030 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffe1 #x00000000))) (not (= #x00000030 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000030 #x00000000))) (not (= #xffffffd1 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000030 #x00000000))) (not (not (= #xffffffd1 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93744
	-> Start Jumping from 175c0 --> 16e30
-> Executing 16e30 : mov r3,#0x1e4 
-> Executing 16e34 : mov r2,#0x30 
-> Executing 16e38 : mov r0,r6 
-> Executing 16e3c : strh r2,[r4,r3] 
-> Executing 16e40 : str r5,[r4,#0x1e0] 
-> Executing 16e44 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16e48 : mov r2,r6 
-> Executing 16e4c : ldr r1,[pc,#0x21c] 
-> Executing 16e50 : mov r5,r0 
-> Executing 16e54 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16e54 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000030 #x00000000))) (not (= #xffffffd1 #x00000000))) (= #x0000000c #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffd1 #x00000000))) (not (= #x0000000c #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000000c #x00000000))) (not (= #xfffffff5 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000000c #x00000000))) (not (not (= #xfffffff5 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93784
	-> Start Jumping from 175c0 --> 16e58
-> Executing 16e58 : mov r3,#0x1ec 
-> Executing 16e5c : mov r0,sl 
-> Executing 16e60 : strh r6,[r4,r3] 
-> Executing 16e64 : str r5,[r4,#0x1e8] 
-> Executing 16e68 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16e6c : ldr r1,[pc,#0x200] 
-> Executing 16e70 : mov r2,sl 
-> Executing 16e74 : mov r5,r0 
-> Executing 16e78 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16e78 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00000c #x00000000))) (not (= #xfffffff5 #x00000000))) (= #x00000009 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff5 #x00000000))) (not (= #x00000009 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000009 #x00000000))) (not (= #xfffffff8 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000009 #x00000000))) (not (not (= #xfffffff8 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93820
	-> Start Jumping from 175c0 --> 16e7c
-> Executing 16e7c : mov r3,#0x1f4 
-> Executing 16e80 : mov r0,fp 
-> Executing 16e84 : strh sl,[r4,r3] 
-> Executing 16e88 : str r5,[r4,#0x1f0] 
-> Executing 16e8c : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16e90 : ldr r1,[pc,#0x1e0] 
-> Executing 16e94 : mov r2,fp 
-> Executing 16e98 : mov r5,r0 
-> Executing 16e9c : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16e9c --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000009 #x00000000))) (not (= #xfffffff8 #x00000000))) (= #x0000000a #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff8 #x00000000))) (not (= #x0000000a #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000000a #x00000000))) (not (= #xfffffff7 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000000a #x00000000))) (not (not (= #xfffffff7 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93856
	-> Start Jumping from 175c0 --> 16ea0
-> Executing 16ea0 : mov r3,#0x1fc 
-> Executing 16ea4 : mov r0,r6 
-> Executing 16ea8 : strh fp,[r4,r3] 
-> Executing 16eac : str r5,[r4,#0x1f8] 
-> Executing 16eb0 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16eb4 : mov r2,r6 
-> Executing 16eb8 : ldr r1,[pc,#0x1bc] 
-> Executing 16ebc : mov r5,r0 
-> Executing 16ec0 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 16ec0 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00000a #x00000000))) (not (= #xfffffff7 #x00000000))) (= #x0000000c #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff7 #x00000000))) (not (= #x0000000c #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000000c #x00000000))) (not (= #xfffffff5 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000000c #x00000000))) (not (not (= #xfffffff5 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 93892
	-> Start Jumping from 175c0 --> 16ec4
-> Executing 16ec4 : mov r3,#0x204 
-> Executing 16ec8 : mov r0,sb 
-> Executing 16ecc : strh r6,[r4,r3] 
-> Executing 16ed0 : str r5,[r4,#0x200] 
-> Executing 16ed4 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 16ed8 : b #0x170f0 
	-> Direct Jump to 94448 if null 
	-> Start Jumping from 16ed8 --> 170f0
-> Executing 170f0 : ldr r1,[pc,#-0x78] 
-> Executing 170f4 : mov r2,sb 
-> Executing 170f8 : mov r5,r0 
-> Executing 170fc : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 170fc --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00000c #x00000000))) (not (= #xfffffff5 #x00000000))) (= #x00000010 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff5 #x00000000))) (not (= #x00000010 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000010 #x00000000))) (not (= #xfffffff1 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000010 #x00000000))) (not (not (= #xfffffff1 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 94464
	-> Start Jumping from 175c0 --> 17100
-> Executing 17100 : mov r3,#0x20c 
-> Executing 17104 : mov r0,#0x13 
-> Executing 17108 : strh sb,[r4,r3] 
-> Executing 1710c : str r5,[r4,#0x208] 
-> Executing 17110 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 17114 : ldr r1,[pc,#-0x98] 
-> Executing 17118 : mov r2,#0x13 
-> Executing 1711c : mov r5,r0 
-> Executing 17120 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 17120 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000010 #x00000000))) (not (= #xfffffff1 #x00000000))) (= #x00000013 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff1 #x00000000))) (not (= #x00000013 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000013 #x00000000))) (not (= #xffffffee #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000013 #x00000000))) (not (not (= #xffffffee #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 94500
	-> Start Jumping from 175c0 --> 17124
-> Executing 17124 : mov r3,#0x214 
-> Executing 17128 : mov r2,#0x13 
-> Executing 1712c : mov r0,#8 
-> Executing 17130 : strh r2,[r4,r3] 
-> Executing 17134 : str r5,[r4,#0x210] 
-> Executing 17138 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 1713c : ldr r1,[pc,#-0xbc] 
-> Executing 17140 : mov r2,#8 
-> Executing 17144 : mov r5,r0 
-> Executing 17148 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 17148 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000013 #x00000000))) (not (= #xffffffee #x00000000))) (= #x00000008 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffee #x00000000))) (not (= #x00000008 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000008 #x00000000))) (not (= #xfffffff9 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000008 #x00000000))) (not (not (= #xfffffff9 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 94540
	-> Start Jumping from 175c0 --> 1714c
-> Executing 1714c : mov r3,#0x21c 
-> Executing 17150 : mov r2,#8 
-> Executing 17154 : mov r0,#0xb 
-> Executing 17158 : strh r2,[r4,r3] 
-> Executing 1715c : str r5,[r4,#0x218] 
-> Executing 17160 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 17164 : ldr r1,[pc,#-0xe0] 
-> Executing 17168 : mov r2,#0xb 
-> Executing 1716c : mov r5,r0 
-> Executing 17170 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 17170 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000008 #x00000000))) (not (= #xfffffff9 #x00000000))) (= #x0000000b #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff9 #x00000000))) (not (= #x0000000b #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000000b #x00000000))) (not (= #xfffffff6 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000000b #x00000000))) (not (not (= #xfffffff6 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 94580
	-> Start Jumping from 175c0 --> 17174
-> Executing 17174 : mov r3,#0x224 
-> Executing 17178 : mov r2,#0xb 
-> Executing 1717c : mov r0,r6 
-> Executing 17180 : strh r2,[r4,r3] 
-> Executing 17184 : str r5,[r4,#0x220] 
-> Executing 17188 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 1718c : mov r2,r6 
-> Executing 17190 : ldr r1,[pc,#-0x108] 
-> Executing 17194 : mov r5,r0 
-> Executing 17198 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 17198 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00000b #x00000000))) (not (= #xfffffff6 #x00000000))) (= #x0000000c #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff6 #x00000000))) (not (= #x0000000c #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000000c #x00000000))) (not (= #xfffffff5 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000000c #x00000000))) (not (not (= #xfffffff5 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 94620
	-> Start Jumping from 175c0 --> 1719c
-> Executing 1719c : mov r3,#0x22c 
-> Executing 171a0 : mov r0,r7 
-> Executing 171a4 : strh r6,[r4,r3] 
-> Executing 171a8 : str r5,[r4,#0x228] 
-> Executing 171ac : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 171b0 : ldr r1,[pc,#-0x124] 
-> Executing 171b4 : mov r2,r7 
-> Executing 171b8 : mov r5,r0 
-> Executing 171bc : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 171bc --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00000c #x00000000))) (not (= #xfffffff5 #x00000000))) (= #x00000012 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff5 #x00000000))) (not (= #x00000012 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000012 #x00000000))) (not (= #xffffffef #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000012 #x00000000))) (not (not (= #xffffffef #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 94656
	-> Start Jumping from 175c0 --> 171c0
-> Executing 171c0 : mov r3,#0x234 
-> Executing 171c4 : mov r0,#0x19 
-> Executing 171c8 : strh r7,[r4,r3] 
-> Executing 171cc : str r5,[r4,#0x230] 
-> Executing 171d0 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 171d4 : ldr r1,[pc,#-0x144] 
-> Executing 171d8 : mov r2,#0x19 
-> Executing 171dc : mov r5,r0 
-> Executing 171e0 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 171e0 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000012 #x00000000))) (not (= #xffffffef #x00000000))) (= #x00000019 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffef #x00000000))) (not (= #x00000019 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000019 #x00000000))) (not (= #xffffffe8 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000019 #x00000000))) (not (not (= #xffffffe8 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 94692
	-> Start Jumping from 175c0 --> 171e4
-> Executing 171e4 : mov r3,#0x23c 
-> Executing 171e8 : mov r2,#0x19 
-> Executing 171ec : mov r0,#0x6f 
-> Executing 171f0 : strh r2,[r4,r3] 
-> Executing 171f4 : str r5,[r4,#0x238] 
-> Executing 171f8 : mov r5,r0 
-> Executing 171fc : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 17200 : mov r2,r5 
-> Executing 17204 : ldr r1,[pc,#-0x170] 
-> Executing 17208 : mov r6,r0 
-> Executing 1720c : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 1720c --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000019 #x00000000))) (not (= #xffffffe8 #x00000000))) (= #x0000006f #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffe8 #x00000000))) (not (= #x0000006f #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000006f #x00000000))) (not (= #xffffff92 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000006f #x00000000))) (not (not (= #xffffff92 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 94736
	-> Start Jumping from 175c0 --> 17210
-> Executing 17210 : mov r3,#0x244 
-> Executing 17214 : mov r0,r5 
-> Executing 17218 : strh r5,[r4,r3] 
-> Executing 1721c : str r6,[r4,#0x240] 
-> Executing 17220 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 17224 : mov r2,r5 
-> Executing 17228 : ldr r1,[pc,#-0x190] 
-> Executing 1722c : mov r6,r0 
-> Executing 17230 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 17230 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00006f #x00000000))) (not (= #xffffff92 #x00000000))) (= #x0000006f #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff92 #x00000000))) (not (= #x0000006f #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000006f #x00000000))) (not (= #xffffff92 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000006f #x00000000))) (not (not (= #xffffff92 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 94772
	-> Start Jumping from 175c0 --> 17234
-> Executing 17234 : mov r3,#0x24c 
-> Executing 17238 : mov r0,#0x6e 
-> Executing 1723c : strh r5,[r4,r3] 
-> Executing 17240 : str r6,[r4,#0x248] 
-> Executing 17244 : mov r5,r0 
-> Executing 17248 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 1724c : mov r2,r5 
-> Executing 17250 : ldr r1,[pc,#-0x1b4] 
-> Executing 17254 : mov r6,r0 
-> Executing 17258 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 17258 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00006f #x00000000))) (not (= #xffffff92 #x00000000))) (= #x0000006e #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff92 #x00000000))) (not (= #x0000006e #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000006e #x00000000))) (not (= #xffffff93 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000006e #x00000000))) (not (not (= #xffffff93 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 94812
	-> Start Jumping from 175c0 --> 1725c
-> Executing 1725c : mov r3,#0x254 
-> Executing 17260 : mov r0,r5 
-> Executing 17264 : strh r5,[r4,r3] 
-> Executing 17268 : str r6,[r4,#0x250] 
-> Executing 1726c : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 17270 : mov r2,r5 
-> Executing 17274 : ldr r1,[pc,#-0x1d4] 
-> Executing 17278 : mov r6,r0 
-> Executing 1727c : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 1727c --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00006e #x00000000))) (not (= #xffffff93 #x00000000))) (= #x0000006e #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff93 #x00000000))) (not (= #x0000006e #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000006e #x00000000))) (not (= #xffffff93 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000006e #x00000000))) (not (not (= #xffffff93 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 94848
	-> Start Jumping from 175c0 --> 17280
-> Executing 17280 : mov r3,#0x25c 
-> Executing 17284 : mov r0,#0x75 
-> Executing 17288 : strh r5,[r4,r3] 
-> Executing 1728c : str r6,[r4,#0x258] 
-> Executing 17290 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 17294 : ldr r1,[pc,#-0x1f0] 
-> Executing 17298 : mov r2,#0x75 
-> Executing 1729c : mov r5,r0 
-> Executing 172a0 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 172a0 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00006e #x00000000))) (not (= #xffffff93 #x00000000))) (= #x00000075 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff93 #x00000000))) (not (= #x00000075 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000075 #x00000000))) (not (= #xffffff8c #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000075 #x00000000))) (not (not (= #xffffff8c #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 94884
	-> Start Jumping from 175c0 --> 172a4
-> Executing 172a4 : mov r3,#0x264 
-> Executing 172a8 : mov r2,#0x75 
-> Executing 172ac : mov r0,#0x40 
-> Executing 172b0 : strh r2,[r4,r3] 
-> Executing 172b4 : str r5,[r4,#0x260] 
-> Executing 172b8 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 172bc : ldr r1,[pc,#-0x214] 
-> Executing 172c0 : mov r2,#0x40 
-> Executing 172c4 : mov r5,r0 
-> Executing 172c8 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 172c8 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000075 #x00000000))) (not (= #xffffff8c #x00000000))) (= #x00000040 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff8c #x00000000))) (not (= #x00000040 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000040 #x00000000))) (not (= #xffffffc1 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000040 #x00000000))) (not (not (= #xffffffc1 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 94924
	-> Start Jumping from 175c0 --> 172cc
-> Executing 172cc : mov r3,#0x26c 
-> Executing 172d0 : mov r2,#0x40 
-> Executing 172d4 : mov r0,#0x7b 
-> Executing 172d8 : strh r2,[r4,r3] 
-> Executing 172dc : str r5,[r4,#0x268] 
-> Executing 172e0 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 172e4 : ldr r1,[pc,#-0x238] 
-> Executing 172e8 : mov r2,#0x7b 
-> Executing 172ec : mov r5,#0x7b 
-> Executing 172f0 : mov r6,r0 
-> Executing 172f4 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 172f4 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000040 #x00000000))) (not (= #xffffffc1 #x00000000))) (= #x0000007b #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffc1 #x00000000))) (not (= #x0000007b #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000007b #x00000000))) (not (= #xffffff86 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000007b #x00000000))) (not (not (= #xffffff86 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 94968
	-> Start Jumping from 175c0 --> 172f8
-> Executing 172f8 : mov r3,#0x274 
-> Executing 172fc : mov r0,#0x67 
-> Executing 17300 : strh r5,[r4,r3] 
-> Executing 17304 : str r6,[r4,#0x270] 
-> Executing 17308 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 1730c : ldr r1,[pc,#-0x25c] 
-> Executing 17310 : mov r2,#0x67 
-> Executing 17314 : mov r6,r0 
-> Executing 17318 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 17318 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00007b #x00000000))) (not (= #xffffff86 #x00000000))) (= #x00000067 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff86 #x00000000))) (not (= #x00000067 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000067 #x00000000))) (not (= #xffffff9a #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000067 #x00000000))) (not (not (= #xffffff9a #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 95004
	-> Start Jumping from 175c0 --> 1731c
-> Executing 1731c : mov r3,#0x27c 
-> Executing 17320 : mov r2,#0x67 
-> Executing 17324 : mov r0,r5 
-> Executing 17328 : strh r2,[r4,r3] 
-> Executing 1732c : str r6,[r4,#0x278] 
-> Executing 17330 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 17334 : mov r2,r5 
-> Executing 17338 : ldr r1,[pc,#-0x284] 
-> Executing 1733c : mov r6,r0 
-> Executing 17340 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 17340 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000067 #x00000000))) (not (= #xffffff9a #x00000000))) (= #x0000007b #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff9a #x00000000))) (not (= #x0000007b #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000007b #x00000000))) (not (= #xffffff86 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000007b #x00000000))) (not (not (= #xffffff86 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 95044
	-> Start Jumping from 175c0 --> 17344
-> Executing 17344 : mov r3,#0x284 
-> Executing 17348 : mov r0,#0x50 
-> Executing 1734c : strh r5,[r4,r3] 
-> Executing 17350 : str r6,[r4,#0x280] 
-> Executing 17354 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 17358 : ldr r1,[pc,#-0x2a0] 
-> Executing 1735c : mov r2,#0x50 
-> Executing 17360 : mov r5,r0 
-> Executing 17364 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 17364 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00007b #x00000000))) (not (= #xffffff86 #x00000000))) (= #x00000050 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff86 #x00000000))) (not (= #x00000050 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000050 #x00000000))) (not (= #xffffffb1 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000050 #x00000000))) (not (not (= #xffffffb1 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 95080
	-> Start Jumping from 175c0 --> 17368
-> Executing 17368 : mov r3,#0x28c 
-> Executing 1736c : mov r2,#0x50 
-> Executing 17370 : mov r0,#0x52 
-> Executing 17374 : strh r2,[r4,r3] 
-> Executing 17378 : str r5,[r4,#0x288] 
-> Executing 1737c : mov r5,r0 
-> Executing 17380 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 17384 : mov r2,r5 
-> Executing 17388 : ldr r1,[pc,#-0x2cc] 
-> Executing 1738c : mov r6,r0 
-> Executing 17390 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 17390 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000050 #x00000000))) (not (= #xffffffb1 #x00000000))) (= #x00000052 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffb1 #x00000000))) (not (= #x00000052 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000052 #x00000000))) (not (= #xffffffaf #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000052 #x00000000))) (not (not (= #xffffffaf #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 95124
	-> Start Jumping from 175c0 --> 17394
-> Executing 17394 : mov r3,#0x294 
-> Executing 17398 : mov r0,r5 
-> Executing 1739c : strh r5,[r4,r3] 
-> Executing 173a0 : str r6,[r4,#0x290] 
-> Executing 173a4 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 173a8 : mov r2,r5 
-> Executing 173ac : ldr r1,[pc,#-0x2ec] 
-> Executing 173b0 : mov r6,r0 
-> Executing 173b4 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 173b4 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000052 #x00000000))) (not (= #xffffffaf #x00000000))) (= #x00000052 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffaf #x00000000))) (not (= #x00000052 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000052 #x00000000))) (not (= #xffffffaf #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000052 #x00000000))) (not (not (= #xffffffaf #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 95160
	-> Start Jumping from 175c0 --> 173b8
-> Executing 173b8 : mov r3,#0x29c 
-> Executing 173bc : mov r0,r5 
-> Executing 173c0 : strh r5,[r4,r3] 
-> Executing 173c4 : str r6,[r4,#0x298] 
-> Executing 173c8 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 173cc : mov r2,r5 
-> Executing 173d0 : ldr r1,[pc,#-0x30c] 
-> Executing 173d4 : mov r6,r0 
-> Executing 173d8 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 173d8 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000052 #x00000000))) (not (= #xffffffaf #x00000000))) (= #x00000052 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffaf #x00000000))) (not (= #x00000052 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000052 #x00000000))) (not (= #xffffffaf #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000052 #x00000000))) (not (not (= #xffffffaf #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 95196
	-> Start Jumping from 175c0 --> 173dc
-> Executing 173dc : mov r3,#0x2a4 
-> Executing 173e0 : mov r0,r8 
-> Executing 173e4 : strh r5,[r4,r3] 
-> Executing 173e8 : str r6,[r4,#0x2a0] 
-> Executing 173ec : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 173f0 : ldr r1,[pc,#-0x328] 
-> Executing 173f4 : mov r2,r8 
-> Executing 173f8 : mov r5,r0 
-> Executing 173fc : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 173fc --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  (= #x00000053 #x00000000)UNSAT
	-> Checking path constrains by Z3 ...  (not (= #x00000053 #x00000000))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...  (and (not (= #x00000053 #x00000000)) (not (= #xffffffae #x00000000)))SAT
	-> Checking path constrains by Z3 ...  (and (not (= #x00000053 #x00000000)) (not (not (= #xffffffae #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 95232
	-> Start Jumping from 175c0 --> 17400
-> Executing 17400 : mov r3,#0x2ac 
-> Executing 17404 : mov r0,#0x65 
-> Executing 17408 : strh r8,[r4,r3] 
-> Executing 1740c : str r5,[r4,#0x2a8] 
-> Executing 17410 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 17414 : ldr r1,[pc,#-0x348] 
-> Executing 17418 : mov r2,#0x65 
-> Executing 1741c : mov r5,r0 
-> Executing 17420 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 17420 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  0000053 #x00000000)) (not (= #xffffffae #x00000000))) (= #x00000065 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  3 #x00000000)) (not (= #xffffffae #x00000000))) (not (= #x00000065 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000065 #x00000000))) (not (= #xffffff9c #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000065 #x00000000))) (not (not (= #xffffff9c #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 95268
	-> Start Jumping from 175c0 --> 17424
-> Executing 17424 : mov r3,#0x2b4 
-> Executing 17428 : mov r2,#0x65 
-> Executing 1742c : mov r0,#0xe 
-> Executing 17430 : strh r2,[r4,r3] 
-> Executing 17434 : str r5,[r4,#0x2b0] 
-> Executing 17438 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 1743c : ldr r1,[pc,#-0x36c] 
-> Executing 17440 : mov r2,#0xe 
-> Executing 17444 : mov r5,r0 
-> Executing 17448 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 17448 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000065 #x00000000))) (not (= #xffffff9c #x00000000))) (= #x0000000e #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff9c #x00000000))) (not (= #x0000000e #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000000e #x00000000))) (not (= #xfffffff3 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000000e #x00000000))) (not (not (= #xfffffff3 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 95308
	-> Start Jumping from 175c0 --> 1744c
-> Executing 1744c : mov r3,#0x2bc 
-> Executing 17450 : mov r2,#0xe 
-> Executing 17454 : mov r0,#0x13 
-> Executing 17458 : strh r2,[r4,r3] 
-> Executing 1745c : str r5,[r4,#0x2b8] 
-> Executing 17460 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 17464 : ldr r1,[pc,#-0x390] 
-> Executing 17468 : mov r2,#0x13 
-> Executing 1746c : mov r5,r0 
-> Executing 17470 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 17470 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  00000e #x00000000))) (not (= #xfffffff3 #x00000000))) (= #x00000013 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff3 #x00000000))) (not (= #x00000013 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000013 #x00000000))) (not (= #xffffffee #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000013 #x00000000))) (not (not (= #xffffffee #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 95348
	-> Start Jumping from 175c0 --> 17474
-> Executing 17474 : mov r3,#0x2c4 
-> Executing 17478 : mov r2,#0x13 
-> Executing 1747c : mov r0,#8 
-> Executing 17480 : strh r2,[r4,r3] 
-> Executing 17484 : str r5,[r4,#0x2c0] 
-> Executing 17488 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 1748c : ldr r1,[pc,#-0x3b4] 
-> Executing 17490 : mov r2,#8 
-> Executing 17494 : mov r5,r0 
-> Executing 17498 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 17498 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000013 #x00000000))) (not (= #xffffffee #x00000000))) (= #x00000008 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffee #x00000000))) (not (= #x00000008 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000008 #x00000000))) (not (= #xfffffff9 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000008 #x00000000))) (not (not (= #xfffffff9 #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 95388
	-> Start Jumping from 175c0 --> 1749c
-> Executing 1749c : mov r3,#0x2cc 
-> Executing 174a0 : mov r2,#8 
-> Executing 174a4 : mov r0,#5 
-> Executing 174a8 : strh r2,[r4,r3] 
-> Executing 174ac : str r5,[r4,#0x2c8] 
-> Executing 174b0 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 174b4 : ldr r1,[pc,#-0x3d8] 
-> Executing 174b8 : mov r2,#5 
-> Executing 174bc : mov r5,r0 
-> Executing 174c0 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 174c0 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000008 #x00000000))) (not (= #xfffffff9 #x00000000))) (= #x00000005 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff9 #x00000000))) (not (= #x00000005 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000005 #x00000000))) (not (= #xfffffffc #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000005 #x00000000))) (not (not (= #xfffffffc #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 95428
	-> Start Jumping from 175c0 --> 174c4
-> Executing 174c4 : mov r3,#0x2d4 
-> Executing 174c8 : mov r2,#5 
-> Executing 174cc : mov r0,#6 
-> Executing 174d0 : strh r2,[r4,r3] 
-> Executing 174d4 : str r5,[r4,#0x2d0] 
-> Executing 174d8 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 174dc : ldr r1,[pc,#-0x3fc] 
-> Executing 174e0 : mov r2,#6 
-> Executing 174e4 : mov r5,r0 
-> Executing 174e8 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 174e8 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000005 #x00000000))) (not (= #xfffffffc #x00000000))) (= #x00000006 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffffc #x00000000))) (not (= #x00000006 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000006 #x00000000))) (not (= #xfffffffb #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000006 #x00000000))) (not (not (= #xfffffffb #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 95468
	-> Start Jumping from 175c0 --> 174ec
-> Executing 174ec : mov r3,#0x2dc 
-> Executing 174f0 : mov r2,#6 
-> Executing 174f4 : mov r0,#0x17 
-> Executing 174f8 : strh r2,[r4,r3] 
-> Executing 174fc : str r5,[r4,#0x2d8] 
-> Executing 17500 : bl #0x18f74 
	-> Direct Jump to 102260 if null 
	 === Call to library function: malloc
-> Executing 17504 : mov r2,#0x17 
-> Executing 17508 : ldr r1,[pc,#-0x424] 
-> Executing 1750c : mov r5,r0 
-> Executing 17510 : bl #0x175a0 
	-> Direct Jump to 95648 if null 
	 ==+ Call to: util_memcpy
	-> Start Jumping from 17510 --> 175a0
-> Executing 175a0 : cmp r2,#0 
-> Executing 175a4 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000006 #x00000000))) (not (= #xfffffffb #x00000000))) (= #x00000017 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffffb #x00000000))) (not (= #x00000017 #x00000000)))SAT
	-> Start Jumping from 175a4 --> 175a8
	-> Loop limitation exceeded, break.
-> Executing 175a8 : mov ip,#0 
-> Executing 175ac : ldrb r3,[ip,r1] 
-> Executing 175b0 : strb r3,[ip,r0] 
-> Executing 175b4 : add ip,ip,#1 
-> Executing 175b8 : cmp ip,r2 
-> Executing 175bc : b #0x175ac 
	-> Direct Jump to 95660 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000017 #x00000000))) (not (= #xffffffea #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000017 #x00000000))) (not (not (= #xffffffea #x00000000))))UNSAT
	-> Start Jumping from 175bc --> 175ac
	-> Loop limitation exceeded, break.
-> Executing 175c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 95508
	-> Start Jumping from 175c0 --> 17514
-> Executing 17514 : mov r3,#0x2e4 
-> Executing 17518 : mov r2,#0x17 
-> Executing 1751c : strh r2,[r4,r3] 
-> Executing 17520 : str r5,[r4,#0x2e0] 
-> Executing 17524 : add sp,sp,#4 
-> Executing 17528 : pop {r4,r5,r6,r7,r8,sb,sl,fp,lr} 
-> Executing 1752c : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 73224
	-> Start Jumping from 1752c --> 11e08
-> Executing 11e08 : ldr r3,[pc,#0x5ec] 
-> Executing 11e0c : ldr lr,[pc,#0x5ec] 
-> Executing 11e10 : str r3,[lr] 
-> Executing 11e14 : bl #0x11aac 
	-> Direct Jump to 72364 if null 
	 ==+ Call to: ensure_single_instance
	-> Start Jumping from 11e14 --> 11aac
-> Executing 11aac : push {r4,r5,r6,r7,r8,lr} 
-> Executing 11ab0 : mov r4,#1 
-> Executing 11ab4 : sub sp,sp,#0x20 
-> Executing 11ab8 : mov r0,#2 
-> Executing 11abc : mov r1,r4 
-> Executing 11ac0 : mov r2,#0 
-> Executing 11ac4 : str r4,[sp,#0x1c] 
-> Executing 11ac8 : bl #0x18d24 
	-> Direct Jump to 101668 if null 
	 === Call to library function: socket
-> Executing 11acc : ldr r6,[pc,#0x12c] 
-> Executing 11ad0 : cmn r0,#1 
-> Executing 11ad4 : str r0,[r6] 
-> Executing 11ad8 : b #0x11b88 
	-> Direct Jump to 72584 if EQ 
	-> Checking path constrains by Z3 ...  000017 #x00000000))) (not (= #xffffffea #x00000000))) (= #x0000003d #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffea #x00000000))) (not (= #x0000003d #x00000000)))SAT
	-> Start Jumping from 11ad8 --> 11adc
-> Executing 11adc : add r3,sp,#0x1c 
-> Executing 11ae0 : mov r1,r4 
-> Executing 11ae4 : mov r5,#4 
-> Executing 11ae8 : mov r2,#2 
-> Executing 11aec : str r5,[sp] 
-> Executing 11af0 : bl #0x18cdc 
	-> Direct Jump to 101596 if null 
	 === Call to library function: setsockopt
-> Executing 11af4 : ldr r4,[r6] 
-> Executing 11af8 : mov r1,#3 
-> Executing 11afc : mov r2,#0 
-> Executing 11b00 : mov r0,r4 
-> Executing 11b04 : bl #0x17e24 
	-> Direct Jump to 97828 if null 
	 === Call to library function: fcntl
-> Executing 11b08 : mov r1,r5 
-> Executing 11b0c : orr r2,r0,#0x800 
-> Executing 11b10 : mov r0,r4 
-> Executing 11b14 : bl #0x17e24 
	-> Direct Jump to 97828 if null 
	 === Call to library function: fcntl
-> Executing 11b18 : ldr r8,[pc,#0xe4] 
-> Executing 11b1c : ldrb r3,[r8] 
-> Executing 11b20 : cmp r3,#0 
-> Executing 11b24 : b 72484-2 
	-> Direct Jump to 72484-2 if EQ 
	-> Checking path constrains by Z3 ...  ffffea #x00000000))) (not (= #x0000003d #x00000000))) (= #x00000001 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000003d #x00000000))) (not (= #x00000001 #x00000000)))SAT
	-> Start Jumping from 11b24 --> 11b28
-> Executing 11b28 : b 72488-2 
	-> Direct Jump to 72488-2 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000001 #x00000000))) (not (= #x00000001 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000001 #x00000000))) (not (not (= #x00000001 #x00000000))))UNSAT
	-> Start Jumping from 11b28 --> 11b28
-> Executing 11b28 : mov r2,#0x1000000 
-> Executing 11b28+2 : b 0x11b2c 
	-> Direct Jump to 72492 if null 
	-> Start Jumping from 11b28+2 --> 11b2c
-> Executing 11b2c : b 72492-2 
	-> Direct Jump to 72492-2 if EQ 
	-> Checking path constrains by Z3 ...  000001 #x00000000))) (not (= #x00000001 #x00000000))) (= #x00000001 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000001 #x00000000))) (not (= #x00000001 #x00000000)))SAT
	-> Start Jumping from 11b2c --> 11b30
-> Executing 11b30 : mov r3,#0x950 
-> Executing 11b34 : b 72500-2 
	-> Direct Jump to 72500-2 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000001 #x00000000))) (not (= #x00000001 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000001 #x00000000))) (not (not (= #x00000001 #x00000000))))UNSAT
	-> Start Jumping from 11b34 --> 11b34
-> Executing 11b34 : add r2,r2,#0x7f 
-> Executing 11b34+2 : b 0x11b38 
	-> Direct Jump to 72504 if null 
	-> Start Jumping from 11b34+2 --> 11b38
-> Executing 11b38 : add r3,r3,#5 
-> Executing 11b3c : str r2,[sp,#0x10] 
-> Executing 11b40 : strh r3,[sp,#0xe] 
-> Executing 11b44 : bl #0x186c4 
	-> Direct Jump to 100036 if null 
	 === Call to library function: __errno_location
-> Executing 11b48 : mov r7,#0 
-> Executing 11b4c : str r7,[r0] 
-> Executing 11b50 : add r5,sp,#0xc 
-> Executing 11b54 : mov r3,#2 
-> Executing 11b58 : mov r4,r0 
-> Executing 11b5c : mov r1,r5 
-> Executing 11b60 : ldr r0,[r6] 
-> Executing 11b64 : mov r2,#0x10 
-> Executing 11b68 : strh r3,[sp,#0xc] 
-> Executing 11b6c : bl #0x18808 
	-> Direct Jump to 100360 if null 
	 === Call to library function: bind
-> Executing 11b70 : cmn r0,#1 
-> Executing 11b74 : b #0x11b94 
	-> Direct Jump to 72596 if EQ 
	-> Checking path constrains by Z3 ...  000001 #x00000000))) (not (= #x00000001 #x00000000))) (= #x00000001 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000001 #x00000000))) (not (= #x00000001 #x00000000)))SAT
	-> Start Jumping from 11b74 --> 11b78
-> Executing 11b78 : ldr r3,[pc,#0x80] 
-> Executing 11b7c : mov r1,#1 
-> Executing 11b80 : ldr r0,[r3] 
-> Executing 11b84 : bl #0x18990 
	-> Direct Jump to 100752 if null 
	 === Call to library function: listen
-> Executing 11b88 : add sp,sp,#0x20 
-> Executing 11b8c : pop {r4,r5,r6,r7,r8,lr} 
-> Executing 11b90 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 73240
	-> Start Jumping from 11b90 --> 11e18
-> Executing 11e18 : bl #0x1247c 
	-> Direct Jump to 74876 if null 
	 ==+ Call to: rand_init
	-> Start Jumping from 11e18 --> 1247c
-> Executing 1247c : push {r4,r5,lr} 
-> Executing 12480 : mov r0,#0 
-> Executing 12484 : sub sp,sp,#4 
-> Executing 12488 : bl #0x18218 
	-> Direct Jump to 98840 if null 
	 === Call to library function: time
-> Executing 1248c : ldr r3,[pc,#0x40] 
-> Executing 12490 : str r0,[r3] 
-> Executing 12494 : bl #0x1b260 
	-> Direct Jump to 111200 if null 
	 === Call to library function: getpid
-> Executing 12498 : mov r4,r0 
-> Executing 1249c : bl #0x17f18 
	-> Direct Jump to 98072 if null 
	 === Call to library function: getppid
-> Executing 124a0 : ldr r5,[pc,#0x30] 
-> Executing 124a4 : eor r0,r0,r4 
-> Executing 124a8 : str r0,[r5] 
-> Executing 124ac : bl #0x186e4 
	-> Direct Jump to 100068 if null 
	 === Call to library function: clock
-> Executing 124b0 : ldr r3,[r5] 
-> Executing 124b4 : ldr r2,[pc,#0x20] 
-> Executing 124b8 : ldr r1,[pc,#0x20] 
-> Executing 124bc : eor r3,r0,r3 
-> Executing 124c0 : str r3,[r2] 
-> Executing 124c4 : str r0,[r1] 
-> Executing 124c8 : add sp,sp,#4 
-> Executing 124cc : pop {r4,r5,lr} 
-> Executing 124d0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 73244
	-> Start Jumping from 124d0 --> 11e1c
-> Executing 11e1c : add r0,sp,#0x500 
-> Executing 11e20 : add r0,r0,#8 
-> Executing 11e24 : mov r1,#0x20 
-> Executing 11e28 : bl #0x175c4 
	-> Direct Jump to 95684 if null 
	 ==+ Call to: util_zero
	-> Start Jumping from 11e28 --> 175c4
-> Executing 175c4 : cmp r1,#0 
-> Executing 175c8 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  000001 #x00000000))) (not (= #x00000001 #x00000000))) (= #x00000020 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000001 #x00000000))) (not (= #x00000020 #x00000000)))SAT
	-> Start Jumping from 175c8 --> 175cc
-> Executing 175cc : mov r2,#0 
-> Executing 175d0 : mov r3,#0 
-> Executing 175d4 : strb r3,[r2,r0] 
-> Executing 175d8 : add r2,r2,#1 
-> Executing 175dc : cmp r2,r1 
-> Executing 175e0 : b #0x175d0 
	-> Direct Jump to 95696 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000020 #x00000000))) (not (= #xffffffe1 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000020 #x00000000))) (not (not (= #xffffffe1 #x00000000))))UNSAT
	-> Start Jumping from 175e0 --> 175d0
-> Executing 175d0 : mov r3,#0 
-> Executing 175d4 : strb r3,[r2,r0] 
-> Executing 175d8 : add r2,r2,#1 
-> Executing 175dc : cmp r2,r1 
-> Executing 175e0 : b #0x175d0 
	-> Direct Jump to 95696 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffe1 #x00000000))) (not (= #xffffffe2 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffe1 #x00000000))) (not (not (= #xffffffe2 #x00000000))))UNSAT
	-> Start Jumping from 175e0 --> 175d0
-> Executing 175d0 : mov r3,#0 
-> Executing 175d4 : strb r3,[r2,r0] 
-> Executing 175d8 : add r2,r2,#1 
-> Executing 175dc : cmp r2,r1 
-> Executing 175e0 : b #0x175d0 
	-> Direct Jump to 95696 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffe2 #x00000000))) (not (= #xffffffe3 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffe2 #x00000000))) (not (not (= #xffffffe3 #x00000000))))UNSAT
	-> Start Jumping from 175e0 --> 175d0
-> Executing 175d0 : mov r3,#0 
-> Executing 175d4 : strb r3,[r2,r0] 
-> Executing 175d8 : add r2,r2,#1 
-> Executing 175dc : cmp r2,r1 
-> Executing 175e0 : b #0x175d0 
	-> Direct Jump to 95696 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffe3 #x00000000))) (not (= #xffffffe4 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffe3 #x00000000))) (not (not (= #xffffffe4 #x00000000))))UNSAT
	-> Start Jumping from 175e0 --> 175d0
-> Executing 175d0 : mov r3,#0 
-> Executing 175d4 : strb r3,[r2,r0] 
-> Executing 175d8 : add r2,r2,#1 
-> Executing 175dc : cmp r2,r1 
-> Executing 175e0 : b #0x175d0 
	-> Direct Jump to 95696 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffe4 #x00000000))) (not (= #xffffffe5 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffe4 #x00000000))) (not (not (= #xffffffe5 #x00000000))))UNSAT
	-> Start Jumping from 175e0 --> 175d0
-> Executing 175d0 : mov r3,#0 
-> Executing 175d4 : strb r3,[r2,r0] 
-> Executing 175d8 : add r2,r2,#1 
-> Executing 175dc : cmp r2,r1 
-> Executing 175e0 : b #0x175d0 
	-> Direct Jump to 95696 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffe5 #x00000000))) (not (= #xffffffe6 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffe5 #x00000000))) (not (not (= #xffffffe6 #x00000000))))UNSAT
	-> Start Jumping from 175e0 --> 175d0
-> Executing 175d0 : mov r3,#0 
-> Executing 175d4 : strb r3,[r2,r0] 
-> Executing 175d8 : add r2,r2,#1 
-> Executing 175dc : cmp r2,r1 
-> Executing 175e0 : b #0x175d0 
	-> Direct Jump to 95696 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffe6 #x00000000))) (not (= #xffffffe7 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffe6 #x00000000))) (not (not (= #xffffffe7 #x00000000))))UNSAT
	-> Start Jumping from 175e0 --> 175d0
-> Executing 175d0 : mov r3,#0 
-> Executing 175d4 : strb r3,[r2,r0] 
-> Executing 175d8 : add r2,r2,#1 
-> Executing 175dc : cmp r2,r1 
-> Executing 175e0 : b #0x175d0 
	-> Direct Jump to 95696 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffe7 #x00000000))) (not (= #xffffffe8 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffe7 #x00000000))) (not (not (= #xffffffe8 #x00000000))))UNSAT
	-> Start Jumping from 175e0 --> 175d0
-> Executing 175d0 : mov r3,#0 
-> Executing 175d4 : strb r3,[r2,r0] 
-> Executing 175d8 : add r2,r2,#1 
-> Executing 175dc : cmp r2,r1 
-> Executing 175e0 : b #0x175d0 
	-> Direct Jump to 95696 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffe8 #x00000000))) (not (= #xffffffe9 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffe8 #x00000000))) (not (not (= #xffffffe9 #x00000000))))UNSAT
	-> Start Jumping from 175e0 --> 175d0
-> Executing 175d0 : mov r3,#0 
-> Executing 175d4 : strb r3,[r2,r0] 
-> Executing 175d8 : add r2,r2,#1 
-> Executing 175dc : cmp r2,r1 
-> Executing 175e0 : b #0x175d0 
	-> Direct Jump to 95696 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffe9 #x00000000))) (not (= #xffffffea #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffe9 #x00000000))) (not (not (= #xffffffea #x00000000))))UNSAT
	-> Start Jumping from 175e0 --> 175d0
-> Executing 175d0 : mov r3,#0 
-> Executing 175d4 : strb r3,[r2,r0] 
-> Executing 175d8 : add r2,r2,#1 
-> Executing 175dc : cmp r2,r1 
-> Executing 175e0 : b #0x175d0 
	-> Direct Jump to 95696 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffea #x00000000))) (not (= #xffffffeb #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffea #x00000000))) (not (not (= #xffffffeb #x00000000))))UNSAT
	-> Start Jumping from 175e0 --> 175d0
	-> Loop limitation exceeded, break.
-> Executing 175e4 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 73260
	-> Start Jumping from 175e4 --> 11e2c
-> Executing 11e2c : cmp r6,#2 
-> Executing 11e30 : b #0x11e9c 
	-> Direct Jump to 73372 if EQ 
	-> Checking path constrains by Z3 ...  ffffea #x00000000))) (not (= #xffffffeb #x00000000))) (= #xffffffff #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffeb #x00000000))) (not (= #xffffffff #x00000000)))SAT
	-> Start Jumping from 11e30 --> 11e34
-> Executing 11e34 : mov r0,#2 
-> Executing 11e38 : bl #0x15e2c 
	-> Direct Jump to 89644 if null 
	 ==+ Call to: table_unlock_val
	-> Start Jumping from 11e38 --> 15e2c
-> Executing 15e2c : ldr r3,[pc,#0x90] 
-> Executing 15e30 : ldr r2,[pc,#0x90] 
-> Executing 15e34 : lsl r0,r0,#3 
-> Executing 15e38 : add r0,r0,r3 
-> Executing 15e3c : ldr r1,[r2] 
-> Executing 15e40 : ldrh r3,[r0,#4] 
-> Executing 15e44 : lsr r2,r1,#8 
-> Executing 15e48 : cmp r3,#0 
-> Executing 15e4c : lsr r3,r1,#0x10 
-> Executing 15e50 : push {r4,r5,r6,lr} 
-> Executing 15e54 : and r6,r2,#0xff 
-> Executing 15e58 : and r5,r3,#0xff 
-> Executing 15e5c : lsr r4,r1,#0x18 
-> Executing 15e60 : and lr,r1,#0xff 
-> Executing 15e64 : b #0x15ebc 
	-> Direct Jump to 89788 if EQ 
	-> Checking path constrains by Z3 ...  ffffeb #x00000000))) (not (= #xffffffff #x00000000))) (= #x0000001d #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffff #x00000000))) (not (= #x0000001d #x00000000)))SAT
	-> Start Jumping from 15e64 --> 15e68
-> Executing 15e68 : mov ip,#0 
-> Executing 15e6c : ldr r2,[r0] 
-> Executing 15e70 : ldrb r3,[ip,r2] 
-> Executing 15e74 : eor r3,lr,r3 
-> Executing 15e78 : strb r3,[ip,r2] 
-> Executing 15e7c : ldr r1,[r0] 
-> Executing 15e80 : ldrb r3,[ip,r1] 
-> Executing 15e84 : eor r3,r6,r3 
-> Executing 15e88 : strb r3,[ip,r1] 
-> Executing 15e8c : ldr r2,[r0] 
-> Executing 15e90 : ldrb r3,[ip,r2] 
-> Executing 15e94 : eor r3,r5,r3 
-> Executing 15e98 : strb r3,[ip,r2] 
-> Executing 15e9c : ldr r1,[r0] 
-> Executing 15ea0 : ldrb r3,[ip,r1] 
-> Executing 15ea4 : eor r3,r4,r3 
-> Executing 15ea8 : strb r3,[ip,r1] 
-> Executing 15eac : ldrh r2,[r0,#4] 
-> Executing 15eb0 : add ip,ip,#1 
-> Executing 15eb4 : cmp r2,ip 
-> Executing 15eb8 : b #0x15e6c 
	-> Direct Jump to 89708 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x0000001c #x7fffffff) (bvslt #x0000001c #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x0000001c #x7fffffff) (bvslt #x0000001c #x80000001))))))UNSAT
	-> Start Jumping from 15eb8 --> 15e6c
-> Executing 15e6c : ldr r2,[r0] 
-> Executing 15e70 : ldrb r3,[ip,r2] 
-> Executing 15e74 : eor r3,lr,r3 
-> Executing 15e78 : strb r3,[ip,r2] 
-> Executing 15e7c : ldr r1,[r0] 
-> Executing 15e80 : ldrb r3,[ip,r1] 
-> Executing 15e84 : eor r3,r6,r3 
-> Executing 15e88 : strb r3,[ip,r1] 
-> Executing 15e8c : ldr r2,[r0] 
-> Executing 15e90 : ldrb r3,[ip,r2] 
-> Executing 15e94 : eor r3,r5,r3 
-> Executing 15e98 : strb r3,[ip,r2] 
-> Executing 15e9c : ldr r1,[r0] 
-> Executing 15ea0 : ldrb r3,[ip,r1] 
-> Executing 15ea4 : eor r3,r4,r3 
-> Executing 15ea8 : strb r3,[ip,r1] 
-> Executing 15eac : ldrh r2,[r0,#4] 
-> Executing 15eb0 : add ip,ip,#1 
-> Executing 15eb4 : cmp r2,ip 
-> Executing 15eb8 : b #0x15e6c 
	-> Direct Jump to 89708 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x0000001b #x7fffffff) (bvslt #x0000001b #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x0000001b #x7fffffff) (bvslt #x0000001b #x80000001))))))UNSAT
	-> Start Jumping from 15eb8 --> 15e6c
-> Executing 15e6c : ldr r2,[r0] 
-> Executing 15e70 : ldrb r3,[ip,r2] 
-> Executing 15e74 : eor r3,lr,r3 
-> Executing 15e78 : strb r3,[ip,r2] 
-> Executing 15e7c : ldr r1,[r0] 
-> Executing 15e80 : ldrb r3,[ip,r1] 
-> Executing 15e84 : eor r3,r6,r3 
-> Executing 15e88 : strb r3,[ip,r1] 
-> Executing 15e8c : ldr r2,[r0] 
-> Executing 15e90 : ldrb r3,[ip,r2] 
-> Executing 15e94 : eor r3,r5,r3 
-> Executing 15e98 : strb r3,[ip,r2] 
-> Executing 15e9c : ldr r1,[r0] 
-> Executing 15ea0 : ldrb r3,[ip,r1] 
-> Executing 15ea4 : eor r3,r4,r3 
-> Executing 15ea8 : strb r3,[ip,r1] 
-> Executing 15eac : ldrh r2,[r0,#4] 
-> Executing 15eb0 : add ip,ip,#1 
-> Executing 15eb4 : cmp r2,ip 
-> Executing 15eb8 : b #0x15e6c 
	-> Direct Jump to 89708 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x0000001a #x7fffffff) (bvslt #x0000001a #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x0000001a #x7fffffff) (bvslt #x0000001a #x80000001))))))UNSAT
	-> Start Jumping from 15eb8 --> 15e6c
-> Executing 15e6c : ldr r2,[r0] 
-> Executing 15e70 : ldrb r3,[ip,r2] 
-> Executing 15e74 : eor r3,lr,r3 
-> Executing 15e78 : strb r3,[ip,r2] 
-> Executing 15e7c : ldr r1,[r0] 
-> Executing 15e80 : ldrb r3,[ip,r1] 
-> Executing 15e84 : eor r3,r6,r3 
-> Executing 15e88 : strb r3,[ip,r1] 
-> Executing 15e8c : ldr r2,[r0] 
-> Executing 15e90 : ldrb r3,[ip,r2] 
-> Executing 15e94 : eor r3,r5,r3 
-> Executing 15e98 : strb r3,[ip,r2] 
-> Executing 15e9c : ldr r1,[r0] 
-> Executing 15ea0 : ldrb r3,[ip,r1] 
-> Executing 15ea4 : eor r3,r4,r3 
-> Executing 15ea8 : strb r3,[ip,r1] 
-> Executing 15eac : ldrh r2,[r0,#4] 
-> Executing 15eb0 : add ip,ip,#1 
-> Executing 15eb4 : cmp r2,ip 
-> Executing 15eb8 : b #0x15e6c 
	-> Direct Jump to 89708 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000019 #x7fffffff) (bvslt #x00000019 #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000019 #x7fffffff) (bvslt #x00000019 #x80000001))))))UNSAT
	-> Start Jumping from 15eb8 --> 15e6c
-> Executing 15e6c : ldr r2,[r0] 
-> Executing 15e70 : ldrb r3,[ip,r2] 
-> Executing 15e74 : eor r3,lr,r3 
-> Executing 15e78 : strb r3,[ip,r2] 
-> Executing 15e7c : ldr r1,[r0] 
-> Executing 15e80 : ldrb r3,[ip,r1] 
-> Executing 15e84 : eor r3,r6,r3 
-> Executing 15e88 : strb r3,[ip,r1] 
-> Executing 15e8c : ldr r2,[r0] 
-> Executing 15e90 : ldrb r3,[ip,r2] 
-> Executing 15e94 : eor r3,r5,r3 
-> Executing 15e98 : strb r3,[ip,r2] 
-> Executing 15e9c : ldr r1,[r0] 
-> Executing 15ea0 : ldrb r3,[ip,r1] 
-> Executing 15ea4 : eor r3,r4,r3 
-> Executing 15ea8 : strb r3,[ip,r1] 
-> Executing 15eac : ldrh r2,[r0,#4] 
-> Executing 15eb0 : add ip,ip,#1 
-> Executing 15eb4 : cmp r2,ip 
-> Executing 15eb8 : b #0x15e6c 
	-> Direct Jump to 89708 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000018 #x7fffffff) (bvslt #x00000018 #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000018 #x7fffffff) (bvslt #x00000018 #x80000001))))))UNSAT
	-> Start Jumping from 15eb8 --> 15e6c
-> Executing 15e6c : ldr r2,[r0] 
-> Executing 15e70 : ldrb r3,[ip,r2] 
-> Executing 15e74 : eor r3,lr,r3 
-> Executing 15e78 : strb r3,[ip,r2] 
-> Executing 15e7c : ldr r1,[r0] 
-> Executing 15e80 : ldrb r3,[ip,r1] 
-> Executing 15e84 : eor r3,r6,r3 
-> Executing 15e88 : strb r3,[ip,r1] 
-> Executing 15e8c : ldr r2,[r0] 
-> Executing 15e90 : ldrb r3,[ip,r2] 
-> Executing 15e94 : eor r3,r5,r3 
-> Executing 15e98 : strb r3,[ip,r2] 
-> Executing 15e9c : ldr r1,[r0] 
-> Executing 15ea0 : ldrb r3,[ip,r1] 
-> Executing 15ea4 : eor r3,r4,r3 
-> Executing 15ea8 : strb r3,[ip,r1] 
-> Executing 15eac : ldrh r2,[r0,#4] 
-> Executing 15eb0 : add ip,ip,#1 
-> Executing 15eb4 : cmp r2,ip 
-> Executing 15eb8 : b #0x15e6c 
	-> Direct Jump to 89708 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000017 #x7fffffff) (bvslt #x00000017 #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000017 #x7fffffff) (bvslt #x00000017 #x80000001))))))UNSAT
	-> Start Jumping from 15eb8 --> 15e6c
-> Executing 15e6c : ldr r2,[r0] 
-> Executing 15e70 : ldrb r3,[ip,r2] 
-> Executing 15e74 : eor r3,lr,r3 
-> Executing 15e78 : strb r3,[ip,r2] 
-> Executing 15e7c : ldr r1,[r0] 
-> Executing 15e80 : ldrb r3,[ip,r1] 
-> Executing 15e84 : eor r3,r6,r3 
-> Executing 15e88 : strb r3,[ip,r1] 
-> Executing 15e8c : ldr r2,[r0] 
-> Executing 15e90 : ldrb r3,[ip,r2] 
-> Executing 15e94 : eor r3,r5,r3 
-> Executing 15e98 : strb r3,[ip,r2] 
-> Executing 15e9c : ldr r1,[r0] 
-> Executing 15ea0 : ldrb r3,[ip,r1] 
-> Executing 15ea4 : eor r3,r4,r3 
-> Executing 15ea8 : strb r3,[ip,r1] 
-> Executing 15eac : ldrh r2,[r0,#4] 
-> Executing 15eb0 : add ip,ip,#1 
-> Executing 15eb4 : cmp r2,ip 
-> Executing 15eb8 : b #0x15e6c 
	-> Direct Jump to 89708 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000016 #x7fffffff) (bvslt #x00000016 #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000016 #x7fffffff) (bvslt #x00000016 #x80000001))))))UNSAT
	-> Start Jumping from 15eb8 --> 15e6c
-> Executing 15e6c : ldr r2,[r0] 
-> Executing 15e70 : ldrb r3,[ip,r2] 
-> Executing 15e74 : eor r3,lr,r3 
-> Executing 15e78 : strb r3,[ip,r2] 
-> Executing 15e7c : ldr r1,[r0] 
-> Executing 15e80 : ldrb r3,[ip,r1] 
-> Executing 15e84 : eor r3,r6,r3 
-> Executing 15e88 : strb r3,[ip,r1] 
-> Executing 15e8c : ldr r2,[r0] 
-> Executing 15e90 : ldrb r3,[ip,r2] 
-> Executing 15e94 : eor r3,r5,r3 
-> Executing 15e98 : strb r3,[ip,r2] 
-> Executing 15e9c : ldr r1,[r0] 
-> Executing 15ea0 : ldrb r3,[ip,r1] 
-> Executing 15ea4 : eor r3,r4,r3 
-> Executing 15ea8 : strb r3,[ip,r1] 
-> Executing 15eac : ldrh r2,[r0,#4] 
-> Executing 15eb0 : add ip,ip,#1 
-> Executing 15eb4 : cmp r2,ip 
-> Executing 15eb8 : b #0x15e6c 
	-> Direct Jump to 89708 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000015 #x7fffffff) (bvslt #x00000015 #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000015 #x7fffffff) (bvslt #x00000015 #x80000001))))))UNSAT
	-> Start Jumping from 15eb8 --> 15e6c
-> Executing 15e6c : ldr r2,[r0] 
-> Executing 15e70 : ldrb r3,[ip,r2] 
-> Executing 15e74 : eor r3,lr,r3 
-> Executing 15e78 : strb r3,[ip,r2] 
-> Executing 15e7c : ldr r1,[r0] 
-> Executing 15e80 : ldrb r3,[ip,r1] 
-> Executing 15e84 : eor r3,r6,r3 
-> Executing 15e88 : strb r3,[ip,r1] 
-> Executing 15e8c : ldr r2,[r0] 
-> Executing 15e90 : ldrb r3,[ip,r2] 
-> Executing 15e94 : eor r3,r5,r3 
-> Executing 15e98 : strb r3,[ip,r2] 
-> Executing 15e9c : ldr r1,[r0] 
-> Executing 15ea0 : ldrb r3,[ip,r1] 
-> Executing 15ea4 : eor r3,r4,r3 
-> Executing 15ea8 : strb r3,[ip,r1] 
-> Executing 15eac : ldrh r2,[r0,#4] 
-> Executing 15eb0 : add ip,ip,#1 
-> Executing 15eb4 : cmp r2,ip 
-> Executing 15eb8 : b #0x15e6c 
	-> Direct Jump to 89708 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000014 #x7fffffff) (bvslt #x00000014 #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000014 #x7fffffff) (bvslt #x00000014 #x80000001))))))UNSAT
	-> Start Jumping from 15eb8 --> 15e6c
-> Executing 15e6c : ldr r2,[r0] 
-> Executing 15e70 : ldrb r3,[ip,r2] 
-> Executing 15e74 : eor r3,lr,r3 
-> Executing 15e78 : strb r3,[ip,r2] 
-> Executing 15e7c : ldr r1,[r0] 
-> Executing 15e80 : ldrb r3,[ip,r1] 
-> Executing 15e84 : eor r3,r6,r3 
-> Executing 15e88 : strb r3,[ip,r1] 
-> Executing 15e8c : ldr r2,[r0] 
-> Executing 15e90 : ldrb r3,[ip,r2] 
-> Executing 15e94 : eor r3,r5,r3 
-> Executing 15e98 : strb r3,[ip,r2] 
-> Executing 15e9c : ldr r1,[r0] 
-> Executing 15ea0 : ldrb r3,[ip,r1] 
-> Executing 15ea4 : eor r3,r4,r3 
-> Executing 15ea8 : strb r3,[ip,r1] 
-> Executing 15eac : ldrh r2,[r0,#4] 
-> Executing 15eb0 : add ip,ip,#1 
-> Executing 15eb4 : cmp r2,ip 
-> Executing 15eb8 : b #0x15e6c 
	-> Direct Jump to 89708 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000013 #x7fffffff) (bvslt #x00000013 #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000013 #x7fffffff) (bvslt #x00000013 #x80000001))))))UNSAT
	-> Start Jumping from 15eb8 --> 15e6c
-> Executing 15e6c : ldr r2,[r0] 
-> Executing 15e70 : ldrb r3,[ip,r2] 
-> Executing 15e74 : eor r3,lr,r3 
-> Executing 15e78 : strb r3,[ip,r2] 
-> Executing 15e7c : ldr r1,[r0] 
-> Executing 15e80 : ldrb r3,[ip,r1] 
-> Executing 15e84 : eor r3,r6,r3 
-> Executing 15e88 : strb r3,[ip,r1] 
-> Executing 15e8c : ldr r2,[r0] 
-> Executing 15e90 : ldrb r3,[ip,r2] 
-> Executing 15e94 : eor r3,r5,r3 
-> Executing 15e98 : strb r3,[ip,r2] 
-> Executing 15e9c : ldr r1,[r0] 
-> Executing 15ea0 : ldrb r3,[ip,r1] 
-> Executing 15ea4 : eor r3,r4,r3 
-> Executing 15ea8 : strb r3,[ip,r1] 
-> Executing 15eac : ldrh r2,[r0,#4] 
-> Executing 15eb0 : add ip,ip,#1 
-> Executing 15eb4 : cmp r2,ip 
-> Executing 15eb8 : b #0x15e6c 
	-> Direct Jump to 89708 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000012 #x7fffffff) (bvslt #x00000012 #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000012 #x7fffffff) (bvslt #x00000012 #x80000001))))))UNSAT
	-> Start Jumping from 15eb8 --> 15e6c
	-> Loop limitation exceeded, break.
-> Executing 15ebc : pop {r4,r5,r6,lr} 
-> Executing 15ec0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 73276
	-> Start Jumping from 15ec0 --> 11e3c
-> Executing 11e3c : add r1,sp,#0x540 
-> Executing 11e40 : mov r0,#2 
-> Executing 11e44 : bl #0x15d68 
	-> Direct Jump to 89448 if null 
	 ==+ Call to: table_retrieve_val
	-> Start Jumping from 11e44 --> 15d68
-> Executing 15d68 : ldr r2,[pc,#0x18] 
-> Executing 15d6c : lsl r0,r0,#3 
-> Executing 15d70 : add r3,r0,r2 
-> Executing 15d74 : cmp r1,#0 
-> Executing 15d78 : b 89464-2 
	-> Direct Jump to 89464-2 if NE 
	-> Checking path constrains by Z3 ...  2 #x7fffffff) (bvslt #x00000012 #x80000001))))) (not (= #xbefffbd8 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  ffffff) (bvslt #x00000012 #x80000001))))) (not (not (= #xbefffbd8 #x00000000))))UNSAT
	-> Start Jumping from 15d78 --> 15d78
-> Executing 15d78 : ldrh r3,[r3,#4] 
-> Executing 15d78+2 : b 0x15d7c 
	-> Direct Jump to 89468 if null 
	-> Start Jumping from 15d78+2 --> 15d7c
-> Executing 15d7c : ldr r0,[r0,r2] 
-> Executing 15d80 : b 89472-2 
	-> Direct Jump to 89472-2 if NE 
	-> Checking path constrains by Z3 ...  x80000001))))) (not (= #xbefffbd8 #x00000000))) (not (= #xbefffbd8 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  001))))) (not (= #xbefffbd8 #x00000000))) (not (not (= #xbefffbd8 #x00000000))))UNSAT
	-> Start Jumping from 15d80 --> 15d80
-> Executing 15d80 : str r3,[r1] 
-> Executing 15d80+2 : b 0x15d84 
	-> Direct Jump to 89476 if null 
	-> Start Jumping from 15d80+2 --> 15d84
-> Executing 15d84 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 73288
	-> Start Jumping from 15d84 --> 11e48
-> Executing 11e48 : ldr r2,[sp,#0x540] 
-> Executing 11e4c : mov r1,r0 
-> Executing 11e50 : mov r0,#1 
-> Executing 11e54 : bl #0x1b610 
	-> Direct Jump to 112144 if null 
	 === Call to library function: write
-> Executing 11e58 : mov r0,#1 
-> Executing 11e5c : ldr r1,[pc,#0x5a0] 
-> Executing 11e60 : mov r2,r0 
-> Executing 11e64 : bl #0x1b610 
	-> Direct Jump to 112144 if null 
	 === Call to library function: write
-> Executing 11e68 : mov r0,#2 
-> Executing 11e6c : bl #0x15d8c 
	-> Direct Jump to 89484 if null 
	 ==+ Call to: table_lock_val
	-> Start Jumping from 11e6c --> 15d8c
-> Executing 15d8c : ldr r3,[pc,#0x90] 
-> Executing 15d90 : ldr r2,[pc,#0x90] 
-> Executing 15d94 : lsl r0,r0,#3 
-> Executing 15d98 : add r0,r0,r3 
-> Executing 15d9c : ldr r1,[r2] 
-> Executing 15da0 : ldrh r3,[r0,#4] 
-> Executing 15da4 : lsr r2,r1,#8 
-> Executing 15da8 : cmp r3,#0 
-> Executing 15dac : lsr r3,r1,#0x10 
-> Executing 15db0 : push {r4,r5,r6,lr} 
-> Executing 15db4 : and r6,r2,#0xff 
-> Executing 15db8 : and r5,r3,#0xff 
-> Executing 15dbc : lsr r4,r1,#0x18 
-> Executing 15dc0 : and lr,r1,#0xff 
-> Executing 15dc4 : b #0x15e1c 
	-> Direct Jump to 89628 if EQ 
	-> Checking path constrains by Z3 ...  fffbd8 #x00000000))) (not (= #xbefffbd8 #x00000000))) (= #x0000001d #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xbefffbd8 #x00000000))) (not (= #x0000001d #x00000000)))SAT
	-> Start Jumping from 15dc4 --> 15dc8
-> Executing 15dc8 : mov ip,#0 
-> Executing 15dcc : ldr r2,[r0] 
-> Executing 15dd0 : ldrb r3,[ip,r2] 
-> Executing 15dd4 : eor r3,lr,r3 
-> Executing 15dd8 : strb r3,[ip,r2] 
-> Executing 15ddc : ldr r1,[r0] 
-> Executing 15de0 : ldrb r3,[ip,r1] 
-> Executing 15de4 : eor r3,r6,r3 
-> Executing 15de8 : strb r3,[ip,r1] 
-> Executing 15dec : ldr r2,[r0] 
-> Executing 15df0 : ldrb r3,[ip,r2] 
-> Executing 15df4 : eor r3,r5,r3 
-> Executing 15df8 : strb r3,[ip,r2] 
-> Executing 15dfc : ldr r1,[r0] 
-> Executing 15e00 : ldrb r3,[ip,r1] 
-> Executing 15e04 : eor r3,r4,r3 
-> Executing 15e08 : strb r3,[ip,r1] 
-> Executing 15e0c : ldrh r2,[r0,#4] 
-> Executing 15e10 : add ip,ip,#1 
-> Executing 15e14 : cmp r2,ip 
-> Executing 15e18 : b #0x15dcc 
	-> Direct Jump to 89548 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x0000001c #x7fffffff) (bvslt #x0000001c #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x0000001c #x7fffffff) (bvslt #x0000001c #x80000001))))))UNSAT
	-> Start Jumping from 15e18 --> 15dcc
-> Executing 15dcc : ldr r2,[r0] 
-> Executing 15dd0 : ldrb r3,[ip,r2] 
-> Executing 15dd4 : eor r3,lr,r3 
-> Executing 15dd8 : strb r3,[ip,r2] 
-> Executing 15ddc : ldr r1,[r0] 
-> Executing 15de0 : ldrb r3,[ip,r1] 
-> Executing 15de4 : eor r3,r6,r3 
-> Executing 15de8 : strb r3,[ip,r1] 
-> Executing 15dec : ldr r2,[r0] 
-> Executing 15df0 : ldrb r3,[ip,r2] 
-> Executing 15df4 : eor r3,r5,r3 
-> Executing 15df8 : strb r3,[ip,r2] 
-> Executing 15dfc : ldr r1,[r0] 
-> Executing 15e00 : ldrb r3,[ip,r1] 
-> Executing 15e04 : eor r3,r4,r3 
-> Executing 15e08 : strb r3,[ip,r1] 
-> Executing 15e0c : ldrh r2,[r0,#4] 
-> Executing 15e10 : add ip,ip,#1 
-> Executing 15e14 : cmp r2,ip 
-> Executing 15e18 : b #0x15dcc 
	-> Direct Jump to 89548 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x0000001b #x7fffffff) (bvslt #x0000001b #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x0000001b #x7fffffff) (bvslt #x0000001b #x80000001))))))UNSAT
	-> Start Jumping from 15e18 --> 15dcc
-> Executing 15dcc : ldr r2,[r0] 
-> Executing 15dd0 : ldrb r3,[ip,r2] 
-> Executing 15dd4 : eor r3,lr,r3 
-> Executing 15dd8 : strb r3,[ip,r2] 
-> Executing 15ddc : ldr r1,[r0] 
-> Executing 15de0 : ldrb r3,[ip,r1] 
-> Executing 15de4 : eor r3,r6,r3 
-> Executing 15de8 : strb r3,[ip,r1] 
-> Executing 15dec : ldr r2,[r0] 
-> Executing 15df0 : ldrb r3,[ip,r2] 
-> Executing 15df4 : eor r3,r5,r3 
-> Executing 15df8 : strb r3,[ip,r2] 
-> Executing 15dfc : ldr r1,[r0] 
-> Executing 15e00 : ldrb r3,[ip,r1] 
-> Executing 15e04 : eor r3,r4,r3 
-> Executing 15e08 : strb r3,[ip,r1] 
-> Executing 15e0c : ldrh r2,[r0,#4] 
-> Executing 15e10 : add ip,ip,#1 
-> Executing 15e14 : cmp r2,ip 
-> Executing 15e18 : b #0x15dcc 
	-> Direct Jump to 89548 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x0000001a #x7fffffff) (bvslt #x0000001a #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x0000001a #x7fffffff) (bvslt #x0000001a #x80000001))))))UNSAT
	-> Start Jumping from 15e18 --> 15dcc
-> Executing 15dcc : ldr r2,[r0] 
-> Executing 15dd0 : ldrb r3,[ip,r2] 
-> Executing 15dd4 : eor r3,lr,r3 
-> Executing 15dd8 : strb r3,[ip,r2] 
-> Executing 15ddc : ldr r1,[r0] 
-> Executing 15de0 : ldrb r3,[ip,r1] 
-> Executing 15de4 : eor r3,r6,r3 
-> Executing 15de8 : strb r3,[ip,r1] 
-> Executing 15dec : ldr r2,[r0] 
-> Executing 15df0 : ldrb r3,[ip,r2] 
-> Executing 15df4 : eor r3,r5,r3 
-> Executing 15df8 : strb r3,[ip,r2] 
-> Executing 15dfc : ldr r1,[r0] 
-> Executing 15e00 : ldrb r3,[ip,r1] 
-> Executing 15e04 : eor r3,r4,r3 
-> Executing 15e08 : strb r3,[ip,r1] 
-> Executing 15e0c : ldrh r2,[r0,#4] 
-> Executing 15e10 : add ip,ip,#1 
-> Executing 15e14 : cmp r2,ip 
-> Executing 15e18 : b #0x15dcc 
	-> Direct Jump to 89548 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000019 #x7fffffff) (bvslt #x00000019 #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000019 #x7fffffff) (bvslt #x00000019 #x80000001))))))UNSAT
	-> Start Jumping from 15e18 --> 15dcc
-> Executing 15dcc : ldr r2,[r0] 
-> Executing 15dd0 : ldrb r3,[ip,r2] 
-> Executing 15dd4 : eor r3,lr,r3 
-> Executing 15dd8 : strb r3,[ip,r2] 
-> Executing 15ddc : ldr r1,[r0] 
-> Executing 15de0 : ldrb r3,[ip,r1] 
-> Executing 15de4 : eor r3,r6,r3 
-> Executing 15de8 : strb r3,[ip,r1] 
-> Executing 15dec : ldr r2,[r0] 
-> Executing 15df0 : ldrb r3,[ip,r2] 
-> Executing 15df4 : eor r3,r5,r3 
-> Executing 15df8 : strb r3,[ip,r2] 
-> Executing 15dfc : ldr r1,[r0] 
-> Executing 15e00 : ldrb r3,[ip,r1] 
-> Executing 15e04 : eor r3,r4,r3 
-> Executing 15e08 : strb r3,[ip,r1] 
-> Executing 15e0c : ldrh r2,[r0,#4] 
-> Executing 15e10 : add ip,ip,#1 
-> Executing 15e14 : cmp r2,ip 
-> Executing 15e18 : b #0x15dcc 
	-> Direct Jump to 89548 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000018 #x7fffffff) (bvslt #x00000018 #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000018 #x7fffffff) (bvslt #x00000018 #x80000001))))))UNSAT
	-> Start Jumping from 15e18 --> 15dcc
-> Executing 15dcc : ldr r2,[r0] 
-> Executing 15dd0 : ldrb r3,[ip,r2] 
-> Executing 15dd4 : eor r3,lr,r3 
-> Executing 15dd8 : strb r3,[ip,r2] 
-> Executing 15ddc : ldr r1,[r0] 
-> Executing 15de0 : ldrb r3,[ip,r1] 
-> Executing 15de4 : eor r3,r6,r3 
-> Executing 15de8 : strb r3,[ip,r1] 
-> Executing 15dec : ldr r2,[r0] 
-> Executing 15df0 : ldrb r3,[ip,r2] 
-> Executing 15df4 : eor r3,r5,r3 
-> Executing 15df8 : strb r3,[ip,r2] 
-> Executing 15dfc : ldr r1,[r0] 
-> Executing 15e00 : ldrb r3,[ip,r1] 
-> Executing 15e04 : eor r3,r4,r3 
-> Executing 15e08 : strb r3,[ip,r1] 
-> Executing 15e0c : ldrh r2,[r0,#4] 
-> Executing 15e10 : add ip,ip,#1 
-> Executing 15e14 : cmp r2,ip 
-> Executing 15e18 : b #0x15dcc 
	-> Direct Jump to 89548 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000017 #x7fffffff) (bvslt #x00000017 #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000017 #x7fffffff) (bvslt #x00000017 #x80000001))))))UNSAT
	-> Start Jumping from 15e18 --> 15dcc
-> Executing 15dcc : ldr r2,[r0] 
-> Executing 15dd0 : ldrb r3,[ip,r2] 
-> Executing 15dd4 : eor r3,lr,r3 
-> Executing 15dd8 : strb r3,[ip,r2] 
-> Executing 15ddc : ldr r1,[r0] 
-> Executing 15de0 : ldrb r3,[ip,r1] 
-> Executing 15de4 : eor r3,r6,r3 
-> Executing 15de8 : strb r3,[ip,r1] 
-> Executing 15dec : ldr r2,[r0] 
-> Executing 15df0 : ldrb r3,[ip,r2] 
-> Executing 15df4 : eor r3,r5,r3 
-> Executing 15df8 : strb r3,[ip,r2] 
-> Executing 15dfc : ldr r1,[r0] 
-> Executing 15e00 : ldrb r3,[ip,r1] 
-> Executing 15e04 : eor r3,r4,r3 
-> Executing 15e08 : strb r3,[ip,r1] 
-> Executing 15e0c : ldrh r2,[r0,#4] 
-> Executing 15e10 : add ip,ip,#1 
-> Executing 15e14 : cmp r2,ip 
-> Executing 15e18 : b #0x15dcc 
	-> Direct Jump to 89548 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000016 #x7fffffff) (bvslt #x00000016 #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000016 #x7fffffff) (bvslt #x00000016 #x80000001))))))UNSAT
	-> Start Jumping from 15e18 --> 15dcc
-> Executing 15dcc : ldr r2,[r0] 
-> Executing 15dd0 : ldrb r3,[ip,r2] 
-> Executing 15dd4 : eor r3,lr,r3 
-> Executing 15dd8 : strb r3,[ip,r2] 
-> Executing 15ddc : ldr r1,[r0] 
-> Executing 15de0 : ldrb r3,[ip,r1] 
-> Executing 15de4 : eor r3,r6,r3 
-> Executing 15de8 : strb r3,[ip,r1] 
-> Executing 15dec : ldr r2,[r0] 
-> Executing 15df0 : ldrb r3,[ip,r2] 
-> Executing 15df4 : eor r3,r5,r3 
-> Executing 15df8 : strb r3,[ip,r2] 
-> Executing 15dfc : ldr r1,[r0] 
-> Executing 15e00 : ldrb r3,[ip,r1] 
-> Executing 15e04 : eor r3,r4,r3 
-> Executing 15e08 : strb r3,[ip,r1] 
-> Executing 15e0c : ldrh r2,[r0,#4] 
-> Executing 15e10 : add ip,ip,#1 
-> Executing 15e14 : cmp r2,ip 
-> Executing 15e18 : b #0x15dcc 
	-> Direct Jump to 89548 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000015 #x7fffffff) (bvslt #x00000015 #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000015 #x7fffffff) (bvslt #x00000015 #x80000001))))))UNSAT
	-> Start Jumping from 15e18 --> 15dcc
-> Executing 15dcc : ldr r2,[r0] 
-> Executing 15dd0 : ldrb r3,[ip,r2] 
-> Executing 15dd4 : eor r3,lr,r3 
-> Executing 15dd8 : strb r3,[ip,r2] 
-> Executing 15ddc : ldr r1,[r0] 
-> Executing 15de0 : ldrb r3,[ip,r1] 
-> Executing 15de4 : eor r3,r6,r3 
-> Executing 15de8 : strb r3,[ip,r1] 
-> Executing 15dec : ldr r2,[r0] 
-> Executing 15df0 : ldrb r3,[ip,r2] 
-> Executing 15df4 : eor r3,r5,r3 
-> Executing 15df8 : strb r3,[ip,r2] 
-> Executing 15dfc : ldr r1,[r0] 
-> Executing 15e00 : ldrb r3,[ip,r1] 
-> Executing 15e04 : eor r3,r4,r3 
-> Executing 15e08 : strb r3,[ip,r1] 
-> Executing 15e0c : ldrh r2,[r0,#4] 
-> Executing 15e10 : add ip,ip,#1 
-> Executing 15e14 : cmp r2,ip 
-> Executing 15e18 : b #0x15dcc 
	-> Direct Jump to 89548 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000014 #x7fffffff) (bvslt #x00000014 #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000014 #x7fffffff) (bvslt #x00000014 #x80000001))))))UNSAT
	-> Start Jumping from 15e18 --> 15dcc
-> Executing 15dcc : ldr r2,[r0] 
-> Executing 15dd0 : ldrb r3,[ip,r2] 
-> Executing 15dd4 : eor r3,lr,r3 
-> Executing 15dd8 : strb r3,[ip,r2] 
-> Executing 15ddc : ldr r1,[r0] 
-> Executing 15de0 : ldrb r3,[ip,r1] 
-> Executing 15de4 : eor r3,r6,r3 
-> Executing 15de8 : strb r3,[ip,r1] 
-> Executing 15dec : ldr r2,[r0] 
-> Executing 15df0 : ldrb r3,[ip,r2] 
-> Executing 15df4 : eor r3,r5,r3 
-> Executing 15df8 : strb r3,[ip,r2] 
-> Executing 15dfc : ldr r1,[r0] 
-> Executing 15e00 : ldrb r3,[ip,r1] 
-> Executing 15e04 : eor r3,r4,r3 
-> Executing 15e08 : strb r3,[ip,r1] 
-> Executing 15e0c : ldrh r2,[r0,#4] 
-> Executing 15e10 : add ip,ip,#1 
-> Executing 15e14 : cmp r2,ip 
-> Executing 15e18 : b #0x15dcc 
	-> Direct Jump to 89548 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000013 #x7fffffff) (bvslt #x00000013 #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000013 #x7fffffff) (bvslt #x00000013 #x80000001))))))UNSAT
	-> Start Jumping from 15e18 --> 15dcc
-> Executing 15dcc : ldr r2,[r0] 
-> Executing 15dd0 : ldrb r3,[ip,r2] 
-> Executing 15dd4 : eor r3,lr,r3 
-> Executing 15dd8 : strb r3,[ip,r2] 
-> Executing 15ddc : ldr r1,[r0] 
-> Executing 15de0 : ldrb r3,[ip,r1] 
-> Executing 15de4 : eor r3,r6,r3 
-> Executing 15de8 : strb r3,[ip,r1] 
-> Executing 15dec : ldr r2,[r0] 
-> Executing 15df0 : ldrb r3,[ip,r2] 
-> Executing 15df4 : eor r3,r5,r3 
-> Executing 15df8 : strb r3,[ip,r2] 
-> Executing 15dfc : ldr r1,[r0] 
-> Executing 15e00 : ldrb r3,[ip,r1] 
-> Executing 15e04 : eor r3,r4,r3 
-> Executing 15e08 : strb r3,[ip,r1] 
-> Executing 15e0c : ldrh r2,[r0,#4] 
-> Executing 15e10 : add ip,ip,#1 
-> Executing 15e14 : cmp r2,ip 
-> Executing 15e18 : b #0x15dcc 
	-> Direct Jump to 89548 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000012 #x7fffffff) (bvslt #x00000012 #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000012 #x7fffffff) (bvslt #x00000012 #x80000001))))))UNSAT
	-> Start Jumping from 15e18 --> 15dcc
	-> Loop limitation exceeded, break.
-> Executing 15e1c : pop {r4,r5,r6,lr} 
-> Executing 15e20 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 73328
	-> Start Jumping from 15e20 --> 11e70
-> Executing 11e70 : bl #0xa590 
	-> Direct Jump to 42384 if null 
	 ==+ Call to: attack_init
	-> Start Jumping from 11e70 --> a590
-> Executing a590 : push {r4,r5,r6,r7,lr} 
-> Executing a594 : mov r1,#8 
-> Executing a598 : sub sp,sp,#4 
-> Executing a59c : mov r0,#1 
-> Executing a5a0 : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a5a4 : ldr r4,[pc,#0x390] 
-> Executing a5a8 : ldrb r1,[r4] 
-> Executing a5ac : ldr r6,[pc,#0x38c] 
-> Executing a5b0 : ldr r2,[pc,#0x38c] 
-> Executing a5b4 : mov r5,r0 
-> Executing a5b8 : mov r3,#0 
-> Executing a5bc : add r1,r1,#1 
-> Executing a5c0 : ldr r0,[r6] 
-> Executing a5c4 : str r2,[r5] 
-> Executing a5c8 : strb r3,[r5,#4] 
-> Executing a5cc : lsl r1,r1,#2 
-> Executing a5d0 : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a5d4 : ldrb r3,[r4] 
-> Executing a5d8 : mov r2,r0 
-> Executing a5dc : str r5,[r0,r3,lsl #2] 
-> Executing a5e0 : mov r1,#8 
-> Executing a5e4 : add r3,r3,#1 
-> Executing a5e8 : mov r0,#1 
-> Executing a5ec : str r2,[r6] 
-> Executing a5f0 : strb r3,[r4] 
-> Executing a5f4 : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a5f8 : ldrb r1,[r4] 
-> Executing a5fc : ldr r3,[pc,#0x344] 
-> Executing a600 : mov r7,#1 
-> Executing a604 : mov r5,r0 
-> Executing a608 : add r1,r1,#1 
-> Executing a60c : ldr r0,[r6] 
-> Executing a610 : str r3,[r5] 
-> Executing a614 : strb r7,[r5,#4] 
-> Executing a618 : lsl r1,r1,#2 
-> Executing a61c : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a620 : ldrb r3,[r4] 
-> Executing a624 : mov r2,r0 
-> Executing a628 : str r5,[r0,r3,lsl #2] 
-> Executing a62c : mov r1,#8 
-> Executing a630 : add r3,r3,r7 
-> Executing a634 : mov r0,r7 
-> Executing a638 : strb r3,[r4] 
-> Executing a63c : str r2,[r6] 
-> Executing a640 : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a644 : ldrb r1,[r4] 
-> Executing a648 : ldr r2,[pc,#0x2fc] 
-> Executing a64c : mov r5,r0 
-> Executing a650 : mov r3,#2 
-> Executing a654 : add r1,r1,r7 
-> Executing a658 : ldr r0,[r6] 
-> Executing a65c : str r2,[r5] 
-> Executing a660 : strb r3,[r5,#4] 
-> Executing a664 : lsl r1,r1,#2 
-> Executing a668 : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a66c : ldrb r3,[r4] 
-> Executing a670 : mov r2,r0 
-> Executing a674 : str r5,[r0,r3,lsl #2] 
-> Executing a678 : mov r1,#8 
-> Executing a67c : add r3,r3,r7 
-> Executing a680 : mov r0,r7 
-> Executing a684 : strb r3,[r4] 
-> Executing a688 : str r2,[r6] 
-> Executing a68c : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a690 : ldrb r1,[r4] 
-> Executing a694 : ldr r2,[pc,#0x2b4] 
-> Executing a698 : mov r5,r0 
-> Executing a69c : mov r3,#3 
-> Executing a6a0 : add r1,r1,r7 
-> Executing a6a4 : ldr r0,[r6] 
-> Executing a6a8 : str r2,[r5] 
-> Executing a6ac : strb r3,[r5,#4] 
-> Executing a6b0 : lsl r1,r1,#2 
-> Executing a6b4 : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a6b8 : ldrb r3,[r4] 
-> Executing a6bc : mov r2,r0 
-> Executing a6c0 : str r5,[r0,r3,lsl #2] 
-> Executing a6c4 : mov r1,#8 
-> Executing a6c8 : add r3,r3,r7 
-> Executing a6cc : mov r0,r7 
-> Executing a6d0 : strb r3,[r4] 
-> Executing a6d4 : str r2,[r6] 
-> Executing a6d8 : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a6dc : ldrb r1,[r4] 
-> Executing a6e0 : ldr r2,[pc,#0x26c] 
-> Executing a6e4 : mov r5,r0 
-> Executing a6e8 : mov r3,#4 
-> Executing a6ec : add r1,r1,r7 
-> Executing a6f0 : ldr r0,[r6] 
-> Executing a6f4 : str r2,[r5] 
-> Executing a6f8 : strb r3,[r5,#4] 
-> Executing a6fc : lsl r1,r1,#2 
-> Executing a700 : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a704 : ldrb r3,[r4] 
-> Executing a708 : mov r2,r0 
-> Executing a70c : str r5,[r0,r3,lsl #2] 
-> Executing a710 : mov r1,#8 
-> Executing a714 : add r3,r3,r7 
-> Executing a718 : mov r0,r7 
-> Executing a71c : strb r3,[r4] 
-> Executing a720 : str r2,[r6] 
-> Executing a724 : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a728 : ldrb r1,[r4] 
-> Executing a72c : ldr r2,[pc,#0x224] 
-> Executing a730 : mov r5,r0 
-> Executing a734 : mov r3,#5 
-> Executing a738 : add r1,r1,r7 
-> Executing a73c : ldr r0,[r6] 
-> Executing a740 : str r2,[r5] 
-> Executing a744 : strb r3,[r5,#4] 
-> Executing a748 : lsl r1,r1,#2 
-> Executing a74c : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a750 : ldrb r3,[r4] 
-> Executing a754 : mov r2,r0 
-> Executing a758 : str r5,[r0,r3,lsl #2] 
-> Executing a75c : mov r1,#8 
-> Executing a760 : add r3,r3,r7 
-> Executing a764 : mov r0,r7 
-> Executing a768 : strb r3,[r4] 
-> Executing a76c : str r2,[r6] 
-> Executing a770 : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a774 : ldrb r1,[r4] 
-> Executing a778 : ldr r2,[pc,#0x1dc] 
-> Executing a77c : mov r5,r0 
-> Executing a780 : mov r3,#6 
-> Executing a784 : add r1,r1,r7 
-> Executing a788 : ldr r0,[r6] 
-> Executing a78c : str r2,[r5] 
-> Executing a790 : strb r3,[r5,#4] 
-> Executing a794 : lsl r1,r1,#2 
-> Executing a798 : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a79c : ldrb r3,[r4] 
-> Executing a7a0 : mov r2,r0 
-> Executing a7a4 : str r5,[r0,r3,lsl #2] 
-> Executing a7a8 : mov r1,#8 
-> Executing a7ac : add r3,r3,r7 
-> Executing a7b0 : mov r0,r7 
-> Executing a7b4 : strb r3,[r4] 
-> Executing a7b8 : str r2,[r6] 
-> Executing a7bc : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a7c0 : ldrb r1,[r4] 
-> Executing a7c4 : ldr r2,[pc,#0x194] 
-> Executing a7c8 : mov r5,r0 
-> Executing a7cc : mov r3,#7 
-> Executing a7d0 : add r1,r1,r7 
-> Executing a7d4 : ldr r0,[r6] 
-> Executing a7d8 : str r2,[r5] 
-> Executing a7dc : strb r3,[r5,#4] 
-> Executing a7e0 : lsl r1,r1,#2 
-> Executing a7e4 : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a7e8 : ldrb r3,[r4] 
-> Executing a7ec : mov r2,r0 
-> Executing a7f0 : str r5,[r0,r3,lsl #2] 
-> Executing a7f4 : mov r1,#8 
-> Executing a7f8 : add r3,r3,r7 
-> Executing a7fc : mov r0,r7 
-> Executing a800 : strb r3,[r4] 
-> Executing a804 : str r2,[r6] 
-> Executing a808 : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a80c : ldrb r1,[r4] 
-> Executing a810 : ldr r2,[pc,#0x14c] 
-> Executing a814 : mov r5,r0 
-> Executing a818 : mov r3,#9 
-> Executing a81c : add r1,r1,r7 
-> Executing a820 : ldr r0,[r6] 
-> Executing a824 : str r2,[r5] 
-> Executing a828 : strb r3,[r5,#4] 
-> Executing a82c : lsl r1,r1,#2 
-> Executing a830 : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a834 : ldrb r3,[r4] 
-> Executing a838 : mov r2,r0 
-> Executing a83c : str r5,[r0,r3,lsl #2] 
-> Executing a840 : mov r1,#8 
-> Executing a844 : add r3,r3,r7 
-> Executing a848 : mov r0,r7 
-> Executing a84c : strb r3,[r4] 
-> Executing a850 : str r2,[r6] 
-> Executing a854 : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a858 : ldrb r1,[r4] 
-> Executing a85c : ldr r2,[pc,#0x104] 
-> Executing a860 : mov r5,r0 
-> Executing a864 : mov r3,#0xa 
-> Executing a868 : add r1,r1,r7 
-> Executing a86c : ldr r0,[r6] 
-> Executing a870 : str r2,[r5] 
-> Executing a874 : strb r3,[r5,#4] 
-> Executing a878 : lsl r1,r1,#2 
-> Executing a87c : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a880 : ldrb r3,[r4] 
-> Executing a884 : mov r2,r0 
-> Executing a888 : str r5,[r0,r3,lsl #2] 
-> Executing a88c : mov r1,#8 
-> Executing a890 : add r3,r3,r7 
-> Executing a894 : mov r0,r7 
-> Executing a898 : strb r3,[r4] 
-> Executing a89c : str r2,[r6] 
-> Executing a8a0 : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a8a4 : ldrb r1,[r4] 
-> Executing a8a8 : ldr r2,[pc,#0xbc] 
-> Executing a8ac : mov r5,r0 
-> Executing a8b0 : mov r3,#0xb 
-> Executing a8b4 : add r1,r1,r7 
-> Executing a8b8 : ldr r0,[r6] 
-> Executing a8bc : str r2,[r5] 
-> Executing a8c0 : strb r3,[r5,#4] 
-> Executing a8c4 : lsl r1,r1,#2 
-> Executing a8c8 : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a8cc : ldrb r3,[r4] 
-> Executing a8d0 : mov r2,r0 
-> Executing a8d4 : str r5,[r0,r3,lsl #2] 
-> Executing a8d8 : mov r1,#8 
-> Executing a8dc : add r3,r3,r7 
-> Executing a8e0 : mov r0,r7 
-> Executing a8e4 : strb r3,[r4] 
-> Executing a8e8 : str r2,[r6] 
-> Executing a8ec : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a8f0 : ldrb r1,[r4] 
-> Executing a8f4 : ldr r2,[pc,#0x74] 
-> Executing a8f8 : mov r5,r0 
-> Executing a8fc : mov r3,#8 
-> Executing a900 : add r1,r1,r7 
-> Executing a904 : ldr r0,[r6] 
-> Executing a908 : str r2,[r5] 
-> Executing a90c : strb r3,[r5,#4] 
-> Executing a910 : lsl r1,r1,#2 
-> Executing a914 : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a918 : ldrb r3,[r4] 
-> Executing a91c : str r0,[r6] 
-> Executing a920 : str r5,[r0,r3,lsl #2] 
-> Executing a924 : add r2,r3,r7 
-> Executing a928 : mov r0,r7 
-> Executing a92c : strb r2,[r4] 
-> Executing a930 : add sp,sp,#4 
-> Executing a934 : pop {r4,r5,r6,r7,lr} 
-> Executing a938 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 73332
	-> Start Jumping from a938 --> 11e74
-> Executing 11e74 : bl #0xee18 
	-> Direct Jump to 60952 if null 
	 ==+ Call to: killer_init
	-> Start Jumping from 11e74 --> ee18
-> Executing ee18 : push {r4,r5,r6,r7,r8,sb,sl,fp,lr} 
-> Executing ee1c : sub sp,sp,#0x2300 
-> Executing ee20 : sub sp,sp,#4 
-> Executing ee24 : mov r0,#0 
-> Executing ee28 : bl #0x18218 
	-> Direct Jump to 98840 if null 
	 === Call to library function: time
-> Executing ee2c : mov r7,r0 
-> Executing ee30 : bl #0x1adfc 
	-> Direct Jump to 110076 if null 
	 === Call to library function: fork
	 === Fork a new process. Run parent process:
-> Executing ee34 : cmn r0,#1 
-> Executing ee38 : b 60984-2 
	-> Direct Jump to 60984-2 if NE 
	-> Checking path constrains by Z3 ...  2 #x7fffffff) (bvslt #x00000012 #x80000001))))) (not (= #x00000019 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  ffffff) (bvslt #x00000012 #x80000001))))) (not (not (= #x00000019 #x00000000))))UNSAT
	-> Start Jumping from ee38 --> ee38
-> Executing ee38 : mov r3,#0 
-> Executing ee38+2 : b 0xee3c 
	-> Direct Jump to 60988 if null 
	-> Start Jumping from ee38+2 --> ee3c
-> Executing ee3c : b 60988-2 
	-> Direct Jump to 60988-2 if EQ 
	-> Checking path constrains by Z3 ...  0012 #x80000001))))) (not (= #x00000019 #x00000000))) (= #x00000019 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  x80000001))))) (not (= #x00000019 #x00000000))) (not (= #x00000019 #x00000000)))SAT
	-> Start Jumping from ee3c --> ee40
-> Executing ee40 : cmp r0,#0 
-> Executing ee44 : b 60996-2 
	-> Direct Jump to 60996-2 if LE 
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000018 #x7fffffff) (bvslt #x00000018 #x80000001))))))UNSAT
	-> Checking path constrains by Z3 ...  x00000000) (or (bvsgt #x00000018 #x7fffffff) (bvslt #x00000018 #x80000001)))))))SAT
	-> Start Jumping from ee44 --> ee48
-> Executing ee48 : b 61000-2 
	-> Direct Jump to 61000-2 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000018 #x7fffffff) (bvslt #x00000018 #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000018 #x7fffffff) (bvslt #x00000018 #x80000001))))))UNSAT
	-> Start Jumping from ee48 --> ee48
-> Executing ee48 : orr r5,r3,#1 
-> Executing ee48+2 : b 0xee4c 
	-> Direct Jump to 61004 if null 
	-> Start Jumping from ee48+2 --> ee4c
-> Executing ee4c : ldr r3,[pc,#0x83c] 
-> Executing ee50 : cmp r5,#0 
-> Executing ee54 : str r0,[r3] 
-> Executing ee58 : b #0xee6c 
	-> Direct Jump to 61036 if EQ 
	-> Checking path constrains by Z3 ...  0000018 #x7fffffff) (bvslt #x00000018 #x80000001))))) (= #x00000001 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  8 #x7fffffff) (bvslt #x00000018 #x80000001))))) (not (= #x00000001 #x00000000)))SAT
	-> Start Jumping from ee58 --> ee5c
-> Executing ee5c : add sp,sp,#0x304 
-> Executing ee60 : add sp,sp,#0x2000 
-> Executing ee64 : pop {r4,r5,r6,r7,r8,sb,sl,fp,lr} 
-> Executing ee68 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 73336
	-> Start Jumping from ee68 --> 11e78
-> Executing 11e78 : bl #0x11c90 
	-> Direct Jump to 72848 if null 
	 ==+ Call to: watchdog_maintain
	-> Start Jumping from 11e78 --> 11c90
-> Executing 11c90 : push {r4,r5,lr} 
-> Executing 11c94 : sub sp,sp,#0xc 
-> Executing 11c98 : bl #0x1adfc 
	-> Direct Jump to 110076 if null 
	 === Call to library function: fork
	 === Fork a new process. Run parent process:
-> Executing 11c9c : cmn r0,#1 
-> Executing 11ca0 : b 72864-2 
	-> Direct Jump to 72864-2 if NE 
	-> Checking path constrains by Z3 ...  (not (= #x00000032 #x00000000))SAT
	-> Checking path constrains by Z3 ...  (not (not (= #x00000032 #x00000000)))UNSAT
	-> Start Jumping from 11ca0 --> 11ca0
-> Executing 11ca0 : mov r3,#0 
-> Executing 11ca0+2 : b 0x11ca4 
	-> Direct Jump to 72868 if null 
	-> Start Jumping from 11ca0+2 --> 11ca4
-> Executing 11ca4 : b 72868-2 
	-> Direct Jump to 72868-2 if EQ 
	-> Checking path constrains by Z3 ...  (and (not (= #x00000032 #x00000000)) (= #x00000032 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  (and (not (= #x00000032 #x00000000)) (not (= #x00000032 #x00000000)))SAT
	-> Start Jumping from 11ca4 --> 11ca8
-> Executing 11ca8 : cmp r0,#0 
-> Executing 11cac : b 72876-2 
	-> Direct Jump to 72876-2 if LE 
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000031 #x7fffffff) (bvslt #x00000031 #x80000001))))))UNSAT
	-> Checking path constrains by Z3 ...  x00000000) (or (bvsgt #x00000031 #x7fffffff) (bvslt #x00000031 #x80000001)))))))SAT
	-> Start Jumping from 11cac --> 11cb0
-> Executing 11cb0 : b 72880-2 
	-> Direct Jump to 72880-2 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000031 #x7fffffff) (bvslt #x00000031 #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000031 #x7fffffff) (bvslt #x00000031 #x80000001))))))UNSAT
	-> Start Jumping from 11cb0 --> 11cb0
-> Executing 11cb0 : orr r5,r3,#1 
-> Executing 11cb0+2 : b 0x11cb4 
	-> Direct Jump to 72884 if null 
	-> Start Jumping from 11cb0+2 --> 11cb4
-> Executing 11cb4 : ldr r3,[pc,#0xc0] 
-> Executing 11cb8 : cmp r5,#0 
-> Executing 11cbc : str r0,[r3] 
-> Executing 11cc0 : b #0x11cd0 
	-> Direct Jump to 72912 if EQ 
	-> Checking path constrains by Z3 ...  0000031 #x7fffffff) (bvslt #x00000031 #x80000001))))) (= #x00000001 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  1 #x7fffffff) (bvslt #x00000031 #x80000001))))) (not (= #x00000001 #x00000000)))SAT
	-> Start Jumping from 11cc0 --> 11cc4
-> Executing 11cc4 : add sp,sp,#0xc 
-> Executing 11cc8 : pop {r4,r5,lr} 
-> Executing 11ccc : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 73340
	-> Start Jumping from 11ccc --> 11e7c
-> Executing 11e7c : bl #0x1adfc 
	-> Direct Jump to 110076 if null 
	 === Call to library function: fork
	 === Fork a new process. Run parent process:
-> Executing 11e80 : cmp r0,#0 
-> Executing 11e84 : b #0x11ed8 
	-> Direct Jump to 73432 if LE 
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000022 #x7fffffff) (bvslt #x00000022 #x80000001))))))UNSAT
	-> Checking path constrains by Z3 ...  x00000000) (or (bvsgt #x00000022 #x7fffffff) (bvslt #x00000022 #x80000001)))))))SAT
	-> Start Jumping from 11e84 --> 11e88
-> Executing 11e88 : mov r0,#0 
-> Executing 11e8c : add sp,sp,#0x14c 
-> Executing 11e90 : add sp,sp,#0x400 
-> Executing 11e94 : pop {r4,r5,r6,r7,r8,sb,sl,fp,lr} 
-> Executing 11e98 : bx lr 
	-> Indirect Jump to lr if null 
	-> Destination is undetectable.
	-> Run child process from 11e80
-> Executing 11e80 : cmp r0,#0 
-> Executing 11e84 : b #0x11ed8 
	-> Direct Jump to 73432 if LE 
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000000 #x7fffffff) (bvslt #x00000000 #x80000001))))))SAT
	-> Checking path constrains by Z3 ...  x00000000) (or (bvsgt #x00000000 #x7fffffff) (bvslt #x00000000 #x80000001)))))))UNSAT
	-> Start Jumping from 11e84 --> 11ed8
-> Executing 11ed8 : bl #0x1814c 
	-> Direct Jump to 98636 if null 
	 === Call to library function: setsid
-> Executing 11edc : mov r0,#0 
-> Executing 11ee0 : bl #0x1b4f0 
	-> Direct Jump to 111856 if null 
	 === Call to library function: close
-> Executing 11ee4 : mov r0,#1 
-> Executing 11ee8 : bl #0x1b4f0 
	-> Direct Jump to 111856 if null 
	 === Call to library function: close
-> Executing 11eec : mov r0,#2 
-> Executing 11ef0 : bl #0x1b4f0 
	-> Direct Jump to 111856 if null 
	 === Call to library function: close
-> Executing 11ef4 : bl #0xa590 
	-> Direct Jump to 42384 if null 
	 ==+ Call to: attack_init
	-> Start Jumping from 11ef4 --> a590
-> Executing a590 : push {r4,r5,r6,r7,lr} 
-> Executing a594 : mov r1,#8 
-> Executing a598 : sub sp,sp,#4 
-> Executing a59c : mov r0,#1 
-> Executing a5a0 : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a5a4 : ldr r4,[pc,#0x390] 
-> Executing a5a8 : ldrb r1,[r4] 
-> Executing a5ac : ldr r6,[pc,#0x38c] 
-> Executing a5b0 : ldr r2,[pc,#0x38c] 
-> Executing a5b4 : mov r5,r0 
-> Executing a5b8 : mov r3,#0 
-> Executing a5bc : add r1,r1,#1 
-> Executing a5c0 : ldr r0,[r6] 
-> Executing a5c4 : str r2,[r5] 
-> Executing a5c8 : strb r3,[r5,#4] 
-> Executing a5cc : lsl r1,r1,#2 
-> Executing a5d0 : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a5d4 : ldrb r3,[r4] 
-> Executing a5d8 : mov r2,r0 
-> Executing a5dc : str r5,[r0,r3,lsl #2] 
-> Executing a5e0 : mov r1,#8 
-> Executing a5e4 : add r3,r3,#1 
-> Executing a5e8 : mov r0,#1 
-> Executing a5ec : str r2,[r6] 
-> Executing a5f0 : strb r3,[r4] 
-> Executing a5f4 : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a5f8 : ldrb r1,[r4] 
-> Executing a5fc : ldr r3,[pc,#0x344] 
-> Executing a600 : mov r7,#1 
-> Executing a604 : mov r5,r0 
-> Executing a608 : add r1,r1,#1 
-> Executing a60c : ldr r0,[r6] 
-> Executing a610 : str r3,[r5] 
-> Executing a614 : strb r7,[r5,#4] 
-> Executing a618 : lsl r1,r1,#2 
-> Executing a61c : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a620 : ldrb r3,[r4] 
-> Executing a624 : mov r2,r0 
-> Executing a628 : str r5,[r0,r3,lsl #2] 
-> Executing a62c : mov r1,#8 
-> Executing a630 : add r3,r3,r7 
-> Executing a634 : mov r0,r7 
-> Executing a638 : strb r3,[r4] 
-> Executing a63c : str r2,[r6] 
-> Executing a640 : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a644 : ldrb r1,[r4] 
-> Executing a648 : ldr r2,[pc,#0x2fc] 
-> Executing a64c : mov r5,r0 
-> Executing a650 : mov r3,#2 
-> Executing a654 : add r1,r1,r7 
-> Executing a658 : ldr r0,[r6] 
-> Executing a65c : str r2,[r5] 
-> Executing a660 : strb r3,[r5,#4] 
-> Executing a664 : lsl r1,r1,#2 
-> Executing a668 : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a66c : ldrb r3,[r4] 
-> Executing a670 : mov r2,r0 
-> Executing a674 : str r5,[r0,r3,lsl #2] 
-> Executing a678 : mov r1,#8 
-> Executing a67c : add r3,r3,r7 
-> Executing a680 : mov r0,r7 
-> Executing a684 : strb r3,[r4] 
-> Executing a688 : str r2,[r6] 
-> Executing a68c : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a690 : ldrb r1,[r4] 
-> Executing a694 : ldr r2,[pc,#0x2b4] 
-> Executing a698 : mov r5,r0 
-> Executing a69c : mov r3,#3 
-> Executing a6a0 : add r1,r1,r7 
-> Executing a6a4 : ldr r0,[r6] 
-> Executing a6a8 : str r2,[r5] 
-> Executing a6ac : strb r3,[r5,#4] 
-> Executing a6b0 : lsl r1,r1,#2 
-> Executing a6b4 : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a6b8 : ldrb r3,[r4] 
-> Executing a6bc : mov r2,r0 
-> Executing a6c0 : str r5,[r0,r3,lsl #2] 
-> Executing a6c4 : mov r1,#8 
-> Executing a6c8 : add r3,r3,r7 
-> Executing a6cc : mov r0,r7 
-> Executing a6d0 : strb r3,[r4] 
-> Executing a6d4 : str r2,[r6] 
-> Executing a6d8 : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a6dc : ldrb r1,[r4] 
-> Executing a6e0 : ldr r2,[pc,#0x26c] 
-> Executing a6e4 : mov r5,r0 
-> Executing a6e8 : mov r3,#4 
-> Executing a6ec : add r1,r1,r7 
-> Executing a6f0 : ldr r0,[r6] 
-> Executing a6f4 : str r2,[r5] 
-> Executing a6f8 : strb r3,[r5,#4] 
-> Executing a6fc : lsl r1,r1,#2 
-> Executing a700 : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a704 : ldrb r3,[r4] 
-> Executing a708 : mov r2,r0 
-> Executing a70c : str r5,[r0,r3,lsl #2] 
-> Executing a710 : mov r1,#8 
-> Executing a714 : add r3,r3,r7 
-> Executing a718 : mov r0,r7 
-> Executing a71c : strb r3,[r4] 
-> Executing a720 : str r2,[r6] 
-> Executing a724 : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a728 : ldrb r1,[r4] 
-> Executing a72c : ldr r2,[pc,#0x224] 
-> Executing a730 : mov r5,r0 
-> Executing a734 : mov r3,#5 
-> Executing a738 : add r1,r1,r7 
-> Executing a73c : ldr r0,[r6] 
-> Executing a740 : str r2,[r5] 
-> Executing a744 : strb r3,[r5,#4] 
-> Executing a748 : lsl r1,r1,#2 
-> Executing a74c : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a750 : ldrb r3,[r4] 
-> Executing a754 : mov r2,r0 
-> Executing a758 : str r5,[r0,r3,lsl #2] 
-> Executing a75c : mov r1,#8 
-> Executing a760 : add r3,r3,r7 
-> Executing a764 : mov r0,r7 
-> Executing a768 : strb r3,[r4] 
-> Executing a76c : str r2,[r6] 
-> Executing a770 : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a774 : ldrb r1,[r4] 
-> Executing a778 : ldr r2,[pc,#0x1dc] 
-> Executing a77c : mov r5,r0 
-> Executing a780 : mov r3,#6 
-> Executing a784 : add r1,r1,r7 
-> Executing a788 : ldr r0,[r6] 
-> Executing a78c : str r2,[r5] 
-> Executing a790 : strb r3,[r5,#4] 
-> Executing a794 : lsl r1,r1,#2 
-> Executing a798 : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a79c : ldrb r3,[r4] 
-> Executing a7a0 : mov r2,r0 
-> Executing a7a4 : str r5,[r0,r3,lsl #2] 
-> Executing a7a8 : mov r1,#8 
-> Executing a7ac : add r3,r3,r7 
-> Executing a7b0 : mov r0,r7 
-> Executing a7b4 : strb r3,[r4] 
-> Executing a7b8 : str r2,[r6] 
-> Executing a7bc : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a7c0 : ldrb r1,[r4] 
-> Executing a7c4 : ldr r2,[pc,#0x194] 
-> Executing a7c8 : mov r5,r0 
-> Executing a7cc : mov r3,#7 
-> Executing a7d0 : add r1,r1,r7 
-> Executing a7d4 : ldr r0,[r6] 
-> Executing a7d8 : str r2,[r5] 
-> Executing a7dc : strb r3,[r5,#4] 
-> Executing a7e0 : lsl r1,r1,#2 
-> Executing a7e4 : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a7e8 : ldrb r3,[r4] 
-> Executing a7ec : mov r2,r0 
-> Executing a7f0 : str r5,[r0,r3,lsl #2] 
-> Executing a7f4 : mov r1,#8 
-> Executing a7f8 : add r3,r3,r7 
-> Executing a7fc : mov r0,r7 
-> Executing a800 : strb r3,[r4] 
-> Executing a804 : str r2,[r6] 
-> Executing a808 : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a80c : ldrb r1,[r4] 
-> Executing a810 : ldr r2,[pc,#0x14c] 
-> Executing a814 : mov r5,r0 
-> Executing a818 : mov r3,#9 
-> Executing a81c : add r1,r1,r7 
-> Executing a820 : ldr r0,[r6] 
-> Executing a824 : str r2,[r5] 
-> Executing a828 : strb r3,[r5,#4] 
-> Executing a82c : lsl r1,r1,#2 
-> Executing a830 : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a834 : ldrb r3,[r4] 
-> Executing a838 : mov r2,r0 
-> Executing a83c : str r5,[r0,r3,lsl #2] 
-> Executing a840 : mov r1,#8 
-> Executing a844 : add r3,r3,r7 
-> Executing a848 : mov r0,r7 
-> Executing a84c : strb r3,[r4] 
-> Executing a850 : str r2,[r6] 
-> Executing a854 : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a858 : ldrb r1,[r4] 
-> Executing a85c : ldr r2,[pc,#0x104] 
-> Executing a860 : mov r5,r0 
-> Executing a864 : mov r3,#0xa 
-> Executing a868 : add r1,r1,r7 
-> Executing a86c : ldr r0,[r6] 
-> Executing a870 : str r2,[r5] 
-> Executing a874 : strb r3,[r5,#4] 
-> Executing a878 : lsl r1,r1,#2 
-> Executing a87c : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a880 : ldrb r3,[r4] 
-> Executing a884 : mov r2,r0 
-> Executing a888 : str r5,[r0,r3,lsl #2] 
-> Executing a88c : mov r1,#8 
-> Executing a890 : add r3,r3,r7 
-> Executing a894 : mov r0,r7 
-> Executing a898 : strb r3,[r4] 
-> Executing a89c : str r2,[r6] 
-> Executing a8a0 : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a8a4 : ldrb r1,[r4] 
-> Executing a8a8 : ldr r2,[pc,#0xbc] 
-> Executing a8ac : mov r5,r0 
-> Executing a8b0 : mov r3,#0xb 
-> Executing a8b4 : add r1,r1,r7 
-> Executing a8b8 : ldr r0,[r6] 
-> Executing a8bc : str r2,[r5] 
-> Executing a8c0 : strb r3,[r5,#4] 
-> Executing a8c4 : lsl r1,r1,#2 
-> Executing a8c8 : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a8cc : ldrb r3,[r4] 
-> Executing a8d0 : mov r2,r0 
-> Executing a8d4 : str r5,[r0,r3,lsl #2] 
-> Executing a8d8 : mov r1,#8 
-> Executing a8dc : add r3,r3,r7 
-> Executing a8e0 : mov r0,r7 
-> Executing a8e4 : strb r3,[r4] 
-> Executing a8e8 : str r2,[r6] 
-> Executing a8ec : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing a8f0 : ldrb r1,[r4] 
-> Executing a8f4 : ldr r2,[pc,#0x74] 
-> Executing a8f8 : mov r5,r0 
-> Executing a8fc : mov r3,#8 
-> Executing a900 : add r1,r1,r7 
-> Executing a904 : ldr r0,[r6] 
-> Executing a908 : str r2,[r5] 
-> Executing a90c : strb r3,[r5,#4] 
-> Executing a910 : lsl r1,r1,#2 
-> Executing a914 : bl #0x199ec 
	-> Direct Jump to 104940 if null 
	 === Call to library function: realloc
-> Executing a918 : ldrb r3,[r4] 
-> Executing a91c : str r0,[r6] 
-> Executing a920 : str r5,[r0,r3,lsl #2] 
-> Executing a924 : add r2,r3,r7 
-> Executing a928 : mov r0,r7 
-> Executing a92c : strb r2,[r4] 
-> Executing a930 : add sp,sp,#4 
-> Executing a934 : pop {r4,r5,r6,r7,lr} 
-> Executing a938 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 73464
	-> Start Jumping from a938 --> 11ef8
-> Executing 11ef8 : bl #0xee18 
	-> Direct Jump to 60952 if null 
	 ==+ Call to: killer_init
	-> Start Jumping from 11ef8 --> ee18
-> Executing ee18 : push {r4,r5,r6,r7,r8,sb,sl,fp,lr} 
-> Executing ee1c : sub sp,sp,#0x2300 
-> Executing ee20 : sub sp,sp,#4 
-> Executing ee24 : mov r0,#0 
-> Executing ee28 : bl #0x18218 
	-> Direct Jump to 98840 if null 
	 === Call to library function: time
-> Executing ee2c : mov r7,r0 
-> Executing ee30 : bl #0x1adfc 
	-> Direct Jump to 110076 if null 
	 === Call to library function: fork
	 === Fork a new process. Run parent process:
-> Executing ee34 : cmn r0,#1 
-> Executing ee38 : b 60984-2 
	-> Direct Jump to 60984-2 if NE 
	-> Checking path constrains by Z3 ...   #x7fffffff) (bvslt #x00000000 #x80000001)))))) (not (= #x0000003d #x00000000)))SAT
	-> Checking path constrains by Z3 ...  fffff) (bvslt #x00000000 #x80000001)))))) (not (not (= #x0000003d #x00000000))))UNSAT
	-> Start Jumping from ee38 --> ee38
-> Executing ee38 : mov r3,#0 
-> Executing ee38+2 : b 0xee3c 
	-> Direct Jump to 60988 if null 
	-> Start Jumping from ee38+2 --> ee3c
-> Executing ee3c : b 60988-2 
	-> Direct Jump to 60988-2 if EQ 
	-> Checking path constrains by Z3 ...  000 #x80000001)))))) (not (= #x0000003d #x00000000))) (= #x0000003d #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  80000001)))))) (not (= #x0000003d #x00000000))) (not (= #x0000003d #x00000000)))SAT
	-> Start Jumping from ee3c --> ee40
-> Executing ee40 : cmp r0,#0 
-> Executing ee44 : b 60996-2 
	-> Direct Jump to 60996-2 if LE 
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x0000003c #x7fffffff) (bvslt #x0000003c #x80000001))))))UNSAT
	-> Checking path constrains by Z3 ...  x00000000) (or (bvsgt #x0000003c #x7fffffff) (bvslt #x0000003c #x80000001)))))))SAT
	-> Start Jumping from ee44 --> ee48
-> Executing ee48 : b 61000-2 
	-> Direct Jump to 61000-2 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x0000003c #x7fffffff) (bvslt #x0000003c #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x0000003c #x7fffffff) (bvslt #x0000003c #x80000001))))))UNSAT
	-> Start Jumping from ee48 --> ee48
-> Executing ee48 : orr r5,r3,#1 
-> Executing ee48+2 : b 0xee4c 
	-> Direct Jump to 61004 if null 
	-> Start Jumping from ee48+2 --> ee4c
-> Executing ee4c : ldr r3,[pc,#0x83c] 
-> Executing ee50 : cmp r5,#0 
-> Executing ee54 : str r0,[r3] 
-> Executing ee58 : b #0xee6c 
	-> Direct Jump to 61036 if EQ 
	-> Checking path constrains by Z3 ...  000003c #x7fffffff) (bvslt #x0000003c #x80000001))))) (= #x00000001 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  c #x7fffffff) (bvslt #x0000003c #x80000001))))) (not (= #x00000001 #x00000000)))SAT
	-> Start Jumping from ee58 --> ee5c
-> Executing ee5c : add sp,sp,#0x304 
-> Executing ee60 : add sp,sp,#0x2000 
-> Executing ee64 : pop {r4,r5,r6,r7,r8,sb,sl,fp,lr} 
-> Executing ee68 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 73468
	-> Start Jumping from ee68 --> 11efc
-> Executing 11efc : bl #0x11c90 
	-> Direct Jump to 72848 if null 
	 ==+ Call to: watchdog_maintain
	-> Start Jumping from 11efc --> 11c90
-> Executing 11c90 : push {r4,r5,lr} 
-> Executing 11c94 : sub sp,sp,#0xc 
-> Executing 11c98 : bl #0x1adfc 
	-> Direct Jump to 110076 if null 
	 === Call to library function: fork
	 === Fork a new process. Run parent process:
-> Executing 11c9c : cmn r0,#1 
-> Executing 11ca0 : b 72864-2 
	-> Direct Jump to 72864-2 if NE 
	-> Checking path constrains by Z3 ...  x80000001))))) (not (= #x00000001 #x00000000))) (not (= #x00000014 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  001))))) (not (= #x00000001 #x00000000))) (not (not (= #x00000014 #x00000000))))UNSAT
	-> Start Jumping from 11ca0 --> 11ca0
-> Executing 11ca0 : mov r3,#0 
-> Executing 11ca0+2 : b 0x11ca4 
	-> Direct Jump to 72868 if null 
	-> Start Jumping from 11ca0+2 --> 11ca4
-> Executing 11ca4 : b 72868-2 
	-> Direct Jump to 72868-2 if EQ 
	-> Checking path constrains by Z3 ...  000001 #x00000000))) (not (= #x00000014 #x00000000))) (= #x00000014 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000014 #x00000000))) (not (= #x00000014 #x00000000)))SAT
	-> Start Jumping from 11ca4 --> 11ca8
-> Executing 11ca8 : cmp r0,#0 
-> Executing 11cac : b 72876-2 
	-> Direct Jump to 72876-2 if LE 
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000013 #x7fffffff) (bvslt #x00000013 #x80000001))))))UNSAT
	-> Checking path constrains by Z3 ...  x00000000) (or (bvsgt #x00000013 #x7fffffff) (bvslt #x00000013 #x80000001)))))))SAT
	-> Start Jumping from 11cac --> 11cb0
-> Executing 11cb0 : b 72880-2 
	-> Direct Jump to 72880-2 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000013 #x7fffffff) (bvslt #x00000013 #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000013 #x7fffffff) (bvslt #x00000013 #x80000001))))))UNSAT
	-> Start Jumping from 11cb0 --> 11cb0
-> Executing 11cb0 : orr r5,r3,#1 
-> Executing 11cb0+2 : b 0x11cb4 
	-> Direct Jump to 72884 if null 
	-> Start Jumping from 11cb0+2 --> 11cb4
-> Executing 11cb4 : ldr r3,[pc,#0xc0] 
-> Executing 11cb8 : cmp r5,#0 
-> Executing 11cbc : str r0,[r3] 
-> Executing 11cc0 : b #0x11cd0 
	-> Direct Jump to 72912 if EQ 
	-> Checking path constrains by Z3 ...  0000013 #x7fffffff) (bvslt #x00000013 #x80000001))))) (= #x00000001 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  3 #x7fffffff) (bvslt #x00000013 #x80000001))))) (not (= #x00000001 #x00000000)))SAT
	-> Start Jumping from 11cc0 --> 11cc4
-> Executing 11cc4 : add sp,sp,#0xc 
-> Executing 11cc8 : pop {r4,r5,lr} 
-> Executing 11ccc : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 73472
	-> Start Jumping from 11ccc --> 11f00
-> Executing 11f00 : bl #0x12d18 
	-> Direct Jump to 77080 if null 
	 ==+ Call to: scanner_init
	-> Start Jumping from 11f00 --> 12d18
-> Executing 12d18 : push {r4,r5,r6,r7,r8,sb,sl,fp,lr} 
-> Executing 12d1c : sub sp,sp,#0x7f0 
-> Executing 12d20 : sub sp,sp,#0xc 
-> Executing 12d24 : bl #0x1adfc 
	-> Direct Jump to 110076 if null 
	 === Call to library function: fork
	 === Fork a new process. Run parent process:
-> Executing 12d28 : cmn r0,#1 
-> Executing 12d2c : b 77100-2 
	-> Direct Jump to 77100-2 if NE 
	-> Checking path constrains by Z3 ...  x80000001))))) (not (= #x00000001 #x00000000))) (not (= #x00000047 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  001))))) (not (= #x00000001 #x00000000))) (not (not (= #x00000047 #x00000000))))UNSAT
	-> Start Jumping from 12d2c --> 12d2c
-> Executing 12d2c : mov r3,#0 
-> Executing 12d2c+2 : b 0x12d30 
	-> Direct Jump to 77104 if null 
	-> Start Jumping from 12d2c+2 --> 12d30
-> Executing 12d30 : b 77104-2 
	-> Direct Jump to 77104-2 if EQ 
	-> Checking path constrains by Z3 ...  000001 #x00000000))) (not (= #x00000047 #x00000000))) (= #x00000047 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000047 #x00000000))) (not (= #x00000047 #x00000000)))SAT
	-> Start Jumping from 12d30 --> 12d34
-> Executing 12d34 : cmp r0,#0 
-> Executing 12d38 : b 77112-2 
	-> Direct Jump to 77112-2 if LE 
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000046 #x7fffffff) (bvslt #x00000046 #x80000001))))))UNSAT
	-> Checking path constrains by Z3 ...  x00000000) (or (bvsgt #x00000046 #x7fffffff) (bvslt #x00000046 #x80000001)))))))SAT
	-> Start Jumping from 12d38 --> 12d3c
-> Executing 12d3c : b 77116-2 
	-> Direct Jump to 77116-2 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000046 #x7fffffff) (bvslt #x00000046 #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000046 #x7fffffff) (bvslt #x00000046 #x80000001))))))UNSAT
	-> Start Jumping from 12d3c --> 12d3c
-> Executing 12d3c : orr r4,r3,#1 
-> Executing 12d3c+2 : b 0x12d40 
	-> Direct Jump to 77120 if null 
	-> Start Jumping from 12d3c+2 --> 12d40
-> Executing 12d40 : ldr r3,[pc,#0x18] 
-> Executing 12d44 : cmp r4,#0 
-> Executing 12d48 : str r0,[r3] 
-> Executing 12d4c : b #0x12e14 
	-> Direct Jump to 77332 if EQ 
	-> Checking path constrains by Z3 ...  0000046 #x7fffffff) (bvslt #x00000046 #x80000001))))) (= #x00000001 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  6 #x7fffffff) (bvslt #x00000046 #x80000001))))) (not (= #x00000001 #x00000000)))SAT
	-> Start Jumping from 12d4c --> 12d50
-> Executing 12d50 : add sp,sp,#0x3fc 
-> Executing 12d54 : add sp,sp,#0x400 
-> Executing 12d58 : pop {r4,r5,r6,r7,r8,sb,sl,fp,lr} 
-> Executing 12d5c : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 73476
	-> Start Jumping from 12d5c --> 11f04
-> Executing 11f04 : add r6,sp,#0x480 
-> Executing 11f08 : add r7,sp,#0x400 
-> Executing 11f0c : ldr sl,[pc,#0x4f4] 
-> Executing 11f10 : ldr fp,[pc,#0x4f4] 
-> Executing 11f14 : mov sb,#0 
-> Executing 11f18 : add r6,r6,#8 
-> Executing 11f1c : add r7,r7,#8 
-> Executing 11f20 : mov r3,#0 
-> Executing 11f24 : str r3,[sp,#0x488] 
-> Executing 11f28 : add r3,r3,#4 
-> Executing 11f2c : mov r2,#0 
-> Executing 11f30 : str r2,[r3,r6] 
-> Executing 11f34 : add r3,r3,#4 
-> Executing 11f38 : cmp r3,#0x80 
-> Executing 11f3c : b #0x11f2c 
	-> Direct Jump to 73516 if NE 
	-> Checking path constrains by Z3 ...  x80000001))))) (not (= #x00000001 #x00000000))) (not (= #xffffff88 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  001))))) (not (= #x00000001 #x00000000))) (not (not (= #xffffff88 #x00000000))))UNSAT
	-> Start Jumping from 11f3c --> 11f2c
-> Executing 11f2c : mov r2,#0 
-> Executing 11f30 : str r2,[r3,r6] 
-> Executing 11f34 : add r3,r3,#4 
-> Executing 11f38 : cmp r3,#0x80 
-> Executing 11f3c : b #0x11f2c 
	-> Direct Jump to 73516 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff88 #x00000000))) (not (= #xffffff8c #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffff88 #x00000000))) (not (not (= #xffffff8c #x00000000))))UNSAT
	-> Start Jumping from 11f3c --> 11f2c
-> Executing 11f2c : mov r2,#0 
-> Executing 11f30 : str r2,[r3,r6] 
-> Executing 11f34 : add r3,r3,#4 
-> Executing 11f38 : cmp r3,#0x80 
-> Executing 11f3c : b #0x11f2c 
	-> Direct Jump to 73516 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff8c #x00000000))) (not (= #xffffff90 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffff8c #x00000000))) (not (not (= #xffffff90 #x00000000))))UNSAT
	-> Start Jumping from 11f3c --> 11f2c
-> Executing 11f2c : mov r2,#0 
-> Executing 11f30 : str r2,[r3,r6] 
-> Executing 11f34 : add r3,r3,#4 
-> Executing 11f38 : cmp r3,#0x80 
-> Executing 11f3c : b #0x11f2c 
	-> Direct Jump to 73516 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff90 #x00000000))) (not (= #xffffff94 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffff90 #x00000000))) (not (not (= #xffffff94 #x00000000))))UNSAT
	-> Start Jumping from 11f3c --> 11f2c
-> Executing 11f2c : mov r2,#0 
-> Executing 11f30 : str r2,[r3,r6] 
-> Executing 11f34 : add r3,r3,#4 
-> Executing 11f38 : cmp r3,#0x80 
-> Executing 11f3c : b #0x11f2c 
	-> Direct Jump to 73516 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff94 #x00000000))) (not (= #xffffff98 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffff94 #x00000000))) (not (not (= #xffffff98 #x00000000))))UNSAT
	-> Start Jumping from 11f3c --> 11f2c
-> Executing 11f2c : mov r2,#0 
-> Executing 11f30 : str r2,[r3,r6] 
-> Executing 11f34 : add r3,r3,#4 
-> Executing 11f38 : cmp r3,#0x80 
-> Executing 11f3c : b #0x11f2c 
	-> Direct Jump to 73516 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff98 #x00000000))) (not (= #xffffff9c #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffff98 #x00000000))) (not (not (= #xffffff9c #x00000000))))UNSAT
	-> Start Jumping from 11f3c --> 11f2c
-> Executing 11f2c : mov r2,#0 
-> Executing 11f30 : str r2,[r3,r6] 
-> Executing 11f34 : add r3,r3,#4 
-> Executing 11f38 : cmp r3,#0x80 
-> Executing 11f3c : b #0x11f2c 
	-> Direct Jump to 73516 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff9c #x00000000))) (not (= #xffffffa0 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffff9c #x00000000))) (not (not (= #xffffffa0 #x00000000))))UNSAT
	-> Start Jumping from 11f3c --> 11f2c
-> Executing 11f2c : mov r2,#0 
-> Executing 11f30 : str r2,[r3,r6] 
-> Executing 11f34 : add r3,r3,#4 
-> Executing 11f38 : cmp r3,#0x80 
-> Executing 11f3c : b #0x11f2c 
	-> Direct Jump to 73516 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffa0 #x00000000))) (not (= #xffffffa4 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffa0 #x00000000))) (not (not (= #xffffffa4 #x00000000))))UNSAT
	-> Start Jumping from 11f3c --> 11f2c
-> Executing 11f2c : mov r2,#0 
-> Executing 11f30 : str r2,[r3,r6] 
-> Executing 11f34 : add r3,r3,#4 
-> Executing 11f38 : cmp r3,#0x80 
-> Executing 11f3c : b #0x11f2c 
	-> Direct Jump to 73516 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffa4 #x00000000))) (not (= #xffffffa8 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffa4 #x00000000))) (not (not (= #xffffffa8 #x00000000))))UNSAT
	-> Start Jumping from 11f3c --> 11f2c
-> Executing 11f2c : mov r2,#0 
-> Executing 11f30 : str r2,[r3,r6] 
-> Executing 11f34 : add r3,r3,#4 
-> Executing 11f38 : cmp r3,#0x80 
-> Executing 11f3c : b #0x11f2c 
	-> Direct Jump to 73516 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffa8 #x00000000))) (not (= #xffffffac #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffa8 #x00000000))) (not (not (= #xffffffac #x00000000))))UNSAT
	-> Start Jumping from 11f3c --> 11f2c
-> Executing 11f2c : mov r2,#0 
-> Executing 11f30 : str r2,[r3,r6] 
-> Executing 11f34 : add r3,r3,#4 
-> Executing 11f38 : cmp r3,#0x80 
-> Executing 11f3c : b #0x11f2c 
	-> Direct Jump to 73516 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffac #x00000000))) (not (= #xffffffb0 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffac #x00000000))) (not (not (= #xffffffb0 #x00000000))))UNSAT
	-> Start Jumping from 11f3c --> 11f2c
	-> Loop limitation exceeded, break.
-> Executing 11f40 : str r2,[sp,#0x408] 
-> Executing 11f44 : sub r3,r3,#0x7c 
-> Executing 11f48 : mov r4,#0 
-> Executing 11f4c : str r4,[r3,r7] 
-> Executing 11f50 : add r3,r3,#4 
-> Executing 11f54 : cmp r3,#0x80 
-> Executing 11f58 : b #0x11f48 
	-> Direct Jump to 73544 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffb0 #x00000000))) (not (= #xffffff38 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffb0 #x00000000))) (not (not (= #xffffff38 #x00000000))))UNSAT
	-> Start Jumping from 11f58 --> 11f48
-> Executing 11f48 : mov r4,#0 
-> Executing 11f4c : str r4,[r3,r7] 
-> Executing 11f50 : add r3,r3,#4 
-> Executing 11f54 : cmp r3,#0x80 
-> Executing 11f58 : b #0x11f48 
	-> Direct Jump to 73544 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff38 #x00000000))) (not (= #xffffff3c #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffff38 #x00000000))) (not (not (= #xffffff3c #x00000000))))UNSAT
	-> Start Jumping from 11f58 --> 11f48
-> Executing 11f48 : mov r4,#0 
-> Executing 11f4c : str r4,[r3,r7] 
-> Executing 11f50 : add r3,r3,#4 
-> Executing 11f54 : cmp r3,#0x80 
-> Executing 11f58 : b #0x11f48 
	-> Direct Jump to 73544 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff3c #x00000000))) (not (= #xffffff40 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffff3c #x00000000))) (not (not (= #xffffff40 #x00000000))))UNSAT
	-> Start Jumping from 11f58 --> 11f48
-> Executing 11f48 : mov r4,#0 
-> Executing 11f4c : str r4,[r3,r7] 
-> Executing 11f50 : add r3,r3,#4 
-> Executing 11f54 : cmp r3,#0x80 
-> Executing 11f58 : b #0x11f48 
	-> Direct Jump to 73544 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff40 #x00000000))) (not (= #xffffff44 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffff40 #x00000000))) (not (not (= #xffffff44 #x00000000))))UNSAT
	-> Start Jumping from 11f58 --> 11f48
-> Executing 11f48 : mov r4,#0 
-> Executing 11f4c : str r4,[r3,r7] 
-> Executing 11f50 : add r3,r3,#4 
-> Executing 11f54 : cmp r3,#0x80 
-> Executing 11f58 : b #0x11f48 
	-> Direct Jump to 73544 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff44 #x00000000))) (not (= #xffffff48 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffff44 #x00000000))) (not (not (= #xffffff48 #x00000000))))UNSAT
	-> Start Jumping from 11f58 --> 11f48
-> Executing 11f48 : mov r4,#0 
-> Executing 11f4c : str r4,[r3,r7] 
-> Executing 11f50 : add r3,r3,#4 
-> Executing 11f54 : cmp r3,#0x80 
-> Executing 11f58 : b #0x11f48 
	-> Direct Jump to 73544 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff48 #x00000000))) (not (= #xffffff4c #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffff48 #x00000000))) (not (not (= #xffffff4c #x00000000))))UNSAT
	-> Start Jumping from 11f58 --> 11f48
-> Executing 11f48 : mov r4,#0 
-> Executing 11f4c : str r4,[r3,r7] 
-> Executing 11f50 : add r3,r3,#4 
-> Executing 11f54 : cmp r3,#0x80 
-> Executing 11f58 : b #0x11f48 
	-> Direct Jump to 73544 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff4c #x00000000))) (not (= #xffffff50 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffff4c #x00000000))) (not (not (= #xffffff50 #x00000000))))UNSAT
	-> Start Jumping from 11f58 --> 11f48
-> Executing 11f48 : mov r4,#0 
-> Executing 11f4c : str r4,[r3,r7] 
-> Executing 11f50 : add r3,r3,#4 
-> Executing 11f54 : cmp r3,#0x80 
-> Executing 11f58 : b #0x11f48 
	-> Direct Jump to 73544 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff50 #x00000000))) (not (= #xffffff54 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffff50 #x00000000))) (not (not (= #xffffff54 #x00000000))))UNSAT
	-> Start Jumping from 11f58 --> 11f48
-> Executing 11f48 : mov r4,#0 
-> Executing 11f4c : str r4,[r3,r7] 
-> Executing 11f50 : add r3,r3,#4 
-> Executing 11f54 : cmp r3,#0x80 
-> Executing 11f58 : b #0x11f48 
	-> Direct Jump to 73544 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff54 #x00000000))) (not (= #xffffff58 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffff54 #x00000000))) (not (not (= #xffffff58 #x00000000))))UNSAT
	-> Start Jumping from 11f58 --> 11f48
-> Executing 11f48 : mov r4,#0 
-> Executing 11f4c : str r4,[r3,r7] 
-> Executing 11f50 : add r3,r3,#4 
-> Executing 11f54 : cmp r3,#0x80 
-> Executing 11f58 : b #0x11f48 
	-> Direct Jump to 73544 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff58 #x00000000))) (not (= #xffffff5c #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffff58 #x00000000))) (not (not (= #xffffff5c #x00000000))))UNSAT
	-> Start Jumping from 11f58 --> 11f48
-> Executing 11f48 : mov r4,#0 
-> Executing 11f4c : str r4,[r3,r7] 
-> Executing 11f50 : add r3,r3,#4 
-> Executing 11f54 : cmp r3,#0x80 
-> Executing 11f58 : b #0x11f48 
	-> Direct Jump to 73544 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff5c #x00000000))) (not (= #xffffff60 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffff5c #x00000000))) (not (not (= #xffffff60 #x00000000))))UNSAT
	-> Start Jumping from 11f58 --> 11f48
	-> Loop limitation exceeded, break.
-> Executing 11f5c : ldr r1,[pc,#0x4ac] 
-> Executing 11f60 : ldr r0,[r1] 
-> Executing 11f64 : cmn r0,#1 
-> Executing 11f68 : b #0x11f94 
	-> Direct Jump to 73620 if EQ 
	-> Checking path constrains by Z3 ...  ffff5c #x00000000))) (not (= #xffffff60 #x00000000))) (= #x0000003d #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffff60 #x00000000))) (not (= #x0000003d #x00000000)))SAT
	-> Start Jumping from 11f68 --> 11f6c
-> Executing 11f6c : lsr r3,r0,#5 
-> Executing 11f70 : add r2,sp,#0x540 
-> Executing 11f74 : add r2,r2,#8 
-> Executing 11f78 : lsl r3,r3,#2 
-> Executing 11f7c : add r3,r3,r2 
-> Executing 11f80 : ldr r2,[r3,#-0xc0] 
-> Executing 11f84 : and r0,r0,#0x1f 
-> Executing 11f88 : mov r1,#1 
-> Executing 11f8c : orr r2,r2,r1,lsl r0 
-> Executing 11f90 : str r2,[r3,#-0xc0] 
-> Executing 11f94 : ldr r3,[sl] 
-> Executing 11f98 : cmn r3,#1 
-> Executing 11f9c : ldr r8,[pc,#0x464] 
-> Executing 11fa0 : b #0x12220 
	-> Direct Jump to 74272 if EQ 
	-> Checking path constrains by Z3 ...  ffff60 #x00000000))) (not (= #x0000003d #x00000000))) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000003d #x00000000))) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 11fa0 --> 12220
-> Executing 12220 : mov r0,#2 
-> Executing 12224 : mov r1,#1 
-> Executing 12228 : mov r2,r4 
-> Executing 1222c : bl #0x18d24 
	-> Direct Jump to 101668 if null 
	 === Call to library function: socket
-> Executing 12230 : cmn r0,#1 
-> Executing 12234 : mov r5,r0 
-> Executing 12238 : str r0,[r8] 
-> Executing 1223c : b #0x11fa4 
	-> Direct Jump to 73636 if EQ 
	-> Checking path constrains by Z3 ...  = #x0000003d #x00000000))) (= #x00000000 #x00000000)) (= #x0000003e #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  00003d #x00000000))) (= #x00000000 #x00000000)) (not (= #x0000003e #x00000000)))SAT
	-> Start Jumping from 1223c --> 12240
-> Executing 12240 : mov r2,r4 
-> Executing 12244 : mov r1,#3 
-> Executing 12248 : bl #0x17e24 
	-> Direct Jump to 97828 if null 
	 === Call to library function: fcntl
-> Executing 1224c : mov r1,#4 
-> Executing 12250 : orr r2,r0,#0x800 
-> Executing 12254 : mov r0,r5 
-> Executing 12258 : bl #0x17e24 
	-> Direct Jump to 97828 if null 
	 === Call to library function: fcntl
-> Executing 1225c : ldr ip,[pc,#0x19c] 
-> Executing 12260 : ldr r3,[ip] 
-> Executing 12264 : cmp r3,#0 
-> Executing 12268 : b 74344-2 
	-> Direct Jump to 74344-2 if NE 
	-> Checking path constrains by Z3 ...  0 #x00000000)) (not (= #x0000003e #x00000000))) (not (= #x00011c0c #x00000000)))SAT
	-> Checking path constrains by Z3 ...  000000)) (not (= #x0000003e #x00000000))) (not (not (= #x00011c0c #x00000000))))UNSAT
	-> Start Jumping from 12268 --> 12268
-> Executing 12268 : mov lr,pc 
-> Executing 12268+2 : b 0x1226c 
	-> Direct Jump to 74348 if null 
	-> Start Jumping from 12268+2 --> 1226c
-> Executing 1226c : bx r3 
	-> Indirect Jump to r3 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00011c0c #x00000000))) (not (= #x00011c0c #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00011c0c #x00000000))) (not (not (= #x00011c0c #x00000000))))UNSAT
	-> Start Jumping from 1226c --> 11c0c
-> Executing 11c0c : push {r4,r5,r6,lr} 
-> Executing 11c10 : ldr r0,[pc,#0x6c] 
-> Executing 11c14 : bl #0x125e8 
	-> Direct Jump to 75240 if null 
	 ==+ Call to: resolv_lookup
	-> Start Jumping from 11c14 --> 125e8
-> Executing 125e8 : push {r4,r5,r6,r7,r8,sb,sl,fp,lr} 
-> Executing 125ec : sub sp,sp,#0x1080 
-> Executing 125f0 : sub sp,sp,#0x34 
-> Executing 125f4 : mov r5,r0 
-> Executing 125f8 : mov r1,#8 
-> Executing 125fc : mov r0,#1 
-> Executing 12600 : bl #0x198ac 
	-> Direct Jump to 104620 if null 
	 === Call to library function: calloc
-> Executing 12604 : mov fp,r0 
-> Executing 12608 : mov r0,r5 
-> Executing 1260c : bl #0x17530 
	-> Direct Jump to 95536 if null 
	 ==+ Call to: util_strlen
	-> Start Jumping from 1260c --> 17530
-> Executing 17530 : mov r2,r0 
-> Executing 17534 : ldrb r0,[r0] 
-> Executing 17538 : cmp r0,#0 
-> Executing 1753c : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  011c0c #x00000000))) (not (= #x00011c0c #x00000000))) (= #x73616c62 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00011c0c #x00000000))) (not (= #x73616c62 #x00000000)))SAT
	-> Start Jumping from 1753c --> 17540
-> Executing 17540 : mov r0,#0 
-> Executing 17544 : add r0,r0,#1 
-> Executing 17548 : ldrb r3,[r0,r2] 
-> Executing 1754c : cmp r3,#0 
-> Executing 17550 : b #0x17544 
	-> Direct Jump to 95556 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x73616c62 #x00000000))) (not (= #x00000000 #x00000000)))UNSAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x73616c62 #x00000000))) (not (not (= #x00000000 #x00000000))))SAT
	-> Start Jumping from 17550 --> 17554
-> Executing 17554 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 75280
	-> Start Jumping from 17554 --> 12610
-> Executing 12610 : add sl,sp,#0x820 
-> Executing 12614 : sub sl,sl,#0xc 
-> Executing 12618 : add sb,sp,#0x820 
-> Executing 1261c : mov ip,#0 
-> Executing 12620 : add r0,r0,#1 
-> Executing 12624 : add r2,sl,#0xe 
-> Executing 12628 : mov r6,sb 
-> Executing 1262c : mov r4,ip 
-> Executing 12630 : b #0x1265c 
	-> Direct Jump to 75356 if null 
	-> Start Jumping from 12630 --> 1265c
-> Executing 1265c : rsb r3,ip,r0 
-> Executing 12660 : cmp r3,#0 
-> Executing 12664 : add lr,r4,#1 
-> Executing 12668 : sub r1,r2,#1 
-> Executing 1266c : b #0x12634 
	-> Direct Jump to 75316 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #xfffffffe #x7fffffff) (bvslt #xfffffffe #x80000001)))))UNSAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #xfffffffe #x7fffffff) (bvslt #xfffffffe #x80000001))))))SAT
	-> Start Jumping from 1266c --> 12670
-> Executing 12670 : mov r4,#0 
-> Executing 12674 : strb r4,[r2,#-1] 
-> Executing 12678 : mov r0,sb 
-> Executing 1267c : bl #0x17530 
	-> Direct Jump to 95536 if null 
	 ==+ Call to: util_strlen
	-> Start Jumping from 1267c --> 17530
-> Executing 17530 : mov r2,r0 
-> Executing 17534 : ldrb r0,[r0] 
-> Executing 17538 : cmp r0,#0 
-> Executing 1753c : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  fffffe #x7fffffff) (bvslt #xfffffffe #x80000001)))))) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...   #x7fffffff) (bvslt #xfffffffe #x80000001)))))) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 1753c --> 12680
-> Executing 12680 : add r1,sp,#0x1000 
-> Executing 12684 : add r5,r0,sb 
-> Executing 12688 : str r4,[r1,#0xa0] 
-> Executing 1268c : str r4,[r1,#0x94] 
-> Executing 12690 : str r4,[r1,#0x98] 
-> Executing 12694 : str r4,[r1,#0x9c] 
-> Executing 12698 : mov r0,sb 
-> Executing 1269c : bl #0x17530 
	-> Direct Jump to 95536 if null 
	 ==+ Call to: util_strlen
	-> Start Jumping from 1269c --> 17530
-> Executing 17530 : mov r2,r0 
-> Executing 17534 : ldrb r0,[r0] 
-> Executing 17538 : cmp r0,#0 
-> Executing 1753c : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  xfffffffe #x80000001)))))) (= #x00000000 #x00000000)) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...  ffe #x80000001)))))) (= #x00000000 #x00000000)) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 1753c --> 126a0
-> Executing 126a0 : add r0,r0,#0x11 
-> Executing 126a4 : str r0,[sp,#8] 
-> Executing 126a8 : bl #0x12420 
	-> Direct Jump to 74784 if null 
	 ==+ Call to: rand_next
	-> Start Jumping from 126a8 --> 12420
-> Executing 12420 : push {r4,r5,r6,lr} 
-> Executing 12424 : ldr r5,[pc,#0x40] 
-> Executing 12428 : ldr r6,[pc,#0x40] 
-> Executing 1242c : ldr r3,[r5] 
-> Executing 12430 : ldr r2,[r6] 
-> Executing 12434 : ldr lr,[pc,#0x38] 
-> Executing 12438 : ldr r4,[pc,#0x38] 
-> Executing 1243c : eor r3,r3,r3,lsl #11 
-> Executing 12440 : eor r0,r2,r2,lsr #19 
-> Executing 12444 : ldr r1,[lr] 
-> Executing 12448 : ldr ip,[r4] 
-> Executing 1244c : eor r0,r0,r3 
-> Executing 12450 : eor r0,r0,r3,lsr #8 
-> Executing 12454 : str r1,[r5] 
-> Executing 12458 : str ip,[lr] 
-> Executing 1245c : str r2,[r4] 
-> Executing 12460 : str r0,[r6] 
-> Executing 12464 : pop {r4,r5,r6,lr} 
-> Executing 12468 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 75436
	-> Start Jumping from 12468 --> 126ac
-> Executing 126ac : mov r3,#0x8000 
-> Executing 126b0 : add r3,r3,#-0x7fffffff 
-> Executing 126b4 : umull lr,r2,r3,r0 
-> Executing 126b8 : add ip,r0,r2,lsr #15 
-> Executing 126bc : mov r1,#0x10 
-> Executing 126c0 : lsl ip,ip,#0x10 
-> Executing 126c4 : lsr ip,ip,r1 
-> Executing 126c8 : add r0,sp,#0x1080 
-> Executing 126cc : add r0,r0,#0x14 
-> Executing 126d0 : str ip,[sp,#0xc] 
-> Executing 126d4 : bl #0x175c4 
	-> Direct Jump to 95684 if null 
	 ==+ Call to: util_zero
	-> Start Jumping from 126d4 --> 175c4
-> Executing 175c4 : cmp r1,#0 
-> Executing 175c8 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  (= #x00000000 #x00000000)) (= #x00000000 #x00000000)) (= #x00000010 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  0000000 #x00000000)) (= #x00000000 #x00000000)) (not (= #x00000010 #x00000000)))SAT
	-> Start Jumping from 175c8 --> 175cc
-> Executing 175cc : mov r2,#0 
-> Executing 175d0 : mov r3,#0 
-> Executing 175d4 : strb r3,[r2,r0] 
-> Executing 175d8 : add r2,r2,#1 
-> Executing 175dc : cmp r2,r1 
-> Executing 175e0 : b #0x175d0 
	-> Direct Jump to 95696 if NE 
	-> Checking path constrains by Z3 ...  0 #x00000000)) (not (= #x00000010 #x00000000))) (not (= #xfffffff1 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  000000)) (not (= #x00000010 #x00000000))) (not (not (= #xfffffff1 #x00000000))))UNSAT
	-> Start Jumping from 175e0 --> 175d0
	-> Loop limitation exceeded, break.
-> Executing 175e4 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 75480
	-> Start Jumping from 175e4 --> 126d8
-> Executing 126d8 : mov r3,#0x800 
-> Executing 126dc : add r3,r3,#8 
-> Executing 126e0 : add r1,sp,#0x1000 
-> Executing 126e4 : orr r3,r3,r3,lsl #16 
-> Executing 126e8 : str r3,[r1,#0x98] 
-> Executing 126ec : mov ip,#0x3500 
-> Executing 126f0 : mov r3,#2 
-> Executing 126f4 : ldr lr,[sp,#0xc] 
-> Executing 126f8 : strh r3,[r1,#0x94] 
-> Executing 126fc : strh ip,[r1,#0x96] 
-> Executing 12700 : mov r3,#0x100 
-> Executing 12704 : add r2,r5,#1 
-> Executing 12708 : mov r1,#1 
-> Executing 1270c : strh lr,[sl] 
-> Executing 12710 : strh r1,[sl,#2] 
-> Executing 12714 : strh r3,[sl,#4] 
-> Executing 12718 : strh r3,[r5,#1] 
-> Executing 1271c : strh r3,[r2,#2] 
-> Executing 12720 : mvn r6,#0 
-> Executing 12724 : mov r8,#1 
-> Executing 12728 : cmn r6,#1 
-> Executing 1272c : b 75564-2 
	-> Direct Jump to 75564-2 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffff1 #x00000000))) (not (= #x00000000 #x00000000)))UNSAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xfffffff1 #x00000000))) (not (not (= #x00000000 #x00000000))))SAT
	-> Start Jumping from 1272c --> 12730
-> Executing 12730 : bl #0x1b4f0 
	-> Direct Jump to 111856 if NE 
	-> Checking path constrains by Z3 ...  00000))) (not (not (= #x00000000 #x00000000)))) (not (= #x00000000 #x00000000)))UNSAT
	-> Checking path constrains by Z3 ...  )) (not (not (= #x00000000 #x00000000)))) (not (not (= #x00000000 #x00000000))))SAT
	-> Start Jumping from 12730 --> 12734
-> Executing 12734 : mov r0,#2 
-> Executing 12738 : mov r1,r0 
-> Executing 1273c : mov r2,#0 
-> Executing 12740 : bl #0x18d24 
	-> Direct Jump to 101668 if null 
	 === Call to library function: socket
-> Executing 12744 : cmn r0,#1 
-> Executing 12748 : mov r6,r0 
-> Executing 1274c : b #0x128d4 
	-> Direct Jump to 75988 if EQ 
	-> Checking path constrains by Z3 ...  #x00000000)))) (not (not (= #x00000000 #x00000000)))) (= #x0000003f #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  0000)))) (not (not (= #x00000000 #x00000000)))) (not (= #x0000003f #x00000000)))SAT
	-> Start Jumping from 1274c --> 12750
-> Executing 12750 : add r1,sp,#0x1080 
-> Executing 12754 : add r1,r1,#0x14 
-> Executing 12758 : mov r2,#0x10 
-> Executing 1275c : bl #0x18890 
	-> Direct Jump to 100496 if null 
	 === Call to library function: connect
-> Executing 12760 : cmn r0,#1 
-> Executing 12764 : b #0x1289c 
	-> Direct Jump to 75932 if EQ 
	-> Checking path constrains by Z3 ...  00000 #x00000000)))) (not (= #x0000003f #x00000000))) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...  #x00000000)))) (not (= #x0000003f #x00000000))) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 12764 --> 1289c
-> Executing 1289c : add r0,r0,#2 
-> Executing 128a0 : bl #0x1b398 
	-> Direct Jump to 111512 if null 
	 ==+ Call to: sleep
	-> Start Jumping from 128a0 --> 1b398
-> Executing 1b398 : push {r4,r5,r6,r7,lr} 
-> Executing 1b39c : ldr r7,[pc,#0x114] 
-> Executing 1b3a0 : sub sp,sp,#0x2c 
-> Executing 1b3a4 : mov r4,#0 
-> Executing 1b3a8 : cmp r0,#0 
-> Executing 1b3ac : add r7,pc,r7 
-> Executing 1b3b0 : str r0,[sp,#0x20] 
-> Executing 1b3b4 : str r4,[sp,#0x24] 
-> Executing 1b3b8 : b #0x1b430 
	-> Direct Jump to 111664 if NE 
	-> Checking path constrains by Z3 ...  00003f #x00000000))) (= #x00000000 #x00000000)) (not (= #x00000001 #x00000000)))SAT
	-> Checking path constrains by Z3 ...   #x00000000))) (= #x00000000 #x00000000)) (not (not (= #x00000001 #x00000000))))UNSAT
	-> Start Jumping from 1b3b8 --> 1b430
-> Executing 1b430 : mov r3,#0x10000 
-> Executing 1b434 : mov r0,#0x11 
-> Executing 1b438 : mov r1,r4 
-> Executing 1b43c : add r2,sp,#4 
-> Executing 1b440 : str r3,[sp,#0x18] 
-> Executing 1b444 : str r4,[sp,#0x1c] 
-> Executing 1b448 : bl #0x1be74 
	-> Direct Jump to 114292 if null 
	 ==+ Call to: sigaction
	-> Start Jumping from 1b448 --> 1be74
-> Executing 1be74 : push {r4,r5,r6,lr} 
-> Executing 1be78 : ldr r4,[pc,#0x70] 
-> Executing 1be7c : sub ip,r1,#0 
-> Executing 1be80 : add r4,pc,r4 
-> Executing 1be84 : sub sp,sp,#0x18 
-> Executing 1be88 : mov r5,r0 
-> Executing 1be8c : mov r6,r2 
-> Executing 1be90 : b #0x1bed0 
	-> Direct Jump to 114384 if EQ 
	-> Checking path constrains by Z3 ...  0000000 #x00000000)) (not (= #x00000001 #x00000000))) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...  0 #x00000000)) (not (= #x00000001 #x00000000))) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 1be90 --> 1bed0
-> Executing 1bed0 : mov r0,r5 
-> Executing 1bed4 : mov r1,ip 
-> Executing 1bed8 : mov r2,r6 
-> Executing 1bedc : mov r3,#8 
-> Executing 1bee0 : bl #0x1bf30 
	-> Direct Jump to 114480 if null 
	 ==+ Call to: __syscall_rt_sigaction
	-> Start Jumping from 1bee0 --> 1bf30
-> Executing 1bf30 : push {r7,lr} 
-> Executing 1bf34 : mov r7,#0xae 
-> Executing 1bf38 : b 114488-2 
	-> Direct Jump to 114488-2 if VC 
	-> Checking path constrains by Z3 ...  000000)) (not (or (bvsgt #x00000000 #x7fffffff) (bvslt #x00000000 #x80000001))))SAT
	-> Checking path constrains by Z3 ...  )) (not (not (or (bvsgt #x00000000 #x7fffffff) (bvslt #x00000000 #x80000001)))))UNSAT
	-> Start Jumping from 1bf38 --> 1bf38
-> Executing 1bf38 :  #0 
-> Executing 1bf38+2 : b 0x1bf3c 
	-> Direct Jump to 114492 if null 
	-> Start Jumping from 1bf38+2 --> 1bf3c
-> Executing 1bf3c : cmn r0,#0x1000 
-> Executing 1bf40 : mov r2,r0 
-> Executing 1bf44 : b 114500-2 
	-> Direct Jump to 114500-2 if LS 
	-> Checking path constrains by Z3 ...  x80000001)))) (or (= #x00001011 #x00000000)(not (bvugt #x00001011 #xffffffff))))SAT
	-> Checking path constrains by Z3 ...  001)))) (not (or (= #x00001011 #x00000000)(not (bvugt #x00001011 #xffffffff)))))UNSAT
	-> Start Jumping from 1bf44 --> 1bf44
-> Executing 1bf44 : mov r0,r0 
-> Executing 1bf44+2 : b 0x1bf48 
	-> Direct Jump to 114504 if null 
	-> Start Jumping from 1bf44+2 --> 1bf48
-> Executing 1bf48 : b #0x1bf64 
	-> Direct Jump to 114532 if LS 
	-> Checking path constrains by Z3 ...  xffffffff)))) (or (= #x00001011 #x00000000)(not (bvugt #x00001011 #xffffffff))))SAT
	-> Checking path constrains by Z3 ...  fff)))) (not (or (= #x00001011 #x00000000)(not (bvugt #x00001011 #xffffffff)))))UNSAT
	-> Start Jumping from 1bf48 --> 1bf64
-> Executing 1bf64 : pop {r7,lr} 
-> Executing 1bf68 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 114404
	-> Start Jumping from 1bf68 --> 1bee4
-> Executing 1bee4 : add sp,sp,#0x18 
-> Executing 1bee8 : pop {r4,r5,r6,lr} 
-> Executing 1beec : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 111692
	-> Start Jumping from 1beec --> 1b44c
-> Executing 1b44c : ldr r3,[sp,#4] 
-> Executing 1b450 : cmp r3,#1 
-> Executing 1b454 : b 111700-2 
	-> Direct Jump to 111700-2 if EQ 
	-> Checking path constrains by Z3 ...  1011 #x00000000)(not (bvugt #x00001011 #xffffffff)))) (= #xffffffff #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  x00000000)(not (bvugt #x00001011 #xffffffff)))) (not (= #xffffffff #x00000000)))SAT
	-> Start Jumping from 1b454 --> 1b458
-> Executing 1b458 : b 111704-2 
	-> Direct Jump to 111704-2 if EQ 
	-> Checking path constrains by Z3 ...  01011 #xffffffff)))) (not (= #xffffffff #x00000000))) (= #xffffffff #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  #xffffffff)))) (not (= #xffffffff #x00000000))) (not (= #xffffffff #x00000000)))SAT
	-> Start Jumping from 1b458 --> 1b45c
-> Executing 1b45c : b 111708-2 
	-> Direct Jump to 111708-2 if EQ 
	-> Checking path constrains by Z3 ...  ffffff #x00000000))) (not (= #xffffffff #x00000000))) (= #xffffffff #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffff #x00000000))) (not (= #xffffffff #x00000000)))SAT
	-> Start Jumping from 1b45c --> 1b460
-> Executing 1b460 : bl #0x1818c 
	-> Direct Jump to 98700 if EQ 
	-> Checking path constrains by Z3 ...  ffffff #x00000000))) (not (= #xffffffff #x00000000))) (= #xffffffff #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffff #x00000000))) (not (= #xffffffff #x00000000)))SAT
	-> Start Jumping from 1b460 --> 1b464
-> Executing 1b464 : add r0,sp,#0x20 
-> Executing 1b468 : mov r1,r0 
-> Executing 1b46c : bl #0x1c2bc 
	-> Direct Jump to 115388 if null 
	 === Call to library function: nanosleep
-> Executing 1b470 : cmp r0,#0 
-> Executing 1b474 : b 111732-2 
	-> Direct Jump to 111732-2 if EQ 
	-> Checking path constrains by Z3 ...  ffffff #x00000000))) (not (= #xffffffff #x00000000))) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffff #x00000000))) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 1b474 --> 1b474
-> Executing 1b474 : mov r4,r0 
-> Executing 1b474+2 : b 0x1b478 
	-> Direct Jump to 111736 if null 
	-> Start Jumping from 1b474+2 --> 1b478
-> Executing 1b478 : b #0x1b494 
	-> Direct Jump to 111764 if EQ 
	-> Checking path constrains by Z3 ...  = #xffffffff #x00000000))) (= #x00000000 #x00000000)) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...  ffffff #x00000000))) (= #x00000000 #x00000000)) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 1b478 --> 1b494
-> Executing 1b494 : ldr r3,[sp,#0x18] 
-> Executing 1b498 : and r2,r3,#0x10000 
-> Executing 1b49c : b 111772-2 
	-> Direct Jump to 111772-2 if EQ 
	-> Checking path constrains by Z3 ...  (= #x00000000 #x00000000)) (= #x00000000 #x00000000)) (= #x00010000 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  0000000 #x00000000)) (= #x00000000 #x00000000)) (not (= #x00010000 #x00000000)))SAT
	-> Start Jumping from 1b49c --> 1b4a0
-> Executing 1b4a0 : b 111776-2 
	-> Direct Jump to 111776-2 if EQ 
	-> Checking path constrains by Z3 ...  0000000 #x00000000)) (not (= #x00010000 #x00000000))) (= #x00010000 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  0 #x00000000)) (not (= #x00010000 #x00000000))) (not (= #x00010000 #x00000000)))SAT
	-> Start Jumping from 1b4a0 --> 1b4a4
-> Executing 1b4a4 : bl #0x1818c 
	-> Direct Jump to 98700 if EQ 
	-> Checking path constrains by Z3 ...  010000 #x00000000))) (not (= #x00010000 #x00000000))) (= #x00010000 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00010000 #x00000000))) (not (= #x00010000 #x00000000)))SAT
	-> Start Jumping from 1b4a4 --> 1b4a8
-> Executing 1b4a8 : mov r0,r4 
-> Executing 1b4ac : add sp,sp,#0x2c 
-> Executing 1b4b0 : pop {r4,r5,r6,r7,lr} 
-> Executing 1b4b4 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 75940
	-> Start Jumping from 1b4b4 --> 128a4
-> Executing 128a4 : cmp r8,#5 
-> Executing 128a8 : b #0x12894 
	-> Direct Jump to 75924 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00010000 #x00000000))) (not (= #xfffffffc #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00010000 #x00000000))) (not (not (= #xfffffffc #x00000000))))UNSAT
	-> Start Jumping from 128a8 --> 12894
-> Executing 12894 : add r8,r8,#1 
-> Executing 12898 : b #0x12728 
	-> Direct Jump to 75560 if null 
	-> Start Jumping from 12898 --> 12728
-> Executing 12728 : cmn r6,#1 
-> Executing 1272c : b 75564-2 
	-> Direct Jump to 75564-2 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffffc #x00000000))) (not (= #x0000003f #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xfffffffc #x00000000))) (not (not (= #x0000003f #x00000000))))UNSAT
	-> Start Jumping from 1272c --> 1272c
-> Executing 1272c : mov r0,r6 
-> Executing 1272c+2 : b 0x12730 
	-> Direct Jump to 75568 if null 
	-> Start Jumping from 1272c+2 --> 12730
-> Executing 12730 : bl #0x1b4f0 
	-> Direct Jump to 111856 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000003f #x00000000))) (not (= #x0000003f #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x0000003f #x00000000))) (not (not (= #x0000003f #x00000000))))UNSAT
	 === Call to library function: close
-> Executing 12734 : mov r0,#2 
-> Executing 12738 : mov r1,r0 
-> Executing 1273c : mov r2,#0 
-> Executing 12740 : bl #0x18d24 
	-> Direct Jump to 101668 if null 
	 === Call to library function: socket
-> Executing 12744 : cmn r0,#1 
-> Executing 12748 : mov r6,r0 
-> Executing 1274c : b #0x128d4 
	-> Direct Jump to 75988 if EQ 
	-> Checking path constrains by Z3 ...  fffffc #x00000000))) (not (= #x0000003f #x00000000))) (= #x00000040 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000003f #x00000000))) (not (= #x00000040 #x00000000)))SAT
	-> Start Jumping from 1274c --> 12750
-> Executing 12750 : add r1,sp,#0x1080 
-> Executing 12754 : add r1,r1,#0x14 
-> Executing 12758 : mov r2,#0x10 
-> Executing 1275c : bl #0x18890 
	-> Direct Jump to 100496 if null 
	 === Call to library function: connect
-> Executing 12760 : cmn r0,#1 
-> Executing 12764 : b #0x1289c 
	-> Direct Jump to 75932 if EQ 
	-> Checking path constrains by Z3 ...  00003f #x00000000))) (not (= #x00000040 #x00000000))) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000040 #x00000000))) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 12764 --> 1289c
-> Executing 1289c : add r0,r0,#2 
-> Executing 128a0 : bl #0x1b398 
	-> Direct Jump to 111512 if null 
	 ==+ Call to: sleep
	-> Start Jumping from 128a0 --> 1b398
-> Executing 1b398 : push {r4,r5,r6,r7,lr} 
-> Executing 1b39c : ldr r7,[pc,#0x114] 
-> Executing 1b3a0 : sub sp,sp,#0x2c 
-> Executing 1b3a4 : mov r4,#0 
-> Executing 1b3a8 : cmp r0,#0 
-> Executing 1b3ac : add r7,pc,r7 
-> Executing 1b3b0 : str r0,[sp,#0x20] 
-> Executing 1b3b4 : str r4,[sp,#0x24] 
-> Executing 1b3b8 : b #0x1b430 
	-> Direct Jump to 111664 if NE 
	-> Checking path constrains by Z3 ...  000040 #x00000000))) (= #x00000000 #x00000000)) (not (= #x00000001 #x00000000)))SAT
	-> Checking path constrains by Z3 ...   #x00000000))) (= #x00000000 #x00000000)) (not (not (= #x00000001 #x00000000))))UNSAT
	-> Start Jumping from 1b3b8 --> 1b430
-> Executing 1b430 : mov r3,#0x10000 
-> Executing 1b434 : mov r0,#0x11 
-> Executing 1b438 : mov r1,r4 
-> Executing 1b43c : add r2,sp,#4 
-> Executing 1b440 : str r3,[sp,#0x18] 
-> Executing 1b444 : str r4,[sp,#0x1c] 
-> Executing 1b448 : bl #0x1be74 
	-> Direct Jump to 114292 if null 
	 ==+ Call to: sigaction
	-> Start Jumping from 1b448 --> 1be74
-> Executing 1be74 : push {r4,r5,r6,lr} 
-> Executing 1be78 : ldr r4,[pc,#0x70] 
-> Executing 1be7c : sub ip,r1,#0 
-> Executing 1be80 : add r4,pc,r4 
-> Executing 1be84 : sub sp,sp,#0x18 
-> Executing 1be88 : mov r5,r0 
-> Executing 1be8c : mov r6,r2 
-> Executing 1be90 : b #0x1bed0 
	-> Direct Jump to 114384 if EQ 
	-> Checking path constrains by Z3 ...  0000000 #x00000000)) (not (= #x00000001 #x00000000))) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...  0 #x00000000)) (not (= #x00000001 #x00000000))) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 1be90 --> 1bed0
-> Executing 1bed0 : mov r0,r5 
-> Executing 1bed4 : mov r1,ip 
-> Executing 1bed8 : mov r2,r6 
-> Executing 1bedc : mov r3,#8 
-> Executing 1bee0 : bl #0x1bf30 
	-> Direct Jump to 114480 if null 
	 ==+ Call to: __syscall_rt_sigaction
	-> Start Jumping from 1bee0 --> 1bf30
-> Executing 1bf30 : push {r7,lr} 
-> Executing 1bf34 : mov r7,#0xae 
-> Executing 1bf38 : b 114488-2 
	-> Direct Jump to 114488-2 if VC 
	-> Checking path constrains by Z3 ...  000000)) (not (or (bvsgt #x00000000 #x7fffffff) (bvslt #x00000000 #x80000001))))SAT
	-> Checking path constrains by Z3 ...  )) (not (not (or (bvsgt #x00000000 #x7fffffff) (bvslt #x00000000 #x80000001)))))UNSAT
	-> Start Jumping from 1bf38 --> 1bf38
-> Executing 1bf38 :  #0 
-> Executing 1bf38+2 : b 0x1bf3c 
	-> Direct Jump to 114492 if null 
	-> Start Jumping from 1bf38+2 --> 1bf3c
-> Executing 1bf3c : cmn r0,#0x1000 
-> Executing 1bf40 : mov r2,r0 
-> Executing 1bf44 : b 114500-2 
	-> Direct Jump to 114500-2 if LS 
	-> Checking path constrains by Z3 ...  x80000001)))) (or (= #x00001011 #x00000000)(not (bvugt #x00001011 #xffffffff))))SAT
	-> Checking path constrains by Z3 ...  001)))) (not (or (= #x00001011 #x00000000)(not (bvugt #x00001011 #xffffffff)))))UNSAT
	-> Start Jumping from 1bf44 --> 1bf44
-> Executing 1bf44 : mov r0,r0 
-> Executing 1bf44+2 : b 0x1bf48 
	-> Direct Jump to 114504 if null 
	-> Start Jumping from 1bf44+2 --> 1bf48
-> Executing 1bf48 : b #0x1bf64 
	-> Direct Jump to 114532 if LS 
	-> Checking path constrains by Z3 ...  xffffffff)))) (or (= #x00001011 #x00000000)(not (bvugt #x00001011 #xffffffff))))SAT
	-> Checking path constrains by Z3 ...  fff)))) (not (or (= #x00001011 #x00000000)(not (bvugt #x00001011 #xffffffff)))))UNSAT
	-> Start Jumping from 1bf48 --> 1bf64
-> Executing 1bf64 : pop {r7,lr} 
-> Executing 1bf68 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 114404
	-> Start Jumping from 1bf68 --> 1bee4
-> Executing 1bee4 : add sp,sp,#0x18 
-> Executing 1bee8 : pop {r4,r5,r6,lr} 
-> Executing 1beec : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 111692
	-> Start Jumping from 1beec --> 1b44c
-> Executing 1b44c : ldr r3,[sp,#4] 
-> Executing 1b450 : cmp r3,#1 
-> Executing 1b454 : b 111700-2 
	-> Direct Jump to 111700-2 if EQ 
	-> Checking path constrains by Z3 ...  1011 #x00000000)(not (bvugt #x00001011 #xffffffff)))) (= #xffffffff #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  x00000000)(not (bvugt #x00001011 #xffffffff)))) (not (= #xffffffff #x00000000)))SAT
	-> Start Jumping from 1b454 --> 1b458
-> Executing 1b458 : b 111704-2 
	-> Direct Jump to 111704-2 if EQ 
	-> Checking path constrains by Z3 ...  01011 #xffffffff)))) (not (= #xffffffff #x00000000))) (= #xffffffff #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  #xffffffff)))) (not (= #xffffffff #x00000000))) (not (= #xffffffff #x00000000)))SAT
	-> Start Jumping from 1b458 --> 1b45c
-> Executing 1b45c : b 111708-2 
	-> Direct Jump to 111708-2 if EQ 
	-> Checking path constrains by Z3 ...  ffffff #x00000000))) (not (= #xffffffff #x00000000))) (= #xffffffff #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffff #x00000000))) (not (= #xffffffff #x00000000)))SAT
	-> Start Jumping from 1b45c --> 1b460
-> Executing 1b460 : bl #0x1818c 
	-> Direct Jump to 98700 if EQ 
	-> Checking path constrains by Z3 ...  ffffff #x00000000))) (not (= #xffffffff #x00000000))) (= #xffffffff #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffff #x00000000))) (not (= #xffffffff #x00000000)))SAT
	-> Start Jumping from 1b460 --> 1b464
-> Executing 1b464 : add r0,sp,#0x20 
-> Executing 1b468 : mov r1,r0 
-> Executing 1b46c : bl #0x1c2bc 
	-> Direct Jump to 115388 if null 
	 === Call to library function: nanosleep
-> Executing 1b470 : cmp r0,#0 
-> Executing 1b474 : b 111732-2 
	-> Direct Jump to 111732-2 if EQ 
	-> Checking path constrains by Z3 ...  ffffff #x00000000))) (not (= #xffffffff #x00000000))) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffff #x00000000))) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 1b474 --> 1b474
-> Executing 1b474 : mov r4,r0 
-> Executing 1b474+2 : b 0x1b478 
	-> Direct Jump to 111736 if null 
	-> Start Jumping from 1b474+2 --> 1b478
-> Executing 1b478 : b #0x1b494 
	-> Direct Jump to 111764 if EQ 
	-> Checking path constrains by Z3 ...  = #xffffffff #x00000000))) (= #x00000000 #x00000000)) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...  ffffff #x00000000))) (= #x00000000 #x00000000)) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 1b478 --> 1b494
-> Executing 1b494 : ldr r3,[sp,#0x18] 
-> Executing 1b498 : and r2,r3,#0x10000 
-> Executing 1b49c : b 111772-2 
	-> Direct Jump to 111772-2 if EQ 
	-> Checking path constrains by Z3 ...  (= #x00000000 #x00000000)) (= #x00000000 #x00000000)) (= #x00010000 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  0000000 #x00000000)) (= #x00000000 #x00000000)) (not (= #x00010000 #x00000000)))SAT
	-> Start Jumping from 1b49c --> 1b4a0
-> Executing 1b4a0 : b 111776-2 
	-> Direct Jump to 111776-2 if EQ 
	-> Checking path constrains by Z3 ...  0000000 #x00000000)) (not (= #x00010000 #x00000000))) (= #x00010000 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  0 #x00000000)) (not (= #x00010000 #x00000000))) (not (= #x00010000 #x00000000)))SAT
	-> Start Jumping from 1b4a0 --> 1b4a4
-> Executing 1b4a4 : bl #0x1818c 
	-> Direct Jump to 98700 if EQ 
	-> Checking path constrains by Z3 ...  010000 #x00000000))) (not (= #x00010000 #x00000000))) (= #x00010000 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00010000 #x00000000))) (not (= #x00010000 #x00000000)))SAT
	-> Start Jumping from 1b4a4 --> 1b4a8
-> Executing 1b4a8 : mov r0,r4 
-> Executing 1b4ac : add sp,sp,#0x2c 
-> Executing 1b4b0 : pop {r4,r5,r6,r7,lr} 
-> Executing 1b4b4 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 75940
	-> Start Jumping from 1b4b4 --> 128a4
-> Executing 128a4 : cmp r8,#5 
-> Executing 128a8 : b #0x12894 
	-> Direct Jump to 75924 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00010000 #x00000000))) (not (= #xfffffffd #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00010000 #x00000000))) (not (not (= #xfffffffd #x00000000))))UNSAT
	-> Start Jumping from 128a8 --> 12894
-> Executing 12894 : add r8,r8,#1 
-> Executing 12898 : b #0x12728 
	-> Direct Jump to 75560 if null 
	-> Start Jumping from 12898 --> 12728
-> Executing 12728 : cmn r6,#1 
-> Executing 1272c : b 75564-2 
	-> Direct Jump to 75564-2 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffffd #x00000000))) (not (= #x00000040 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xfffffffd #x00000000))) (not (not (= #x00000040 #x00000000))))UNSAT
	-> Start Jumping from 1272c --> 1272c
-> Executing 1272c : mov r0,r6 
-> Executing 1272c+2 : b 0x12730 
	-> Direct Jump to 75568 if null 
	-> Start Jumping from 1272c+2 --> 12730
-> Executing 12730 : bl #0x1b4f0 
	-> Direct Jump to 111856 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000040 #x00000000))) (not (= #x00000040 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000040 #x00000000))) (not (not (= #x00000040 #x00000000))))UNSAT
	 === Call to library function: close
-> Executing 12734 : mov r0,#2 
-> Executing 12738 : mov r1,r0 
-> Executing 1273c : mov r2,#0 
-> Executing 12740 : bl #0x18d24 
	-> Direct Jump to 101668 if null 
	 === Call to library function: socket
-> Executing 12744 : cmn r0,#1 
-> Executing 12748 : mov r6,r0 
-> Executing 1274c : b #0x128d4 
	-> Direct Jump to 75988 if EQ 
	-> Checking path constrains by Z3 ...  fffffd #x00000000))) (not (= #x00000040 #x00000000))) (= #x00000041 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000040 #x00000000))) (not (= #x00000041 #x00000000)))SAT
	-> Start Jumping from 1274c --> 12750
-> Executing 12750 : add r1,sp,#0x1080 
-> Executing 12754 : add r1,r1,#0x14 
-> Executing 12758 : mov r2,#0x10 
-> Executing 1275c : bl #0x18890 
	-> Direct Jump to 100496 if null 
	 === Call to library function: connect
-> Executing 12760 : cmn r0,#1 
-> Executing 12764 : b #0x1289c 
	-> Direct Jump to 75932 if EQ 
	-> Checking path constrains by Z3 ...  000040 #x00000000))) (not (= #x00000041 #x00000000))) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000041 #x00000000))) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 12764 --> 1289c
-> Executing 1289c : add r0,r0,#2 
-> Executing 128a0 : bl #0x1b398 
	-> Direct Jump to 111512 if null 
	 ==+ Call to: sleep
	-> Start Jumping from 128a0 --> 1b398
-> Executing 1b398 : push {r4,r5,r6,r7,lr} 
-> Executing 1b39c : ldr r7,[pc,#0x114] 
-> Executing 1b3a0 : sub sp,sp,#0x2c 
-> Executing 1b3a4 : mov r4,#0 
-> Executing 1b3a8 : cmp r0,#0 
-> Executing 1b3ac : add r7,pc,r7 
-> Executing 1b3b0 : str r0,[sp,#0x20] 
-> Executing 1b3b4 : str r4,[sp,#0x24] 
-> Executing 1b3b8 : b #0x1b430 
	-> Direct Jump to 111664 if NE 
	-> Checking path constrains by Z3 ...  000041 #x00000000))) (= #x00000000 #x00000000)) (not (= #x00000001 #x00000000)))SAT
	-> Checking path constrains by Z3 ...   #x00000000))) (= #x00000000 #x00000000)) (not (not (= #x00000001 #x00000000))))UNSAT
	-> Start Jumping from 1b3b8 --> 1b430
-> Executing 1b430 : mov r3,#0x10000 
-> Executing 1b434 : mov r0,#0x11 
-> Executing 1b438 : mov r1,r4 
-> Executing 1b43c : add r2,sp,#4 
-> Executing 1b440 : str r3,[sp,#0x18] 
-> Executing 1b444 : str r4,[sp,#0x1c] 
-> Executing 1b448 : bl #0x1be74 
	-> Direct Jump to 114292 if null 
	 ==+ Call to: sigaction
	-> Start Jumping from 1b448 --> 1be74
-> Executing 1be74 : push {r4,r5,r6,lr} 
-> Executing 1be78 : ldr r4,[pc,#0x70] 
-> Executing 1be7c : sub ip,r1,#0 
-> Executing 1be80 : add r4,pc,r4 
-> Executing 1be84 : sub sp,sp,#0x18 
-> Executing 1be88 : mov r5,r0 
-> Executing 1be8c : mov r6,r2 
-> Executing 1be90 : b #0x1bed0 
	-> Direct Jump to 114384 if EQ 
	-> Checking path constrains by Z3 ...  0000000 #x00000000)) (not (= #x00000001 #x00000000))) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...  0 #x00000000)) (not (= #x00000001 #x00000000))) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 1be90 --> 1bed0
-> Executing 1bed0 : mov r0,r5 
-> Executing 1bed4 : mov r1,ip 
-> Executing 1bed8 : mov r2,r6 
-> Executing 1bedc : mov r3,#8 
-> Executing 1bee0 : bl #0x1bf30 
	-> Direct Jump to 114480 if null 
	 ==+ Call to: __syscall_rt_sigaction
	-> Start Jumping from 1bee0 --> 1bf30
-> Executing 1bf30 : push {r7,lr} 
-> Executing 1bf34 : mov r7,#0xae 
-> Executing 1bf38 : b 114488-2 
	-> Direct Jump to 114488-2 if VC 
	-> Checking path constrains by Z3 ...  000000)) (not (or (bvsgt #x00000000 #x7fffffff) (bvslt #x00000000 #x80000001))))SAT
	-> Checking path constrains by Z3 ...  )) (not (not (or (bvsgt #x00000000 #x7fffffff) (bvslt #x00000000 #x80000001)))))UNSAT
	-> Start Jumping from 1bf38 --> 1bf38
-> Executing 1bf38 :  #0 
-> Executing 1bf38+2 : b 0x1bf3c 
	-> Direct Jump to 114492 if null 
	-> Start Jumping from 1bf38+2 --> 1bf3c
-> Executing 1bf3c : cmn r0,#0x1000 
-> Executing 1bf40 : mov r2,r0 
-> Executing 1bf44 : b 114500-2 
	-> Direct Jump to 114500-2 if LS 
	-> Checking path constrains by Z3 ...  x80000001)))) (or (= #x00001011 #x00000000)(not (bvugt #x00001011 #xffffffff))))SAT
	-> Checking path constrains by Z3 ...  001)))) (not (or (= #x00001011 #x00000000)(not (bvugt #x00001011 #xffffffff)))))UNSAT
	-> Start Jumping from 1bf44 --> 1bf44
-> Executing 1bf44 : mov r0,r0 
-> Executing 1bf44+2 : b 0x1bf48 
	-> Direct Jump to 114504 if null 
	-> Start Jumping from 1bf44+2 --> 1bf48
-> Executing 1bf48 : b #0x1bf64 
	-> Direct Jump to 114532 if LS 
	-> Checking path constrains by Z3 ...  (or (= #x00001011 #x00000000)(not (bvugt #x00001011 #xffffffff)))SAT
	-> Checking path constrains by Z3 ...  (not (or (= #x00001011 #x00000000)(not (bvugt #x00001011 #xffffffff))))UNSAT
	-> Start Jumping from 1bf48 --> 1bf64
-> Executing 1bf64 : pop {r7,lr} 
-> Executing 1bf68 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 114404
	-> Start Jumping from 1bf68 --> 1bee4
-> Executing 1bee4 : add sp,sp,#0x18 
-> Executing 1bee8 : pop {r4,r5,r6,lr} 
-> Executing 1beec : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 111692
	-> Start Jumping from 1beec --> 1b44c
-> Executing 1b44c : ldr r3,[sp,#4] 
-> Executing 1b450 : cmp r3,#1 
-> Executing 1b454 : b 111700-2 
	-> Direct Jump to 111700-2 if EQ 
	-> Checking path constrains by Z3 ...  (and (or (= #x00001011 #x00000000)(not (bvugt #x00001011 #xffffffff))) (= #xffffffff #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  #x00000000)(not (bvugt #x00001011 #xffffffff))) (not (= #xffffffff #x00000000)))SAT
	-> Start Jumping from 1b454 --> 1b458
-> Executing 1b458 : b 111704-2 
	-> Direct Jump to 111704-2 if EQ 
	-> Checking path constrains by Z3 ...  001011 #xffffffff))) (not (= #xffffffff #x00000000))) (= #xffffffff #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #xffffffff))) (not (= #xffffffff #x00000000))) (not (= #xffffffff #x00000000)))SAT
	-> Start Jumping from 1b458 --> 1b45c
-> Executing 1b45c : b 111708-2 
	-> Direct Jump to 111708-2 if EQ 
	-> Checking path constrains by Z3 ...  ffffff #x00000000))) (not (= #xffffffff #x00000000))) (= #xffffffff #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffff #x00000000))) (not (= #xffffffff #x00000000)))SAT
	-> Start Jumping from 1b45c --> 1b460
-> Executing 1b460 : bl #0x1818c 
	-> Direct Jump to 98700 if EQ 
	-> Checking path constrains by Z3 ...  ffffff #x00000000))) (not (= #xffffffff #x00000000))) (= #xffffffff #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffff #x00000000))) (not (= #xffffffff #x00000000)))SAT
	-> Start Jumping from 1b460 --> 1b464
-> Executing 1b464 : add r0,sp,#0x20 
-> Executing 1b468 : mov r1,r0 
-> Executing 1b46c : bl #0x1c2bc 
	-> Direct Jump to 115388 if null 
	 === Call to library function: nanosleep
-> Executing 1b470 : cmp r0,#0 
-> Executing 1b474 : b 111732-2 
	-> Direct Jump to 111732-2 if EQ 
	-> Checking path constrains by Z3 ...  ffffff #x00000000))) (not (= #xffffffff #x00000000))) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffff #x00000000))) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 1b474 --> 1b474
-> Executing 1b474 : mov r4,r0 
-> Executing 1b474+2 : b 0x1b478 
	-> Direct Jump to 111736 if null 
	-> Start Jumping from 1b474+2 --> 1b478
-> Executing 1b478 : b #0x1b494 
	-> Direct Jump to 111764 if EQ 
	-> Checking path constrains by Z3 ...  = #xffffffff #x00000000))) (= #x00000000 #x00000000)) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...  ffffff #x00000000))) (= #x00000000 #x00000000)) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 1b478 --> 1b494
-> Executing 1b494 : ldr r3,[sp,#0x18] 
-> Executing 1b498 : and r2,r3,#0x10000 
-> Executing 1b49c : b 111772-2 
	-> Direct Jump to 111772-2 if EQ 
	-> Checking path constrains by Z3 ...  (= #x00000000 #x00000000)) (= #x00000000 #x00000000)) (= #x00010000 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  0000000 #x00000000)) (= #x00000000 #x00000000)) (not (= #x00010000 #x00000000)))SAT
	-> Start Jumping from 1b49c --> 1b4a0
-> Executing 1b4a0 : b 111776-2 
	-> Direct Jump to 111776-2 if EQ 
	-> Checking path constrains by Z3 ...  0000000 #x00000000)) (not (= #x00010000 #x00000000))) (= #x00010000 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  0 #x00000000)) (not (= #x00010000 #x00000000))) (not (= #x00010000 #x00000000)))SAT
	-> Start Jumping from 1b4a0 --> 1b4a4
-> Executing 1b4a4 : bl #0x1818c 
	-> Direct Jump to 98700 if EQ 
	-> Checking path constrains by Z3 ...  010000 #x00000000))) (not (= #x00010000 #x00000000))) (= #x00010000 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00010000 #x00000000))) (not (= #x00010000 #x00000000)))SAT
	-> Start Jumping from 1b4a4 --> 1b4a8
-> Executing 1b4a8 : mov r0,r4 
-> Executing 1b4ac : add sp,sp,#0x2c 
-> Executing 1b4b0 : pop {r4,r5,r6,r7,lr} 
-> Executing 1b4b4 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 75940
	-> Start Jumping from 1b4b4 --> 128a4
-> Executing 128a4 : cmp r8,#5 
-> Executing 128a8 : b #0x12894 
	-> Direct Jump to 75924 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00010000 #x00000000))) (not (= #xfffffffe #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00010000 #x00000000))) (not (not (= #xfffffffe #x00000000))))UNSAT
	-> Start Jumping from 128a8 --> 12894
-> Executing 12894 : add r8,r8,#1 
-> Executing 12898 : b #0x12728 
	-> Direct Jump to 75560 if null 
	-> Start Jumping from 12898 --> 12728
-> Executing 12728 : cmn r6,#1 
-> Executing 1272c : b 75564-2 
	-> Direct Jump to 75564-2 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xfffffffe #x00000000))) (not (= #x00000041 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xfffffffe #x00000000))) (not (not (= #x00000041 #x00000000))))UNSAT
	-> Start Jumping from 1272c --> 1272c
-> Executing 1272c : mov r0,r6 
-> Executing 1272c+2 : b 0x12730 
	-> Direct Jump to 75568 if null 
	-> Start Jumping from 1272c+2 --> 12730
-> Executing 12730 : bl #0x1b4f0 
	-> Direct Jump to 111856 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000041 #x00000000))) (not (= #x00000041 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000041 #x00000000))) (not (not (= #x00000041 #x00000000))))UNSAT
	 === Call to library function: close
-> Executing 12734 : mov r0,#2 
-> Executing 12738 : mov r1,r0 
-> Executing 1273c : mov r2,#0 
-> Executing 12740 : bl #0x18d24 
	-> Direct Jump to 101668 if null 
	 === Call to library function: socket
-> Executing 12744 : cmn r0,#1 
-> Executing 12748 : mov r6,r0 
-> Executing 1274c : b #0x128d4 
	-> Direct Jump to 75988 if EQ 
	-> Checking path constrains by Z3 ...  fffffe #x00000000))) (not (= #x00000041 #x00000000))) (= #x00000042 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000041 #x00000000))) (not (= #x00000042 #x00000000)))SAT
	-> Start Jumping from 1274c --> 12750
-> Executing 12750 : add r1,sp,#0x1080 
-> Executing 12754 : add r1,r1,#0x14 
-> Executing 12758 : mov r2,#0x10 
-> Executing 1275c : bl #0x18890 
	-> Direct Jump to 100496 if null 
	 === Call to library function: connect
-> Executing 12760 : cmn r0,#1 
-> Executing 12764 : b #0x1289c 
	-> Direct Jump to 75932 if EQ 
	-> Checking path constrains by Z3 ...  000041 #x00000000))) (not (= #x00000042 #x00000000))) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000042 #x00000000))) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 12764 --> 1289c
-> Executing 1289c : add r0,r0,#2 
-> Executing 128a0 : bl #0x1b398 
	-> Direct Jump to 111512 if null 
	 ==+ Call to: sleep
	-> Start Jumping from 128a0 --> 1b398
-> Executing 1b398 : push {r4,r5,r6,r7,lr} 
-> Executing 1b39c : ldr r7,[pc,#0x114] 
-> Executing 1b3a0 : sub sp,sp,#0x2c 
-> Executing 1b3a4 : mov r4,#0 
-> Executing 1b3a8 : cmp r0,#0 
-> Executing 1b3ac : add r7,pc,r7 
-> Executing 1b3b0 : str r0,[sp,#0x20] 
-> Executing 1b3b4 : str r4,[sp,#0x24] 
-> Executing 1b3b8 : b #0x1b430 
	-> Direct Jump to 111664 if NE 
	-> Checking path constrains by Z3 ...  000042 #x00000000))) (= #x00000000 #x00000000)) (not (= #x00000001 #x00000000)))SAT
	-> Checking path constrains by Z3 ...   #x00000000))) (= #x00000000 #x00000000)) (not (not (= #x00000001 #x00000000))))UNSAT
	-> Start Jumping from 1b3b8 --> 1b430
-> Executing 1b430 : mov r3,#0x10000 
-> Executing 1b434 : mov r0,#0x11 
-> Executing 1b438 : mov r1,r4 
-> Executing 1b43c : add r2,sp,#4 
-> Executing 1b440 : str r3,[sp,#0x18] 
-> Executing 1b444 : str r4,[sp,#0x1c] 
-> Executing 1b448 : bl #0x1be74 
	-> Direct Jump to 114292 if null 
	 ==+ Call to: sigaction
	-> Start Jumping from 1b448 --> 1be74
-> Executing 1be74 : push {r4,r5,r6,lr} 
-> Executing 1be78 : ldr r4,[pc,#0x70] 
-> Executing 1be7c : sub ip,r1,#0 
-> Executing 1be80 : add r4,pc,r4 
-> Executing 1be84 : sub sp,sp,#0x18 
-> Executing 1be88 : mov r5,r0 
-> Executing 1be8c : mov r6,r2 
-> Executing 1be90 : b #0x1bed0 
	-> Direct Jump to 114384 if EQ 
	-> Checking path constrains by Z3 ...  0000000 #x00000000)) (not (= #x00000001 #x00000000))) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...  0 #x00000000)) (not (= #x00000001 #x00000000))) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 1be90 --> 1bed0
-> Executing 1bed0 : mov r0,r5 
-> Executing 1bed4 : mov r1,ip 
-> Executing 1bed8 : mov r2,r6 
-> Executing 1bedc : mov r3,#8 
-> Executing 1bee0 : bl #0x1bf30 
	-> Direct Jump to 114480 if null 
	 ==+ Call to: __syscall_rt_sigaction
	-> Start Jumping from 1bee0 --> 1bf30
-> Executing 1bf30 : push {r7,lr} 
-> Executing 1bf34 : mov r7,#0xae 
-> Executing 1bf38 : b 114488-2 
	-> Direct Jump to 114488-2 if VC 
	-> Checking path constrains by Z3 ...  000000)) (not (or (bvsgt #x00000000 #x7fffffff) (bvslt #x00000000 #x80000001))))SAT
	-> Checking path constrains by Z3 ...  )) (not (not (or (bvsgt #x00000000 #x7fffffff) (bvslt #x00000000 #x80000001)))))UNSAT
	-> Start Jumping from 1bf38 --> 1bf38
-> Executing 1bf38 :  #0 
-> Executing 1bf38+2 : b 0x1bf3c 
	-> Direct Jump to 114492 if null 
	-> Start Jumping from 1bf38+2 --> 1bf3c
-> Executing 1bf3c : cmn r0,#0x1000 
-> Executing 1bf40 : mov r2,r0 
-> Executing 1bf44 : b 114500-2 
	-> Direct Jump to 114500-2 if LS 
	-> Checking path constrains by Z3 ...  x80000001)))) (or (= #x00001011 #x00000000)(not (bvugt #x00001011 #xffffffff))))SAT
	-> Checking path constrains by Z3 ...  001)))) (not (or (= #x00001011 #x00000000)(not (bvugt #x00001011 #xffffffff)))))UNSAT
	-> Start Jumping from 1bf44 --> 1bf44
-> Executing 1bf44 : mov r0,r0 
-> Executing 1bf44+2 : b 0x1bf48 
	-> Direct Jump to 114504 if null 
	-> Start Jumping from 1bf44+2 --> 1bf48
-> Executing 1bf48 : b #0x1bf64 
	-> Direct Jump to 114532 if LS 
	-> Checking path constrains by Z3 ...  xffffffff)))) (or (= #x00001011 #x00000000)(not (bvugt #x00001011 #xffffffff))))SAT
	-> Checking path constrains by Z3 ...  fff)))) (not (or (= #x00001011 #x00000000)(not (bvugt #x00001011 #xffffffff)))))UNSAT
	-> Start Jumping from 1bf48 --> 1bf64
-> Executing 1bf64 : pop {r7,lr} 
-> Executing 1bf68 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 114404
	-> Start Jumping from 1bf68 --> 1bee4
-> Executing 1bee4 : add sp,sp,#0x18 
-> Executing 1bee8 : pop {r4,r5,r6,lr} 
-> Executing 1beec : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 111692
	-> Start Jumping from 1beec --> 1b44c
-> Executing 1b44c : ldr r3,[sp,#4] 
-> Executing 1b450 : cmp r3,#1 
-> Executing 1b454 : b 111700-2 
	-> Direct Jump to 111700-2 if EQ 
	-> Checking path constrains by Z3 ...  1011 #x00000000)(not (bvugt #x00001011 #xffffffff)))) (= #xffffffff #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  x00000000)(not (bvugt #x00001011 #xffffffff)))) (not (= #xffffffff #x00000000)))SAT
	-> Start Jumping from 1b454 --> 1b458
-> Executing 1b458 : b 111704-2 
	-> Direct Jump to 111704-2 if EQ 
	-> Checking path constrains by Z3 ...  01011 #xffffffff)))) (not (= #xffffffff #x00000000))) (= #xffffffff #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  #xffffffff)))) (not (= #xffffffff #x00000000))) (not (= #xffffffff #x00000000)))SAT
	-> Start Jumping from 1b458 --> 1b45c
-> Executing 1b45c : b 111708-2 
	-> Direct Jump to 111708-2 if EQ 
	-> Checking path constrains by Z3 ...  ffffff #x00000000))) (not (= #xffffffff #x00000000))) (= #xffffffff #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffff #x00000000))) (not (= #xffffffff #x00000000)))SAT
	-> Start Jumping from 1b45c --> 1b460
-> Executing 1b460 : bl #0x1818c 
	-> Direct Jump to 98700 if EQ 
	-> Checking path constrains by Z3 ...  ffffff #x00000000))) (not (= #xffffffff #x00000000))) (= #xffffffff #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffff #x00000000))) (not (= #xffffffff #x00000000)))SAT
	-> Start Jumping from 1b460 --> 1b464
-> Executing 1b464 : add r0,sp,#0x20 
-> Executing 1b468 : mov r1,r0 
-> Executing 1b46c : bl #0x1c2bc 
	-> Direct Jump to 115388 if null 
	 === Call to library function: nanosleep
-> Executing 1b470 : cmp r0,#0 
-> Executing 1b474 : b 111732-2 
	-> Direct Jump to 111732-2 if EQ 
	-> Checking path constrains by Z3 ...  ffffff #x00000000))) (not (= #xffffffff #x00000000))) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffff #x00000000))) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 1b474 --> 1b474
-> Executing 1b474 : mov r4,r0 
-> Executing 1b474+2 : b 0x1b478 
	-> Direct Jump to 111736 if null 
	-> Start Jumping from 1b474+2 --> 1b478
-> Executing 1b478 : b #0x1b494 
	-> Direct Jump to 111764 if EQ 
	-> Checking path constrains by Z3 ...  = #xffffffff #x00000000))) (= #x00000000 #x00000000)) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...  ffffff #x00000000))) (= #x00000000 #x00000000)) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 1b478 --> 1b494
-> Executing 1b494 : ldr r3,[sp,#0x18] 
-> Executing 1b498 : and r2,r3,#0x10000 
-> Executing 1b49c : b 111772-2 
	-> Direct Jump to 111772-2 if EQ 
	-> Checking path constrains by Z3 ...  (= #x00000000 #x00000000)) (= #x00000000 #x00000000)) (= #x00010000 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  0000000 #x00000000)) (= #x00000000 #x00000000)) (not (= #x00010000 #x00000000)))SAT
	-> Start Jumping from 1b49c --> 1b4a0
-> Executing 1b4a0 : b 111776-2 
	-> Direct Jump to 111776-2 if EQ 
	-> Checking path constrains by Z3 ...  0000000 #x00000000)) (not (= #x00010000 #x00000000))) (= #x00010000 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  0 #x00000000)) (not (= #x00010000 #x00000000))) (not (= #x00010000 #x00000000)))SAT
	-> Start Jumping from 1b4a0 --> 1b4a4
-> Executing 1b4a4 : bl #0x1818c 
	-> Direct Jump to 98700 if EQ 
	-> Checking path constrains by Z3 ...  010000 #x00000000))) (not (= #x00010000 #x00000000))) (= #x00010000 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00010000 #x00000000))) (not (= #x00010000 #x00000000)))SAT
	-> Start Jumping from 1b4a4 --> 1b4a8
-> Executing 1b4a8 : mov r0,r4 
-> Executing 1b4ac : add sp,sp,#0x2c 
-> Executing 1b4b0 : pop {r4,r5,r6,r7,lr} 
-> Executing 1b4b4 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 75940
	-> Start Jumping from 1b4b4 --> 128a4
-> Executing 128a4 : cmp r8,#5 
-> Executing 128a8 : b #0x12894 
	-> Direct Jump to 75924 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00010000 #x00000000))) (not (= #xffffffff #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00010000 #x00000000))) (not (not (= #xffffffff #x00000000))))UNSAT
	-> Start Jumping from 128a8 --> 12894
-> Executing 12894 : add r8,r8,#1 
-> Executing 12898 : b #0x12728 
	-> Direct Jump to 75560 if null 
	-> Start Jumping from 12898 --> 12728
-> Executing 12728 : cmn r6,#1 
-> Executing 1272c : b 75564-2 
	-> Direct Jump to 75564-2 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffff #x00000000))) (not (= #x00000042 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #xffffffff #x00000000))) (not (not (= #x00000042 #x00000000))))UNSAT
	-> Start Jumping from 1272c --> 1272c
-> Executing 1272c : mov r0,r6 
-> Executing 1272c+2 : b 0x12730 
	-> Direct Jump to 75568 if null 
	-> Start Jumping from 1272c+2 --> 12730
-> Executing 12730 : bl #0x1b4f0 
	-> Direct Jump to 111856 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000042 #x00000000))) (not (= #x00000042 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000042 #x00000000))) (not (not (= #x00000042 #x00000000))))UNSAT
	 === Call to library function: close
-> Executing 12734 : mov r0,#2 
-> Executing 12738 : mov r1,r0 
-> Executing 1273c : mov r2,#0 
-> Executing 12740 : bl #0x18d24 
	-> Direct Jump to 101668 if null 
	 === Call to library function: socket
-> Executing 12744 : cmn r0,#1 
-> Executing 12748 : mov r6,r0 
-> Executing 1274c : b #0x128d4 
	-> Direct Jump to 75988 if EQ 
	-> Checking path constrains by Z3 ...  ffffff #x00000000))) (not (= #x00000042 #x00000000))) (= #x00000043 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000042 #x00000000))) (not (= #x00000043 #x00000000)))SAT
	-> Start Jumping from 1274c --> 12750
-> Executing 12750 : add r1,sp,#0x1080 
-> Executing 12754 : add r1,r1,#0x14 
-> Executing 12758 : mov r2,#0x10 
-> Executing 1275c : bl #0x18890 
	-> Direct Jump to 100496 if null 
	 === Call to library function: connect
-> Executing 12760 : cmn r0,#1 
-> Executing 12764 : b #0x1289c 
	-> Direct Jump to 75932 if EQ 
	-> Checking path constrains by Z3 ...  000042 #x00000000))) (not (= #x00000043 #x00000000))) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000043 #x00000000))) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 12764 --> 1289c
-> Executing 1289c : add r0,r0,#2 
-> Executing 128a0 : bl #0x1b398 
	-> Direct Jump to 111512 if null 
	 ==+ Call to: sleep
	-> Start Jumping from 128a0 --> 1b398
-> Executing 1b398 : push {r4,r5,r6,r7,lr} 
-> Executing 1b39c : ldr r7,[pc,#0x114] 
-> Executing 1b3a0 : sub sp,sp,#0x2c 
-> Executing 1b3a4 : mov r4,#0 
-> Executing 1b3a8 : cmp r0,#0 
-> Executing 1b3ac : add r7,pc,r7 
-> Executing 1b3b0 : str r0,[sp,#0x20] 
-> Executing 1b3b4 : str r4,[sp,#0x24] 
-> Executing 1b3b8 : b #0x1b430 
	-> Direct Jump to 111664 if NE 
	-> Checking path constrains by Z3 ...  000043 #x00000000))) (= #x00000000 #x00000000)) (not (= #x00000001 #x00000000)))SAT
	-> Checking path constrains by Z3 ...   #x00000000))) (= #x00000000 #x00000000)) (not (not (= #x00000001 #x00000000))))UNSAT
	-> Start Jumping from 1b3b8 --> 1b430
-> Executing 1b430 : mov r3,#0x10000 
-> Executing 1b434 : mov r0,#0x11 
-> Executing 1b438 : mov r1,r4 
-> Executing 1b43c : add r2,sp,#4 
-> Executing 1b440 : str r3,[sp,#0x18] 
-> Executing 1b444 : str r4,[sp,#0x1c] 
-> Executing 1b448 : bl #0x1be74 
	-> Direct Jump to 114292 if null 
	 ==+ Call to: sigaction
	-> Start Jumping from 1b448 --> 1be74
-> Executing 1be74 : push {r4,r5,r6,lr} 
-> Executing 1be78 : ldr r4,[pc,#0x70] 
-> Executing 1be7c : sub ip,r1,#0 
-> Executing 1be80 : add r4,pc,r4 
-> Executing 1be84 : sub sp,sp,#0x18 
-> Executing 1be88 : mov r5,r0 
-> Executing 1be8c : mov r6,r2 
-> Executing 1be90 : b #0x1bed0 
	-> Direct Jump to 114384 if EQ 
	-> Checking path constrains by Z3 ...  0000000 #x00000000)) (not (= #x00000001 #x00000000))) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...  0 #x00000000)) (not (= #x00000001 #x00000000))) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 1be90 --> 1bed0
-> Executing 1bed0 : mov r0,r5 
-> Executing 1bed4 : mov r1,ip 
-> Executing 1bed8 : mov r2,r6 
-> Executing 1bedc : mov r3,#8 
-> Executing 1bee0 : bl #0x1bf30 
	-> Direct Jump to 114480 if null 
	 ==+ Call to: __syscall_rt_sigaction
	-> Start Jumping from 1bee0 --> 1bf30
-> Executing 1bf30 : push {r7,lr} 
-> Executing 1bf34 : mov r7,#0xae 
-> Executing 1bf38 : b 114488-2 
	-> Direct Jump to 114488-2 if VC 
	-> Checking path constrains by Z3 ...  000000)) (not (or (bvsgt #x00000000 #x7fffffff) (bvslt #x00000000 #x80000001))))SAT
	-> Checking path constrains by Z3 ...  )) (not (not (or (bvsgt #x00000000 #x7fffffff) (bvslt #x00000000 #x80000001)))))UNSAT
	-> Start Jumping from 1bf38 --> 1bf38
-> Executing 1bf38 :  #0 
-> Executing 1bf38+2 : b 0x1bf3c 
	-> Direct Jump to 114492 if null 
	-> Start Jumping from 1bf38+2 --> 1bf3c
-> Executing 1bf3c : cmn r0,#0x1000 
-> Executing 1bf40 : mov r2,r0 
-> Executing 1bf44 : b 114500-2 
	-> Direct Jump to 114500-2 if LS 
	-> Checking path constrains by Z3 ...  x80000001)))) (or (= #x00001011 #x00000000)(not (bvugt #x00001011 #xffffffff))))SAT
	-> Checking path constrains by Z3 ...  001)))) (not (or (= #x00001011 #x00000000)(not (bvugt #x00001011 #xffffffff)))))UNSAT
	-> Start Jumping from 1bf44 --> 1bf44
-> Executing 1bf44 : mov r0,r0 
-> Executing 1bf44+2 : b 0x1bf48 
	-> Direct Jump to 114504 if null 
	-> Start Jumping from 1bf44+2 --> 1bf48
-> Executing 1bf48 : b #0x1bf64 
	-> Direct Jump to 114532 if LS 
	-> Checking path constrains by Z3 ...  xffffffff)))) (or (= #x00001011 #x00000000)(not (bvugt #x00001011 #xffffffff))))SAT
	-> Checking path constrains by Z3 ...  fff)))) (not (or (= #x00001011 #x00000000)(not (bvugt #x00001011 #xffffffff)))))UNSAT
	-> Start Jumping from 1bf48 --> 1bf64
-> Executing 1bf64 : pop {r7,lr} 
-> Executing 1bf68 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 114404
	-> Start Jumping from 1bf68 --> 1bee4
-> Executing 1bee4 : add sp,sp,#0x18 
-> Executing 1bee8 : pop {r4,r5,r6,lr} 
-> Executing 1beec : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 111692
	-> Start Jumping from 1beec --> 1b44c
-> Executing 1b44c : ldr r3,[sp,#4] 
-> Executing 1b450 : cmp r3,#1 
-> Executing 1b454 : b 111700-2 
	-> Direct Jump to 111700-2 if EQ 
	-> Checking path constrains by Z3 ...  1011 #x00000000)(not (bvugt #x00001011 #xffffffff)))) (= #xffffffff #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  x00000000)(not (bvugt #x00001011 #xffffffff)))) (not (= #xffffffff #x00000000)))SAT
	-> Start Jumping from 1b454 --> 1b458
-> Executing 1b458 : b 111704-2 
	-> Direct Jump to 111704-2 if EQ 
	-> Checking path constrains by Z3 ...  01011 #xffffffff)))) (not (= #xffffffff #x00000000))) (= #xffffffff #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  #xffffffff)))) (not (= #xffffffff #x00000000))) (not (= #xffffffff #x00000000)))SAT
	-> Start Jumping from 1b458 --> 1b45c
-> Executing 1b45c : b 111708-2 
	-> Direct Jump to 111708-2 if EQ 
	-> Checking path constrains by Z3 ...  ffffff #x00000000))) (not (= #xffffffff #x00000000))) (= #xffffffff #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffff #x00000000))) (not (= #xffffffff #x00000000)))SAT
	-> Start Jumping from 1b45c --> 1b460
-> Executing 1b460 : bl #0x1818c 
	-> Direct Jump to 98700 if EQ 
	-> Checking path constrains by Z3 ...  ffffff #x00000000))) (not (= #xffffffff #x00000000))) (= #xffffffff #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffff #x00000000))) (not (= #xffffffff #x00000000)))SAT
	-> Start Jumping from 1b460 --> 1b464
-> Executing 1b464 : add r0,sp,#0x20 
-> Executing 1b468 : mov r1,r0 
-> Executing 1b46c : bl #0x1c2bc 
	-> Direct Jump to 115388 if null 
	 === Call to library function: nanosleep
-> Executing 1b470 : cmp r0,#0 
-> Executing 1b474 : b 111732-2 
	-> Direct Jump to 111732-2 if EQ 
	-> Checking path constrains by Z3 ...  ffffff #x00000000))) (not (= #xffffffff #x00000000))) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #xffffffff #x00000000))) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 1b474 --> 1b474
-> Executing 1b474 : mov r4,r0 
-> Executing 1b474+2 : b 0x1b478 
	-> Direct Jump to 111736 if null 
	-> Start Jumping from 1b474+2 --> 1b478
-> Executing 1b478 : b #0x1b494 
	-> Direct Jump to 111764 if EQ 
	-> Checking path constrains by Z3 ...  = #xffffffff #x00000000))) (= #x00000000 #x00000000)) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...  ffffff #x00000000))) (= #x00000000 #x00000000)) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 1b478 --> 1b494
-> Executing 1b494 : ldr r3,[sp,#0x18] 
-> Executing 1b498 : and r2,r3,#0x10000 
-> Executing 1b49c : b 111772-2 
	-> Direct Jump to 111772-2 if EQ 
	-> Checking path constrains by Z3 ...  (= #x00000000 #x00000000)) (= #x00000000 #x00000000)) (= #x00010000 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  0000000 #x00000000)) (= #x00000000 #x00000000)) (not (= #x00010000 #x00000000)))SAT
	-> Start Jumping from 1b49c --> 1b4a0
-> Executing 1b4a0 : b 111776-2 
	-> Direct Jump to 111776-2 if EQ 
	-> Checking path constrains by Z3 ...  0000000 #x00000000)) (not (= #x00010000 #x00000000))) (= #x00010000 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  0 #x00000000)) (not (= #x00010000 #x00000000))) (not (= #x00010000 #x00000000)))SAT
	-> Start Jumping from 1b4a0 --> 1b4a4
-> Executing 1b4a4 : bl #0x1818c 
	-> Direct Jump to 98700 if EQ 
	-> Checking path constrains by Z3 ...  010000 #x00000000))) (not (= #x00010000 #x00000000))) (= #x00010000 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00010000 #x00000000))) (not (= #x00010000 #x00000000)))SAT
	-> Start Jumping from 1b4a4 --> 1b4a8
-> Executing 1b4a8 : mov r0,r4 
-> Executing 1b4ac : add sp,sp,#0x2c 
-> Executing 1b4b0 : pop {r4,r5,r6,r7,lr} 
-> Executing 1b4b4 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 75940
	-> Start Jumping from 1b4b4 --> 128a4
-> Executing 128a4 : cmp r8,#5 
-> Executing 128a8 : b #0x12894 
	-> Direct Jump to 75924 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00010000 #x00000000))) (not (= #x00000000 #x00000000)))UNSAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00010000 #x00000000))) (not (not (= #x00000000 #x00000000))))SAT
	-> Start Jumping from 128a8 --> 128ac
-> Executing 128ac : mov r0,r6 
-> Executing 128b0 : bl #0x1b4f0 
	-> Direct Jump to 111856 if null 
	 === Call to library function: close
-> Executing 128b4 : ldrb r4,[fp] 
-> Executing 128b8 : cmp r4,#0 
-> Executing 128bc : b #0x129fc 
	-> Direct Jump to 76284 if EQ 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (not (= #x00000000 #x00000000)))) (= #x000081d0 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  00000))) (not (not (= #x00000000 #x00000000)))) (not (= #x000081d0 #x00000000)))SAT
	-> Start Jumping from 128bc --> 128c0
-> Executing 128c0 : mov r0,fp 
-> Executing 128c4 : add sp,sp,#0xb4 
-> Executing 128c8 : add sp,sp,#0x1000 
-> Executing 128cc : pop {r4,r5,r6,r7,r8,sb,sl,fp,lr} 
-> Executing 128d0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 72728
	-> Start Jumping from 128d0 --> 11c18
-> Executing 11c18 : sub r6,r0,#0 
-> Executing 11c1c : b #0x11c70 
	-> Direct Jump to 72816 if EQ 
	-> Checking path constrains by Z3 ...  00000 #x00000000)))) (not (= #x000081d0 #x00000000))) (= #x00000001 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  #x00000000)))) (not (= #x000081d0 #x00000000))) (not (= #x00000001 #x00000000)))SAT
	-> Start Jumping from 11c1c --> 11c20
-> Executing 11c20 : ldr r4,[r6,#4] 
-> Executing 11c24 : bl #0x12420 
	-> Direct Jump to 74784 if null 
	 ==+ Call to: rand_next
	-> Start Jumping from 11c24 --> 12420
-> Executing 12420 : push {r4,r5,r6,lr} 
-> Executing 12424 : ldr r5,[pc,#0x40] 
-> Executing 12428 : ldr r6,[pc,#0x40] 
-> Executing 1242c : ldr r3,[r5] 
-> Executing 12430 : ldr r2,[r6] 
-> Executing 12434 : ldr lr,[pc,#0x38] 
-> Executing 12438 : ldr r4,[pc,#0x38] 
-> Executing 1243c : eor r3,r3,r3,lsl #11 
-> Executing 12440 : eor r0,r2,r2,lsr #19 
-> Executing 12444 : ldr r1,[lr] 
-> Executing 12448 : ldr ip,[r4] 
-> Executing 1244c : eor r0,r0,r3 
-> Executing 12450 : eor r0,r0,r3,lsr #8 
-> Executing 12454 : str r1,[r5] 
-> Executing 12458 : str ip,[lr] 
-> Executing 1245c : str r2,[r4] 
-> Executing 12460 : str r0,[r6] 
-> Executing 12464 : pop {r4,r5,r6,lr} 
-> Executing 12468 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 72744
	-> Start Jumping from 12468 --> 11c28
-> Executing 11c28 : ldrb r1,[r6] 
-> Executing 11c2c : bl #0x17c1c 
	-> Direct Jump to 97308 if null 
	-> Start Jumping from 11c2c --> 17c1c
-> Executing 17c1c : push {r0,r1,lr} 
-> Executing 17c20 : bl #0x17b20 
	-> Direct Jump to 97056 if null 
	-> Start Jumping from 17c20 --> 17b20
-> Executing 17b20 : sub r2,r1,#1 
-> Executing 17b24 : bx lr 
	-> Indirect Jump to lr if EQ 
	-> Checking path constrains by Z3 ...  0081d0 #x00000000))) (not (= #x00000001 #x00000000))) (= #x000081cf #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000001 #x00000000))) (not (= #x000081cf #x00000000)))SAT
	-> Start Jumping from 17b24 --> 17b28
-> Executing 17b28 : b #0x17c08 
	-> Direct Jump to 97288 if LO 
	-> Checking path constrains by Z3 ...  0000000))) (not (= #x000081cf #x00000000))) (not (bvugt #x000081cf #xffffffff)))SAT
	-> Checking path constrains by Z3 ...  0))) (not (= #x000081cf #x00000000))) (not (not (bvugt #x000081cf #xffffffff))))UNSAT
	-> Start Jumping from 17b28 --> 17c08
-> Executing 17c08 : str lr,[sp,#-8]! 
-> Executing 17c0c : bl #0x17d78 
	-> Direct Jump to 97656 if null 
	-> Start Jumping from 17c0c --> 17d78
-> Executing 17d78 : push {r1,lr} 
-> Executing 17d7c : mov r0,#8 
-> Executing 17d80 : bl #0x1b2a8 
	-> Direct Jump to 111272 if null 
	 === Call to library function: raise
-> Executing 17d84 : pop {r1,lr} 
-> Executing 17d88 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 97296
	-> Start Jumping from 17d88 --> 17c10
-> Executing 17c10 : mov r0,#0 
-> Executing 17c14 : ldr lr,[sp],#8 
-> Executing 17c18 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 97316
	-> Start Jumping from 17c18 --> 17c24
-> Executing 17c24 : pop {r1,r2,lr} 
-> Executing 17c28 : mul r3,r2,r0 
-> Executing 17c2c : sub r1,r1,r3 
-> Executing 17c30 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 72752
	-> Start Jumping from 17c30 --> 11c30
-> Executing 11c30 : ldr r5,[pc,#0x50] 
-> Executing 11c34 : ldr r3,[r4,r1,lsl #2] 
-> Executing 11c38 : mov r0,r6 
-> Executing 11c3c : str r3,[r5,#4] 
-> Executing 11c40 : bl #0x125c0 
	-> Direct Jump to 75200 if null 
	 ==+ Call to: resolv_entries_free
	-> Start Jumping from 11c40 --> 125c0
-> Executing 125c0 : push {r4,lr} 
-> Executing 125c4 : sub r4,r0,#0 
-> Executing 125c8 : b #0x125e0 
	-> Direct Jump to 75232 if EQ 
	-> Checking path constrains by Z3 ...  cf #x00000000))) (not (bvugt #x000081cf #xffffffff))) (= #x00000001 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  0000000))) (not (bvugt #x000081cf #xffffffff))) (not (= #x00000001 #x00000000)))SAT
	-> Start Jumping from 125c8 --> 125cc
-> Executing 125cc : ldr r0,[r4,#4] 
-> Executing 125d0 : cmp r0,#0 
-> Executing 125d4 : bl #0x1a010 
	-> Direct Jump to 106512 if NE 
	-> Checking path constrains by Z3 ...   #xffffffff))) (not (= #x00000001 #x00000000))) (not (= #x00000008 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  fffff))) (not (= #x00000001 #x00000000))) (not (not (= #x00000008 #x00000000))))UNSAT
	 === Call to library function: free
-> Executing 125d8 : mov r0,r4 
-> Executing 125dc : bl #0x1a010 
	-> Direct Jump to 106512 if null 
	 === Call to library function: free
-> Executing 125e0 : pop {r4,lr} 
-> Executing 125e4 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 72772
	-> Start Jumping from 125e4 --> 11c44
-> Executing 11c44 : mov r0,#4 
-> Executing 11c48 : bl #0x15e2c 
	-> Direct Jump to 89644 if null 
	 ==+ Call to: table_unlock_val
	-> Start Jumping from 11c48 --> 15e2c
-> Executing 15e2c : ldr r3,[pc,#0x90] 
-> Executing 15e30 : ldr r2,[pc,#0x90] 
-> Executing 15e34 : lsl r0,r0,#3 
-> Executing 15e38 : add r0,r0,r3 
-> Executing 15e3c : ldr r1,[r2] 
-> Executing 15e40 : ldrh r3,[r0,#4] 
-> Executing 15e44 : lsr r2,r1,#8 
-> Executing 15e48 : cmp r3,#0 
-> Executing 15e4c : lsr r3,r1,#0x10 
-> Executing 15e50 : push {r4,r5,r6,lr} 
-> Executing 15e54 : and r6,r2,#0xff 
-> Executing 15e58 : and r5,r3,#0xff 
-> Executing 15e5c : lsr r4,r1,#0x18 
-> Executing 15e60 : and lr,r1,#0xff 
-> Executing 15e64 : b #0x15ebc 
	-> Direct Jump to 89788 if EQ 
	-> Checking path constrains by Z3 ...  0081cf #xffffffff))) (not (= #x00000001 #x00000000))) (= #x00000002 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #xffffffff))) (not (= #x00000001 #x00000000))) (not (= #x00000002 #x00000000)))SAT
	-> Start Jumping from 15e64 --> 15e68
-> Executing 15e68 : mov ip,#0 
-> Executing 15e6c : ldr r2,[r0] 
-> Executing 15e70 : ldrb r3,[ip,r2] 
-> Executing 15e74 : eor r3,lr,r3 
-> Executing 15e78 : strb r3,[ip,r2] 
-> Executing 15e7c : ldr r1,[r0] 
-> Executing 15e80 : ldrb r3,[ip,r1] 
-> Executing 15e84 : eor r3,r6,r3 
-> Executing 15e88 : strb r3,[ip,r1] 
-> Executing 15e8c : ldr r2,[r0] 
-> Executing 15e90 : ldrb r3,[ip,r2] 
-> Executing 15e94 : eor r3,r5,r3 
-> Executing 15e98 : strb r3,[ip,r2] 
-> Executing 15e9c : ldr r1,[r0] 
-> Executing 15ea0 : ldrb r3,[ip,r1] 
-> Executing 15ea4 : eor r3,r4,r3 
-> Executing 15ea8 : strb r3,[ip,r1] 
-> Executing 15eac : ldrh r2,[r0,#4] 
-> Executing 15eb0 : add ip,ip,#1 
-> Executing 15eb4 : cmp r2,ip 
-> Executing 15eb8 : b #0x15e6c 
	-> Direct Jump to 89708 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000001 #x7fffffff) (bvslt #x00000001 #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000001 #x7fffffff) (bvslt #x00000001 #x80000001))))))UNSAT
	-> Start Jumping from 15eb8 --> 15e6c
	-> Loop limitation exceeded, break.
-> Executing 15ebc : pop {r4,r5,r6,lr} 
-> Executing 15ec0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 72780
	-> Start Jumping from 15ec0 --> 11c4c
-> Executing 11c4c : mov r0,#4 
-> Executing 11c50 : mov r1,#0 
-> Executing 11c54 : bl #0x15d68 
	-> Direct Jump to 89448 if null 
	 ==+ Call to: table_retrieve_val
	-> Start Jumping from 11c54 --> 15d68
-> Executing 15d68 : ldr r2,[pc,#0x18] 
-> Executing 15d6c : lsl r0,r0,#3 
-> Executing 15d70 : add r3,r0,r2 
-> Executing 15d74 : cmp r1,#0 
-> Executing 15d78 : b 89464-2 
	-> Direct Jump to 89464-2 if NE 
	-> Checking path constrains by Z3 ...  1 #x7fffffff) (bvslt #x00000001 #x80000001))))) (not (= #x00000000 #x00000000)))UNSAT
	-> Checking path constrains by Z3 ...  ffffff) (bvslt #x00000001 #x80000001))))) (not (not (= #x00000000 #x00000000))))SAT
	-> Start Jumping from 15d78 --> 15d7c
-> Executing 15d7c : ldr r0,[r0,r2] 
-> Executing 15d80 : b 89472-2 
	-> Direct Jump to 89472-2 if NE 
	-> Checking path constrains by Z3 ...  001))))) (not (not (= #x00000000 #x00000000)))) (not (= #x00000000 #x00000000)))UNSAT
	-> Checking path constrains by Z3 ...  )) (not (not (= #x00000000 #x00000000)))) (not (not (= #x00000000 #x00000000))))SAT
	-> Start Jumping from 15d80 --> 15d84
-> Executing 15d84 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 72792
	-> Start Jumping from 15d84 --> 11c58
-> Executing 11c58 : ldrh r0,[r0] 
-> Executing 11c5c : strh r0,[r5,#2] 
-> Executing 11c60 : mov r0,#4 
-> Executing 11c64 : bl #0x15d8c 
	-> Direct Jump to 89484 if null 
	 ==+ Call to: table_lock_val
	-> Start Jumping from 11c64 --> 15d8c
-> Executing 15d8c : ldr r3,[pc,#0x90] 
-> Executing 15d90 : ldr r2,[pc,#0x90] 
-> Executing 15d94 : lsl r0,r0,#3 
-> Executing 15d98 : add r0,r0,r3 
-> Executing 15d9c : ldr r1,[r2] 
-> Executing 15da0 : ldrh r3,[r0,#4] 
-> Executing 15da4 : lsr r2,r1,#8 
-> Executing 15da8 : cmp r3,#0 
-> Executing 15dac : lsr r3,r1,#0x10 
-> Executing 15db0 : push {r4,r5,r6,lr} 
-> Executing 15db4 : and r6,r2,#0xff 
-> Executing 15db8 : and r5,r3,#0xff 
-> Executing 15dbc : lsr r4,r1,#0x18 
-> Executing 15dc0 : and lr,r1,#0xff 
-> Executing 15dc4 : b #0x15e1c 
	-> Direct Jump to 89628 if EQ 
	-> Checking path constrains by Z3 ...  #x00000000)))) (not (not (= #x00000000 #x00000000)))) (= #x00000002 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  0000)))) (not (not (= #x00000000 #x00000000)))) (not (= #x00000002 #x00000000)))SAT
	-> Start Jumping from 15dc4 --> 15dc8
-> Executing 15dc8 : mov ip,#0 
-> Executing 15dcc : ldr r2,[r0] 
-> Executing 15dd0 : ldrb r3,[ip,r2] 
-> Executing 15dd4 : eor r3,lr,r3 
-> Executing 15dd8 : strb r3,[ip,r2] 
-> Executing 15ddc : ldr r1,[r0] 
-> Executing 15de0 : ldrb r3,[ip,r1] 
-> Executing 15de4 : eor r3,r6,r3 
-> Executing 15de8 : strb r3,[ip,r1] 
-> Executing 15dec : ldr r2,[r0] 
-> Executing 15df0 : ldrb r3,[ip,r2] 
-> Executing 15df4 : eor r3,r5,r3 
-> Executing 15df8 : strb r3,[ip,r2] 
-> Executing 15dfc : ldr r1,[r0] 
-> Executing 15e00 : ldrb r3,[ip,r1] 
-> Executing 15e04 : eor r3,r4,r3 
-> Executing 15e08 : strb r3,[ip,r1] 
-> Executing 15e0c : ldrh r2,[r0,#4] 
-> Executing 15e10 : add ip,ip,#1 
-> Executing 15e14 : cmp r2,ip 
-> Executing 15e18 : b #0x15dcc 
	-> Direct Jump to 89548 if GT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000001 #x7fffffff) (bvslt #x00000001 #x80000001)))))SAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000001 #x7fffffff) (bvslt #x00000001 #x80000001))))))UNSAT
	-> Start Jumping from 15e18 --> 15dcc
	-> Loop limitation exceeded, break.
-> Executing 15e1c : pop {r4,r5,r6,lr} 
-> Executing 15e20 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 72808
	-> Start Jumping from 15e20 --> 11c68
-> Executing 11c68 : pop {r4,r5,r6,lr} 
-> Executing 11c6c : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 74352
	-> Start Jumping from 11c6c --> 12270
-> Executing 12270 : mov r3,#1 
-> Executing 12274 : ldr r0,[r8] 
-> Executing 12278 : ldr r1,[pc,#0x170] 
-> Executing 1227c : mov r2,#0x10 
-> Executing 12280 : strb r3,[fp] 
-> Executing 12284 : bl #0x18890 
	-> Direct Jump to 100496 if null 
	 === Call to library function: connect
-> Executing 12288 : b #0x11fa4 
	-> Direct Jump to 73636 if null 
	-> Start Jumping from 12288 --> 11fa4
-> Executing 11fa4 : ldrb r3,[fp] 
-> Executing 11fa8 : cmp r3,#0 
-> Executing 11fac : b #0x120c0 
	-> Direct Jump to 73920 if EQ 
	-> Checking path constrains by Z3 ...  0000001 #x7fffffff) (bvslt #x00000001 #x80000001))))) (= #x00000001 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  1 #x7fffffff) (bvslt #x00000001 #x80000001))))) (not (= #x00000001 #x00000000)))SAT
	-> Start Jumping from 11fac --> 11fb0
-> Executing 11fb0 : ldr ip,[sl] 
-> Executing 11fb4 : add lr,sp,#0x540 
-> Executing 11fb8 : lsr r3,ip,#5 
-> Executing 11fbc : lsl r3,r3,#2 
-> Executing 11fc0 : add lr,lr,#8 
-> Executing 11fc4 : add r3,r3,lr 
-> Executing 11fc8 : ldr r2,[r3,#-0x140] 
-> Executing 11fcc : and r0,ip,#0x1f 
-> Executing 11fd0 : mov r1,#1 
-> Executing 11fd4 : orr r2,r2,r1,lsl r0 
-> Executing 11fd8 : str r2,[r3,#-0x140] 
-> Executing 11fdc : ldr r2,[pc,#0x42c] 
-> Executing 11fe0 : ldr r0,[r2] 
-> Executing 11fe4 : cmp ip,r0 
-> Executing 11fe8 : b 73704-2 
	-> Direct Jump to 73704-2 if GE 
	-> Checking path constrains by Z3 ...  1 #x00000000) (or (bvsgt #x00000001 #x7fffffff) (bvslt #x00000001 #x80000001))))SAT
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000001 #x7fffffff) (bvslt #x00000001 #x80000001)))))UNSAT
	-> Start Jumping from 11fe8 --> 11fe8
-> Executing 11fe8 : mov r0,ip 
-> Executing 11fe8+2 : b 0x11fec 
	-> Direct Jump to 73708 if null 
	-> Start Jumping from 11fe8+2 --> 11fec
-> Executing 11fec : b 73708-2 
	-> Direct Jump to 73708-2 if LT 
	-> Checking path constrains by Z3 ...   #x00000000) (or (bvsgt #x00000001 #x7fffffff) (bvslt #x00000001 #x80000001)))))UNSAT
	-> Checking path constrains by Z3 ...  #x00000000) (or (bvsgt #x00000001 #x7fffffff) (bvslt #x00000001 #x80000001))))))SAT
	-> Start Jumping from 11fec --> 11ff0
-> Executing 11ff0 : mov ip,#0xa 
-> Executing 11ff4 : mov lr,#0 
-> Executing 11ff8 : str ip,[sp,#0x528] 
-> Executing 11ffc : add ip,sp,#0x520 
-> Executing 12000 : add ip,ip,#8 
-> Executing 12004 : add r0,r0,#1 
-> Executing 12008 : mov r3,lr 
-> Executing 1200c : mov r1,r6 
-> Executing 12010 : mov r2,r7 
-> Executing 12014 : str lr,[sp,#0x52c] 
-> Executing 12018 : str ip,[sp] 
-> Executing 1201c : bl #0x180c8 
	-> Direct Jump to 98504 if null 
	 ==+ Call to: select
	-> Start Jumping from 1201c --> 180c8
-> Executing 180c8 : push {r4,r5,r6,r7,r8,sl,lr} 
-> Executing 180cc : ldr ip,[pc,#0x70] 
-> Executing 180d0 : ldr lr,[pc,#0x70] 
-> Executing 180d4 : add ip,pc,ip 
-> Executing 180d8 : ldr lr,[ip,lr] 
-> Executing 180dc : sub sp,sp,#0xc 
-> Executing 180e0 : cmp lr,#0 
-> Executing 180e4 : mov sl,r0 
-> Executing 180e8 : mov r6,r1 
-> Executing 180ec : mov r7,r2 
-> Executing 180f0 : mov r8,r3 
-> Executing 180f4 : ldr r4,[sp,#0x28] 
-> Executing 180f8 : b #0x18108 
	-> Direct Jump to 98568 if NE 
	-> Checking path constrains by Z3 ...   #x7fffffff) (bvslt #x00000001 #x80000001)))))) (not (= #x00000000 #x00000000)))UNSAT
	-> Checking path constrains by Z3 ...  fffff) (bvslt #x00000001 #x80000001)))))) (not (not (= #x00000000 #x00000000))))SAT
	-> Start Jumping from 180f8 --> 180fc
-> Executing 180fc : add sp,sp,#0xc 
-> Executing 18100 : pop {r4,r5,r6,r7,r8,sl,lr} 
-> Executing 18104 : b #0x18084 
	-> Direct Jump to 98436 if null 
	 ==+ Call to: __syscall_select
	-> Start Jumping from 18104 --> 18084
-> Executing 18084 : push {r4,r7,lr} 
-> Executing 18088 : ldr r4,[sp,#0xc] 
-> Executing 1808c : mov r7,#0x8e 
-> Executing 18090 : b 98448-2 
	-> Direct Jump to 98448-2 if VC 
	-> Checking path constrains by Z3 ...  0000)))) (not (or (bvsgt #x00000000 #x7fffffff) (bvslt #x00000000 #x80000001))))SAT
	-> Checking path constrains by Z3 ...  )) (not (not (or (bvsgt #x00000000 #x7fffffff) (bvslt #x00000000 #x80000001)))))UNSAT
	-> Start Jumping from 18090 --> 18090
-> Executing 18090 :  #0 
-> Executing 18090+2 : b 0x18094 
	-> Direct Jump to 98452 if null 
	-> Start Jumping from 18090+2 --> 18094
-> Executing 18094 : cmn r0,#0x1000 
-> Executing 18098 : mov r2,r0 
-> Executing 1809c : b 98460-2 
	-> Direct Jump to 98460-2 if LS 
	-> Checking path constrains by Z3 ...  x80000001)))) (or (= #x0000103e #x00000000)(not (bvugt #x0000103e #xffffffff))))SAT
	-> Checking path constrains by Z3 ...  001)))) (not (or (= #x0000103e #x00000000)(not (bvugt #x0000103e #xffffffff)))))UNSAT
	-> Start Jumping from 1809c --> 1809c
-> Executing 1809c : mov r0,r0 
-> Executing 1809c+2 : b 0x180a0 
	-> Direct Jump to 98464 if null 
	-> Start Jumping from 1809c+2 --> 180a0
-> Executing 180a0 : b #0x180bc 
	-> Direct Jump to 98492 if LS 
	-> Checking path constrains by Z3 ...  xffffffff)))) (or (= #x0000103e #x00000000)(not (bvugt #x0000103e #xffffffff))))SAT
	-> Checking path constrains by Z3 ...  fff)))) (not (or (= #x0000103e #x00000000)(not (bvugt #x0000103e #xffffffff)))))UNSAT
	-> Start Jumping from 180a0 --> 180bc
-> Executing 180bc : pop {r4,r7,lr} 
-> Executing 180c0 : bx lr 
	-> Indirect Jump to lr if null 
	-> Found the destination: 73760
	-> Start Jumping from 180c0 --> 12020
-> Executing 12020 : cmn r0,#1 
-> Executing 12024 : b #0x11f20 
	-> Direct Jump to 73504 if EQ 
	-> Checking path constrains by Z3 ...  103e #x00000000)(not (bvugt #x0000103e #xffffffff)))) (= #x0000003f #x00000000))UNSAT
	-> Checking path constrains by Z3 ...  x00000000)(not (bvugt #x0000103e #xffffffff)))) (not (= #x0000003f #x00000000)))SAT
	-> Start Jumping from 12024 --> 12028
-> Executing 12028 : cmp r0,#0 
-> Executing 1202c : b #0x1205c 
	-> Direct Jump to 73820 if NE 
	-> Checking path constrains by Z3 ...  #xffffffff)))) (not (= #x0000003f #x00000000))) (not (= #x0000003e #x00000000)))SAT
	-> Checking path constrains by Z3 ...  ffff)))) (not (= #x0000003f #x00000000))) (not (not (= #x0000003e #x00000000))))UNSAT
	-> Start Jumping from 1202c --> 1205c
-> Executing 1205c : ldrb r4,[fp] 
-> Executing 12060 : cmp r4,#0 
-> Executing 12064 : b #0x120f0 
	-> Direct Jump to 73968 if EQ 
	-> Checking path constrains by Z3 ...  00003f #x00000000))) (not (= #x0000003e #x00000000))) (= #x00000001 #x00000000))UNSAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x0000003e #x00000000))) (not (= #x00000001 #x00000000)))SAT
	-> Start Jumping from 12064 --> 12068
-> Executing 12068 : ldr r0,[sl] 
-> Executing 1206c : add r2,sp,#0x540 
-> Executing 12070 : lsr r3,r0,#5 
-> Executing 12074 : add r2,r2,#8 
-> Executing 12078 : lsl r3,r3,#2 
-> Executing 1207c : add r3,r3,r2 
-> Executing 12080 : ldr r2,[r3,#-0x140] 
-> Executing 12084 : and r1,r0,#0x1f 
-> Executing 12088 : asr r2,r2,r1 
-> Executing 1208c : ldr r3,[pc,#0x378] 
-> Executing 12090 : mov ip,#0 
-> Executing 12094 : tst r2,#1 
-> Executing 12098 : strb ip,[r3] 
-> Executing 1209c : ldr r4,[pc,#0x364] 
-> Executing 120a0 : b #0x1228c 
	-> Direct Jump to 74380 if NE 
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000001 #x00000000))) (not (= #x00000001 #x00000000)))SAT
	-> Checking path constrains by Z3 ...  00000))) (not (= #x00000001 #x00000000))) (not (not (= #x00000001 #x00000000))))UNSAT
	-> Start Jumping from 120a0 --> 1228c
-> Executing 1228c : mov r5,#4 
-> Executing 12290 : str ip,[sp,#0x53c] 
-> Executing 12294 : add r3,sp,#0x530 
-> Executing 12298 : add ip,sp,#0x530 
-> Executing 1229c : add r3,r3,#0xc 
-> Executing 122a0 : add ip,ip,#8 
-> Executing 122a4 : mov r1,#1 
-> Executing 122a8 : mov r2,r5 
-> Executing 122ac : str r5,[sp,#0x538] 
-> Executing 122b0 : str ip,[sp] 
-> Executing 122b4 : bl #0x18948 
	-> Direct Jump to 100680 if null 
	 === Call to library function: getsockopt
-> Executing 122b8 : ldr r3,[sp,#0x53c] 
-> Executing 122bc : cmp r3,#0 
-> Executing 122c0 : b #0x12350 
	-> Direct Jump to 74576 if EQ 
	-> Checking path constrains by Z3 ...  000001 #x00000000))) (not (= #x00000001 #x00000000))) (= #x00000000 #x00000000))SAT
	-> Checking path constrains by Z3 ...   #x00000000))) (not (= #x00000001 #x00000000))) (not (= #x00000000 #x00000000)))UNSAT
	-> Start Jumping from 122c0 --> 12350
-> Executing 12350 : add r0,sp,#0x500 
-> Executing 12354 : add r0,r0,#8 
-> Executing 12358 : bl #0x17530 
	-> Direct Jump to 95536 if null 
	 ==+ Call to: util_strlen
	-> Start Jumping from 12358 --> 17530
-> Executing 17530 : mov r2,r0 
-> Executing 17534 : ldrb r0,[r0] 
-> Executing 17538 : cmp r0,#0 
-> Process timeout.-> Process ended. Time elapsed: 38253814